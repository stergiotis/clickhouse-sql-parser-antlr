// Code generated from ClickHouseParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package grammar // ClickHouseParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ClickHouseParser struct {
	*antlr.BaseParser
}

var ClickHouseParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func clickhouseparserParserInit() {
	staticData := &ClickHouseParserParserStaticData
	staticData.LiteralNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "'false'", "'true'", "", "", "", "", "", "", "'->'", "'*'",
		"'`'", "'\\'", "':'", "','", "'||'", "'-'", "'.'", "'=='", "'='", "'>='",
		"'>'", "'{'", "'['", "'<='", "'('", "'<'", "", "'%'", "'+'", "'?'",
		"'\"'", "'''", "'}'", "']'", "')'", "';'", "'/'", "'_'",
	}
	staticData.SymbolicNames = []string{
		"", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", "ARRAY",
		"AS", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH",
		"BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", "COLLATE",
		"COLUMN", "COMMENT", "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT",
		"DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", "DEFAULT", "DELAY",
		"DELETE", "DESC", "DESCENDING", "DESCRIBE", "DETACH", "DICTIONARIES",
		"DICTIONARY", "DISK", "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", "END",
		"ENGINE", "EVENTS", "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES",
		"FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", "FREEZE", "FROM",
		"FULL", "FUNCTION", "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL",
		"HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER",
		"INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", "JOIN", "KEY", "KILL",
		"LAST", "LAYOUT", "LEADING", "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE",
		"LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", "MIN",
		"MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", "NAN_SQL", "NO", "NOT",
		"NULL_SQL", "NULLS", "OFFSET", "ON", "OPTIMIZE", "OR", "ORDER", "OUTER",
		"OUTFILE", "OVER", "PARTITION", "POPULATE", "PRECEDING", "PREWHERE",
		"PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", "REMOVE", "RENAME",
		"REPLACE", "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", "ROW", "ROWS",
		"SAMPLE", "SECOND", "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW",
		"SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM",
		"TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", "TIMESTAMP",
		"TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE",
		"UNBOUNDED", "UNION", "UPDATE", "USE", "USING", "UUID", "VALUES", "VIEW",
		"VOLUME", "WATCH", "WEEK", "WHEN", "WHERE", "WINDOW", "WITH", "YEAR",
		"JSON_FALSE", "JSON_TRUE", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL",
		"DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW",
		"ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "CONCAT", "DASH",
		"DOT", "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "LBRACE", "LBRACKET", "LE",
		"LPAREN", "LT", "NOT_EQ", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE",
		"QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", "SLASH",
		"UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE",
	}
	staticData.RuleNames = []string{
		"queryStmt", "query", "ctes", "namedQuery", "columnAliases", "alterStmt",
		"alterTableClause", "assignmentExprList", "assignmentExpr", "tableColumnPropertyType",
		"partitionClause", "attachStmt", "checkStmt", "createStmt", "dictionarySchemaClause",
		"dictionaryAttrDfnt", "dictionaryEngineClause", "dictionaryPrimaryKeyClause",
		"dictionaryArgExpr", "sourceClause", "lifetimeClause", "layoutClause",
		"rangeClause", "dictionarySettingsClause", "clusterClause", "uuidClause",
		"destinationClause", "subqueryClause", "tableSchemaClause", "engineClause",
		"partitionByClause", "primaryKeyClause", "sampleByClause", "ttlClause",
		"engineExpr", "tableElementExpr", "tableColumnDfnt", "tableColumnPropertyExpr",
		"tableIndexDfnt", "tableProjectionDfnt", "codecExpr", "codecArgExpr",
		"ttlExpr", "describeStmt", "dropStmt", "existsStmt", "explainStmt",
		"insertStmt", "columnsClause", "dataClause", "assignmentValues", "assignmentValue",
		"killStmt", "optimizeStmt", "renameStmt", "projectionSelectStmt", "selectUnionStmt",
		"selectStmtWithParens", "selectStmt", "withClause", "topClause", "fromClause",
		"arrayJoinClause", "windowClause", "prewhereClause", "whereClause",
		"groupByClause", "havingClause", "orderByClause", "projectionOrderByClause",
		"limitByClause", "limitClause", "settingsClause", "joinExpr", "joinOp",
		"joinOpCross", "joinConstraintClause", "sampleClause", "limitExpr",
		"orderExprList", "orderExpr", "ratioExpr", "settingExprList", "settingExpr",
		"windowExpr", "winPartitionByClause", "winOrderByClause", "winFrameClause",
		"winFrameExtend", "winFrameBound", "setStmt", "showStmt", "systemStmt",
		"truncateStmt", "useStmt", "watchStmt", "columnTypeExpr", "columnExprList",
		"columnsExpr", "columnExpr", "columnArgList", "columnArgExpr", "columnLambdaExpr",
		"columnIdentifier", "nestedIdentifier", "tableExpr", "tableFunctionExpr",
		"tableIdentifier", "tableArgList", "tableArgExpr", "databaseIdentifier",
		"floatingLiteral", "numberLiteral", "literal", "interval", "keyword",
		"keywordForAlias", "alias", "identifier", "identifierOrNull", "enumValue",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 230, 2093, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 1, 0, 1, 0, 1, 0,
		1, 0, 3, 0, 247, 8, 0, 1, 0, 1, 0, 3, 0, 251, 8, 0, 1, 0, 3, 0, 254, 8,
		0, 1, 0, 3, 0, 257, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 3, 1, 280, 8, 1, 1, 1, 3, 1, 283, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2,
		5, 2, 289, 8, 2, 10, 2, 12, 2, 292, 9, 2, 1, 3, 1, 3, 3, 3, 296, 8, 3,
		1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 307, 8, 4,
		10, 4, 12, 4, 310, 9, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 318,
		8, 5, 1, 5, 1, 5, 1, 5, 5, 5, 323, 8, 5, 10, 5, 12, 5, 326, 9, 5, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 333, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 338, 8,
		6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 345, 8, 6, 1, 6, 1, 6, 1, 6, 3,
		6, 350, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 357, 8, 6, 1, 6, 1, 6,
		1, 6, 3, 6, 362, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 368, 8, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 3, 6, 374, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 379, 8, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 3, 6, 385, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 390, 8, 6, 1,
		6, 1, 6, 1, 6, 1, 6, 3, 6, 396, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 401, 8, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 407, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 421, 8, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 3, 6, 428, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6,
		435, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 442, 8, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 3, 6, 448, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 453, 8, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 3, 6, 459, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 464, 8, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 3, 6, 470, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1,
		6, 3, 6, 479, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3,
		6, 489, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 499,
		8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 519, 8, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 527, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 542, 8, 6, 1, 7,
		1, 7, 1, 7, 5, 7, 547, 8, 7, 10, 7, 12, 7, 550, 9, 7, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 563, 8, 10,
		1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 569, 8, 11, 1, 12, 1, 12, 1, 12, 1,
		12, 3, 12, 575, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 582, 8,
		13, 1, 13, 1, 13, 3, 13, 586, 8, 13, 1, 13, 3, 13, 589, 8, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 3, 13, 595, 8, 13, 1, 13, 3, 13, 598, 8, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 3, 13, 604, 8, 13, 1, 13, 1, 13, 3, 13, 608, 8, 13, 1,
		13, 3, 13, 611, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 3, 13, 622, 8, 13, 1, 13, 1, 13, 3, 13, 626, 8, 13, 1, 13,
		3, 13, 629, 8, 13, 1, 13, 1, 13, 1, 13, 3, 13, 634, 8, 13, 3, 13, 636,
		8, 13, 1, 13, 3, 13, 639, 8, 13, 1, 13, 3, 13, 642, 8, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 652, 8, 13, 1, 13, 1,
		13, 3, 13, 656, 8, 13, 1, 13, 3, 13, 659, 8, 13, 1, 13, 3, 13, 662, 8,
		13, 1, 13, 1, 13, 1, 13, 3, 13, 667, 8, 13, 3, 13, 669, 8, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 677, 8, 13, 1, 13, 3, 13, 680, 8,
		13, 1, 13, 3, 13, 683, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 689, 8,
		13, 1, 13, 1, 13, 3, 13, 693, 8, 13, 1, 13, 3, 13, 696, 8, 13, 1, 13, 3,
		13, 699, 8, 13, 1, 13, 3, 13, 702, 8, 13, 1, 13, 3, 13, 705, 8, 13, 1,
		13, 1, 13, 1, 13, 3, 13, 710, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13,
		716, 8, 13, 1, 13, 1, 13, 3, 13, 720, 8, 13, 1, 13, 3, 13, 723, 8, 13,
		1, 13, 3, 13, 726, 8, 13, 1, 13, 1, 13, 3, 13, 730, 8, 13, 1, 14, 1, 14,
		1, 14, 1, 14, 5, 14, 736, 8, 14, 10, 14, 12, 14, 739, 9, 14, 1, 14, 1,
		14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 5, 15, 765, 8, 15, 10, 15, 12, 15, 768, 9, 15, 1, 16, 1, 16,
		3, 16, 772, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 5, 16, 794, 8, 16, 10, 16, 12, 16, 797, 9, 16, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 807, 8, 18, 1, 18,
		3, 18, 810, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 817, 8, 19,
		10, 19, 12, 19, 820, 9, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 836, 8, 20,
		1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21, 845, 8, 21, 10,
		21, 12, 21, 848, 9, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 865, 8,
		22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24,
		1, 24, 3, 24, 878, 8, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1,
		27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 5, 28, 893, 8, 28, 10, 28,
		12, 28, 896, 9, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 904,
		8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1,
		29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 5, 29, 932, 8, 29, 10, 29, 12,
		29, 935, 9, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31,
		1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 953, 8,
		33, 10, 33, 12, 33, 956, 9, 33, 1, 34, 1, 34, 3, 34, 960, 8, 34, 1, 34,
		1, 34, 1, 34, 3, 34, 965, 8, 34, 1, 34, 3, 34, 968, 8, 34, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 980, 8,
		35, 1, 36, 1, 36, 1, 36, 3, 36, 985, 8, 36, 1, 36, 1, 36, 3, 36, 989, 8,
		36, 1, 36, 3, 36, 992, 8, 36, 1, 36, 1, 36, 3, 36, 996, 8, 36, 1, 36, 1,
		36, 3, 36, 1000, 8, 36, 1, 36, 1, 36, 1, 36, 3, 36, 1005, 8, 36, 1, 36,
		3, 36, 1008, 8, 36, 1, 36, 1, 36, 3, 36, 1012, 8, 36, 3, 36, 1014, 8, 36,
		1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1,
		39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 5, 40, 1034, 8, 40,
		10, 40, 12, 40, 1037, 9, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 3, 41,
		1044, 8, 41, 1, 41, 3, 41, 1047, 8, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1,
		42, 1, 42, 1, 42, 1, 42, 3, 42, 1057, 8, 42, 1, 43, 1, 43, 3, 43, 1061,
		8, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 1069, 8, 44, 1,
		44, 1, 44, 3, 44, 1073, 8, 44, 1, 44, 1, 44, 1, 44, 3, 44, 1078, 8, 44,
		1, 44, 1, 44, 3, 44, 1082, 8, 44, 1, 44, 1, 44, 3, 44, 1086, 8, 44, 1,
		44, 1, 44, 3, 44, 1090, 8, 44, 1, 44, 1, 44, 3, 44, 1094, 8, 44, 3, 44,
		1096, 8, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 3, 45, 1104, 8,
		45, 1, 45, 1, 45, 3, 45, 1108, 8, 45, 1, 45, 3, 45, 1111, 8, 45, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 1119, 8, 46, 1, 47, 1, 47, 1,
		47, 3, 47, 1124, 8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1129, 8, 47, 1, 47,
		3, 47, 1132, 8, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 5, 48, 1140,
		8, 48, 10, 48, 12, 48, 1143, 9, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 5, 49, 1153, 8, 49, 10, 49, 12, 49, 1156, 9, 49, 1,
		49, 1, 49, 3, 49, 1160, 8, 49, 1, 49, 1, 49, 3, 49, 1164, 8, 49, 1, 50,
		1, 50, 1, 50, 1, 50, 5, 50, 1170, 8, 50, 10, 50, 12, 50, 1173, 9, 50, 1,
		50, 1, 50, 1, 50, 1, 50, 3, 50, 1179, 8, 50, 1, 51, 1, 51, 1, 52, 1, 52,
		1, 52, 3, 52, 1186, 8, 52, 1, 52, 1, 52, 3, 52, 1190, 8, 52, 1, 53, 1,
		53, 1, 53, 1, 53, 3, 53, 1196, 8, 53, 1, 53, 3, 53, 1199, 8, 53, 1, 53,
		3, 53, 1202, 8, 53, 1, 53, 3, 53, 1205, 8, 53, 1, 54, 1, 54, 1, 54, 1,
		54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 5, 54, 1217, 8, 54, 10, 54,
		12, 54, 1220, 9, 54, 1, 54, 3, 54, 1223, 8, 54, 1, 55, 1, 55, 3, 55, 1227,
		8, 55, 1, 55, 1, 55, 1, 55, 3, 55, 1232, 8, 55, 1, 55, 3, 55, 1235, 8,
		55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 5, 56, 1243, 8, 56, 10, 56,
		12, 56, 1246, 9, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 1253, 8,
		57, 1, 58, 3, 58, 1256, 8, 58, 1, 58, 1, 58, 3, 58, 1260, 8, 58, 1, 58,
		3, 58, 1263, 8, 58, 1, 58, 1, 58, 3, 58, 1267, 8, 58, 1, 58, 3, 58, 1270,
		8, 58, 1, 58, 3, 58, 1273, 8, 58, 1, 58, 3, 58, 1276, 8, 58, 1, 58, 3,
		58, 1279, 8, 58, 1, 58, 3, 58, 1282, 8, 58, 1, 58, 1, 58, 3, 58, 1286,
		8, 58, 1, 58, 1, 58, 3, 58, 1290, 8, 58, 1, 58, 3, 58, 1293, 8, 58, 1,
		58, 3, 58, 1296, 8, 58, 1, 58, 3, 58, 1299, 8, 58, 1, 58, 3, 58, 1302,
		8, 58, 1, 58, 3, 58, 1305, 8, 58, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1,
		60, 1, 60, 3, 60, 1314, 8, 60, 1, 61, 1, 61, 1, 61, 1, 62, 3, 62, 1320,
		8, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1,
		63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66,
		1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1347, 8, 66, 1, 67, 1, 67, 1,
		67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70,
		1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 3, 71, 1369, 8, 71, 1,
		72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 3, 73, 1377, 8, 73, 1, 73, 3, 73,
		1380, 8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1386, 8, 73, 1, 73, 1,
		73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1394, 8, 73, 1, 73, 3, 73, 1397,
		8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 5, 73, 1403, 8, 73, 10, 73, 12, 73,
		1406, 9, 73, 1, 74, 3, 74, 1409, 8, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1414,
		8, 74, 1, 74, 3, 74, 1417, 8, 74, 1, 74, 3, 74, 1420, 8, 74, 1, 74, 1,
		74, 3, 74, 1424, 8, 74, 1, 74, 1, 74, 3, 74, 1428, 8, 74, 1, 74, 3, 74,
		1431, 8, 74, 3, 74, 1433, 8, 74, 1, 74, 3, 74, 1436, 8, 74, 1, 74, 1, 74,
		3, 74, 1440, 8, 74, 1, 74, 1, 74, 3, 74, 1444, 8, 74, 1, 74, 3, 74, 1447,
		8, 74, 3, 74, 1449, 8, 74, 3, 74, 1451, 8, 74, 1, 75, 3, 75, 1454, 8, 75,
		1, 75, 1, 75, 1, 75, 3, 75, 1459, 8, 75, 1, 76, 1, 76, 1, 76, 1, 76, 1,
		76, 1, 76, 1, 76, 1, 76, 1, 76, 3, 76, 1470, 8, 76, 1, 77, 1, 77, 1, 77,
		1, 77, 3, 77, 1476, 8, 77, 1, 78, 1, 78, 1, 78, 3, 78, 1481, 8, 78, 1,
		79, 1, 79, 1, 79, 5, 79, 1486, 8, 79, 10, 79, 12, 79, 1489, 9, 79, 1, 80,
		1, 80, 3, 80, 1493, 8, 80, 1, 80, 1, 80, 3, 80, 1497, 8, 80, 1, 80, 1,
		80, 3, 80, 1501, 8, 80, 1, 81, 1, 81, 1, 81, 3, 81, 1506, 8, 81, 1, 82,
		1, 82, 1, 82, 5, 82, 1511, 8, 82, 10, 82, 12, 82, 1514, 9, 82, 1, 83, 1,
		83, 1, 83, 1, 83, 1, 84, 3, 84, 1521, 8, 84, 1, 84, 3, 84, 1524, 8, 84,
		1, 84, 3, 84, 1527, 8, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1,
		86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88,
		3, 88, 1546, 8, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1,
		89, 1, 89, 1, 89, 1, 89, 1, 89, 3, 89, 1560, 8, 89, 1, 90, 1, 90, 1, 90,
		1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1,
		91, 3, 91, 1576, 8, 91, 1, 91, 3, 91, 1579, 8, 91, 1, 91, 1, 91, 1, 91,
		1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1588, 8, 91, 1, 91, 1, 91, 3, 91, 1592,
		8, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1597, 8, 91, 1, 91, 1, 91, 1, 91, 3,
		91, 1602, 8, 91, 1, 91, 3, 91, 1605, 8, 91, 3, 91, 1607, 8, 91, 1, 92,
		1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1,
		92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 1629,
		8, 92, 1, 92, 3, 92, 1632, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1,
		92, 1, 92, 1, 92, 1, 92, 3, 92, 1643, 8, 92, 1, 93, 1, 93, 3, 93, 1647,
		8, 93, 1, 93, 3, 93, 1650, 8, 93, 1, 93, 1, 93, 3, 93, 1654, 8, 93, 1,
		93, 1, 93, 3, 93, 1658, 8, 93, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95,
		3, 95, 1666, 8, 95, 1, 95, 1, 95, 3, 95, 1670, 8, 95, 1, 96, 1, 96, 1,
		96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 5, 96, 1681, 8, 96, 10, 96,
		12, 96, 1684, 9, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 5,
		96, 1693, 8, 96, 10, 96, 12, 96, 1696, 9, 96, 1, 96, 1, 96, 1, 96, 1, 96,
		1, 96, 1, 96, 1, 96, 5, 96, 1705, 8, 96, 10, 96, 12, 96, 1708, 9, 96, 1,
		96, 1, 96, 1, 96, 1, 96, 1, 96, 3, 96, 1715, 8, 96, 1, 96, 1, 96, 3, 96,
		1719, 8, 96, 1, 97, 1, 97, 1, 97, 5, 97, 1724, 8, 97, 10, 97, 12, 97, 1727,
		9, 97, 1, 98, 1, 98, 1, 98, 3, 98, 1732, 8, 98, 1, 98, 1, 98, 1, 98, 1,
		98, 1, 98, 1, 98, 3, 98, 1740, 8, 98, 1, 99, 1, 99, 1, 99, 3, 99, 1745,
		8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 4, 99, 1752, 8, 99, 11, 99, 12,
		99, 1753, 1, 99, 1, 99, 3, 99, 1758, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1789, 8, 99, 1, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 3, 99, 1806, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 1, 99, 3, 99, 1818, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1828, 8, 99, 1, 99, 3, 99, 1831, 8,
		99, 1, 99, 1, 99, 3, 99, 1835, 8, 99, 1, 99, 3, 99, 1838, 8, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1850,
		8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1867, 8, 99, 1, 99, 1, 99,
		3, 99, 1871, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1888, 8, 99,
		1, 99, 3, 99, 1891, 8, 99, 1, 99, 1, 99, 3, 99, 1895, 8, 99, 1, 99, 3,
		99, 1898, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 3, 99, 1909, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1933, 8, 99, 1, 99, 1, 99, 1,
		99, 1, 99, 1, 99, 3, 99, 1940, 8, 99, 5, 99, 1942, 8, 99, 10, 99, 12, 99,
		1945, 9, 99, 1, 100, 1, 100, 1, 100, 5, 100, 1950, 8, 100, 10, 100, 12,
		100, 1953, 9, 100, 1, 101, 1, 101, 3, 101, 1957, 8, 101, 1, 102, 1, 102,
		1, 102, 1, 102, 5, 102, 1963, 8, 102, 10, 102, 12, 102, 1966, 9, 102, 1,
		102, 1, 102, 1, 102, 1, 102, 1, 102, 5, 102, 1973, 8, 102, 10, 102, 12,
		102, 1976, 9, 102, 3, 102, 1978, 8, 102, 1, 102, 1, 102, 1, 102, 1, 103,
		1, 103, 1, 103, 3, 103, 1986, 8, 103, 1, 103, 1, 103, 1, 104, 1, 104, 1,
		104, 3, 104, 1993, 8, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105,
		1, 105, 3, 105, 2002, 8, 105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 2008,
		8, 105, 5, 105, 2010, 8, 105, 10, 105, 12, 105, 2013, 9, 105, 1, 106, 1,
		106, 1, 106, 3, 106, 2018, 8, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 107,
		3, 107, 2025, 8, 107, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 5, 108, 2032,
		8, 108, 10, 108, 12, 108, 2035, 9, 108, 1, 109, 1, 109, 1, 109, 3, 109,
		2040, 8, 109, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1,
		111, 3, 111, 2050, 8, 111, 3, 111, 2052, 8, 111, 1, 112, 3, 112, 2055,
		8, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 3, 112, 2063, 8,
		112, 1, 113, 1, 113, 1, 113, 3, 113, 2068, 8, 113, 1, 114, 1, 114, 1, 115,
		1, 115, 1, 116, 1, 116, 1, 117, 1, 117, 3, 117, 2078, 8, 117, 1, 118, 1,
		118, 1, 118, 3, 118, 2083, 8, 118, 1, 119, 1, 119, 3, 119, 2087, 8, 119,
		1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 0, 3, 146, 198, 210, 121, 0, 2,
		4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
		42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76,
		78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110,
		112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,
		142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170,
		172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200,
		202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230,
		232, 234, 236, 238, 240, 0, 28, 6, 0, 3, 3, 24, 24, 27, 27, 38, 38, 103,
		103, 172, 172, 2, 0, 15, 15, 29, 29, 3, 0, 3, 3, 38, 38, 103, 103, 2, 0,
		41, 41, 43, 43, 2, 0, 44, 44, 50, 50, 3, 0, 14, 14, 155, 155, 161, 161,
		2, 0, 31, 31, 140, 140, 2, 0, 83, 83, 95, 95, 2, 0, 70, 70, 100, 100, 3,
		0, 4, 4, 8, 8, 12, 12, 4, 0, 4, 4, 7, 8, 12, 12, 146, 146, 2, 0, 95, 95,
		139, 139, 2, 0, 4, 4, 8, 8, 2, 0, 117, 117, 203, 203, 2, 0, 11, 11, 41,
		42, 2, 0, 61, 61, 92, 92, 2, 0, 132, 132, 142, 142, 2, 0, 67, 67, 79, 79,
		1, 0, 152, 153, 3, 0, 17, 17, 94, 94, 169, 169, 3, 0, 199, 199, 217, 217,
		226, 226, 2, 0, 204, 205, 218, 218, 2, 0, 78, 78, 97, 97, 1, 0, 194, 195,
		2, 0, 205, 205, 218, 218, 8, 0, 36, 36, 75, 75, 107, 107, 109, 109, 131,
		131, 144, 144, 184, 184, 189, 189, 12, 0, 2, 35, 37, 74, 76, 80, 82, 106,
		108, 108, 110, 111, 113, 114, 116, 129, 132, 143, 145, 183, 185, 188, 190,
		191, 4, 0, 35, 35, 61, 61, 76, 76, 90, 90, 2381, 0, 256, 1, 0, 0, 0, 2,
		282, 1, 0, 0, 0, 4, 284, 1, 0, 0, 0, 6, 293, 1, 0, 0, 0, 8, 302, 1, 0,
		0, 0, 10, 313, 1, 0, 0, 0, 12, 541, 1, 0, 0, 0, 14, 543, 1, 0, 0, 0, 16,
		551, 1, 0, 0, 0, 18, 555, 1, 0, 0, 0, 20, 562, 1, 0, 0, 0, 22, 564, 1,
		0, 0, 0, 24, 570, 1, 0, 0, 0, 26, 729, 1, 0, 0, 0, 28, 731, 1, 0, 0, 0,
		30, 742, 1, 0, 0, 0, 32, 769, 1, 0, 0, 0, 34, 798, 1, 0, 0, 0, 36, 802,
		1, 0, 0, 0, 38, 811, 1, 0, 0, 0, 40, 824, 1, 0, 0, 0, 42, 839, 1, 0, 0,
		0, 44, 852, 1, 0, 0, 0, 46, 868, 1, 0, 0, 0, 48, 873, 1, 0, 0, 0, 50, 879,
		1, 0, 0, 0, 52, 882, 1, 0, 0, 0, 54, 885, 1, 0, 0, 0, 56, 903, 1, 0, 0,
		0, 58, 905, 1, 0, 0, 0, 60, 936, 1, 0, 0, 0, 62, 940, 1, 0, 0, 0, 64, 944,
		1, 0, 0, 0, 66, 948, 1, 0, 0, 0, 68, 957, 1, 0, 0, 0, 70, 979, 1, 0, 0,
		0, 72, 1013, 1, 0, 0, 0, 74, 1015, 1, 0, 0, 0, 76, 1018, 1, 0, 0, 0, 78,
		1025, 1, 0, 0, 0, 80, 1028, 1, 0, 0, 0, 82, 1040, 1, 0, 0, 0, 84, 1048,
		1, 0, 0, 0, 86, 1058, 1, 0, 0, 0, 88, 1095, 1, 0, 0, 0, 90, 1110, 1, 0,
		0, 0, 92, 1118, 1, 0, 0, 0, 94, 1120, 1, 0, 0, 0, 96, 1135, 1, 0, 0, 0,
		98, 1163, 1, 0, 0, 0, 100, 1178, 1, 0, 0, 0, 102, 1180, 1, 0, 0, 0, 104,
		1182, 1, 0, 0, 0, 106, 1191, 1, 0, 0, 0, 108, 1206, 1, 0, 0, 0, 110, 1224,
		1, 0, 0, 0, 112, 1238, 1, 0, 0, 0, 114, 1252, 1, 0, 0, 0, 116, 1255, 1,
		0, 0, 0, 118, 1306, 1, 0, 0, 0, 120, 1309, 1, 0, 0, 0, 122, 1315, 1, 0,
		0, 0, 124, 1319, 1, 0, 0, 0, 126, 1325, 1, 0, 0, 0, 128, 1332, 1, 0, 0,
		0, 130, 1335, 1, 0, 0, 0, 132, 1338, 1, 0, 0, 0, 134, 1348, 1, 0, 0, 0,
		136, 1351, 1, 0, 0, 0, 138, 1355, 1, 0, 0, 0, 140, 1359, 1, 0, 0, 0, 142,
		1364, 1, 0, 0, 0, 144, 1370, 1, 0, 0, 0, 146, 1385, 1, 0, 0, 0, 148, 1450,
		1, 0, 0, 0, 150, 1458, 1, 0, 0, 0, 152, 1469, 1, 0, 0, 0, 154, 1471, 1,
		0, 0, 0, 156, 1477, 1, 0, 0, 0, 158, 1482, 1, 0, 0, 0, 160, 1490, 1, 0,
		0, 0, 162, 1502, 1, 0, 0, 0, 164, 1507, 1, 0, 0, 0, 166, 1515, 1, 0, 0,
		0, 168, 1520, 1, 0, 0, 0, 170, 1528, 1, 0, 0, 0, 172, 1532, 1, 0, 0, 0,
		174, 1536, 1, 0, 0, 0, 176, 1545, 1, 0, 0, 0, 178, 1559, 1, 0, 0, 0, 180,
		1561, 1, 0, 0, 0, 182, 1606, 1, 0, 0, 0, 184, 1642, 1, 0, 0, 0, 186, 1644,
		1, 0, 0, 0, 188, 1659, 1, 0, 0, 0, 190, 1662, 1, 0, 0, 0, 192, 1718, 1,
		0, 0, 0, 194, 1720, 1, 0, 0, 0, 196, 1739, 1, 0, 0, 0, 198, 1870, 1, 0,
		0, 0, 200, 1946, 1, 0, 0, 0, 202, 1956, 1, 0, 0, 0, 204, 1977, 1, 0, 0,
		0, 206, 1985, 1, 0, 0, 0, 208, 1989, 1, 0, 0, 0, 210, 2001, 1, 0, 0, 0,
		212, 2014, 1, 0, 0, 0, 214, 2024, 1, 0, 0, 0, 216, 2028, 1, 0, 0, 0, 218,
		2039, 1, 0, 0, 0, 220, 2041, 1, 0, 0, 0, 222, 2051, 1, 0, 0, 0, 224, 2054,
		1, 0, 0, 0, 226, 2067, 1, 0, 0, 0, 228, 2069, 1, 0, 0, 0, 230, 2071, 1,
		0, 0, 0, 232, 2073, 1, 0, 0, 0, 234, 2077, 1, 0, 0, 0, 236, 2082, 1, 0,
		0, 0, 238, 2086, 1, 0, 0, 0, 240, 2088, 1, 0, 0, 0, 242, 246, 3, 2, 1,
		0, 243, 244, 5, 86, 0, 0, 244, 245, 5, 123, 0, 0, 245, 247, 5, 197, 0,
		0, 246, 243, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0, 247, 250, 1, 0, 0, 0, 248,
		249, 5, 65, 0, 0, 249, 251, 3, 238, 119, 0, 250, 248, 1, 0, 0, 0, 250,
		251, 1, 0, 0, 0, 251, 253, 1, 0, 0, 0, 252, 254, 5, 225, 0, 0, 253, 252,
		1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 257, 3, 94,
		47, 0, 256, 242, 1, 0, 0, 0, 256, 255, 1, 0, 0, 0, 257, 258, 1, 0, 0, 0,
		258, 259, 5, 0, 0, 1, 259, 1, 1, 0, 0, 0, 260, 283, 3, 10, 5, 0, 261, 283,
		3, 22, 11, 0, 262, 283, 3, 24, 12, 0, 263, 283, 3, 26, 13, 0, 264, 283,
		3, 86, 43, 0, 265, 283, 3, 88, 44, 0, 266, 283, 3, 90, 45, 0, 267, 283,
		3, 92, 46, 0, 268, 283, 3, 104, 52, 0, 269, 283, 3, 106, 53, 0, 270, 283,
		3, 108, 54, 0, 271, 283, 3, 112, 56, 0, 272, 283, 3, 180, 90, 0, 273, 283,
		3, 182, 91, 0, 274, 283, 3, 184, 92, 0, 275, 283, 3, 186, 93, 0, 276, 283,
		3, 188, 94, 0, 277, 283, 3, 190, 95, 0, 278, 280, 3, 4, 2, 0, 279, 278,
		1, 0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 281, 1, 0, 0, 0, 281, 283, 3, 116,
		58, 0, 282, 260, 1, 0, 0, 0, 282, 261, 1, 0, 0, 0, 282, 262, 1, 0, 0, 0,
		282, 263, 1, 0, 0, 0, 282, 264, 1, 0, 0, 0, 282, 265, 1, 0, 0, 0, 282,
		266, 1, 0, 0, 0, 282, 267, 1, 0, 0, 0, 282, 268, 1, 0, 0, 0, 282, 269,
		1, 0, 0, 0, 282, 270, 1, 0, 0, 0, 282, 271, 1, 0, 0, 0, 282, 272, 1, 0,
		0, 0, 282, 273, 1, 0, 0, 0, 282, 274, 1, 0, 0, 0, 282, 275, 1, 0, 0, 0,
		282, 276, 1, 0, 0, 0, 282, 277, 1, 0, 0, 0, 282, 279, 1, 0, 0, 0, 283,
		3, 1, 0, 0, 0, 284, 285, 5, 188, 0, 0, 285, 290, 3, 6, 3, 0, 286, 287,
		5, 203, 0, 0, 287, 289, 3, 6, 3, 0, 288, 286, 1, 0, 0, 0, 289, 292, 1,
		0, 0, 0, 290, 288, 1, 0, 0, 0, 290, 291, 1, 0, 0, 0, 291, 5, 1, 0, 0, 0,
		292, 290, 1, 0, 0, 0, 293, 295, 3, 236, 118, 0, 294, 296, 3, 8, 4, 0, 295,
		294, 1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 297, 1, 0, 0, 0, 297, 298,
		5, 10, 0, 0, 298, 299, 5, 214, 0, 0, 299, 300, 3, 2, 1, 0, 300, 301, 5,
		224, 0, 0, 301, 7, 1, 0, 0, 0, 302, 303, 5, 214, 0, 0, 303, 308, 3, 236,
		118, 0, 304, 305, 5, 203, 0, 0, 305, 307, 3, 236, 118, 0, 306, 304, 1,
		0, 0, 0, 307, 310, 1, 0, 0, 0, 308, 306, 1, 0, 0, 0, 308, 309, 1, 0, 0,
		0, 309, 311, 1, 0, 0, 0, 310, 308, 1, 0, 0, 0, 311, 312, 5, 224, 0, 0,
		312, 9, 1, 0, 0, 0, 313, 314, 5, 5, 0, 0, 314, 315, 5, 158, 0, 0, 315,
		317, 3, 214, 107, 0, 316, 318, 3, 48, 24, 0, 317, 316, 1, 0, 0, 0, 317,
		318, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 324, 3, 12, 6, 0, 320, 321,
		5, 203, 0, 0, 321, 323, 3, 12, 6, 0, 322, 320, 1, 0, 0, 0, 323, 326, 1,
		0, 0, 0, 324, 322, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 11, 1, 0, 0,
		0, 326, 324, 1, 0, 0, 0, 327, 328, 5, 1, 0, 0, 328, 332, 5, 26, 0, 0, 329,
		330, 5, 77, 0, 0, 330, 331, 5, 114, 0, 0, 331, 333, 5, 55, 0, 0, 332, 329,
		1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 337, 3, 72,
		36, 0, 335, 336, 5, 2, 0, 0, 336, 338, 3, 208, 104, 0, 337, 335, 1, 0,
		0, 0, 337, 338, 1, 0, 0, 0, 338, 542, 1, 0, 0, 0, 339, 340, 5, 1, 0, 0,
		340, 344, 5, 80, 0, 0, 341, 342, 5, 77, 0, 0, 342, 343, 5, 114, 0, 0, 343,
		345, 5, 55, 0, 0, 344, 341, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 346,
		1, 0, 0, 0, 346, 349, 3, 76, 38, 0, 347, 348, 5, 2, 0, 0, 348, 350, 3,
		208, 104, 0, 349, 347, 1, 0, 0, 0, 349, 350, 1, 0, 0, 0, 350, 542, 1, 0,
		0, 0, 351, 352, 5, 1, 0, 0, 352, 356, 5, 130, 0, 0, 353, 354, 5, 77, 0,
		0, 354, 355, 5, 114, 0, 0, 355, 357, 5, 55, 0, 0, 356, 353, 1, 0, 0, 0,
		356, 357, 1, 0, 0, 0, 357, 358, 1, 0, 0, 0, 358, 361, 3, 78, 39, 0, 359,
		360, 5, 2, 0, 0, 360, 362, 3, 208, 104, 0, 361, 359, 1, 0, 0, 0, 361, 362,
		1, 0, 0, 0, 362, 542, 1, 0, 0, 0, 363, 364, 5, 15, 0, 0, 364, 367, 3, 20,
		10, 0, 365, 366, 5, 67, 0, 0, 366, 368, 3, 214, 107, 0, 367, 365, 1, 0,
		0, 0, 367, 368, 1, 0, 0, 0, 368, 542, 1, 0, 0, 0, 369, 370, 5, 22, 0, 0,
		370, 373, 5, 26, 0, 0, 371, 372, 5, 77, 0, 0, 372, 374, 5, 55, 0, 0, 373,
		371, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 378,
		3, 208, 104, 0, 376, 377, 5, 79, 0, 0, 377, 379, 3, 20, 10, 0, 378, 376,
		1, 0, 0, 0, 378, 379, 1, 0, 0, 0, 379, 542, 1, 0, 0, 0, 380, 381, 5, 22,
		0, 0, 381, 384, 5, 80, 0, 0, 382, 383, 5, 77, 0, 0, 383, 385, 5, 55, 0,
		0, 384, 382, 1, 0, 0, 0, 384, 385, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386,
		389, 3, 208, 104, 0, 387, 388, 5, 79, 0, 0, 388, 390, 3, 20, 10, 0, 389,
		387, 1, 0, 0, 0, 389, 390, 1, 0, 0, 0, 390, 542, 1, 0, 0, 0, 391, 392,
		5, 22, 0, 0, 392, 395, 5, 130, 0, 0, 393, 394, 5, 77, 0, 0, 394, 396, 5,
		55, 0, 0, 395, 393, 1, 0, 0, 0, 395, 396, 1, 0, 0, 0, 396, 397, 1, 0, 0,
		0, 397, 400, 3, 208, 104, 0, 398, 399, 5, 79, 0, 0, 399, 401, 3, 20, 10,
		0, 400, 398, 1, 0, 0, 0, 400, 401, 1, 0, 0, 0, 401, 542, 1, 0, 0, 0, 402,
		403, 5, 27, 0, 0, 403, 406, 5, 26, 0, 0, 404, 405, 5, 77, 0, 0, 405, 407,
		5, 55, 0, 0, 406, 404, 1, 0, 0, 0, 406, 407, 1, 0, 0, 0, 407, 408, 1, 0,
		0, 0, 408, 409, 3, 208, 104, 0, 409, 410, 5, 197, 0, 0, 410, 542, 1, 0,
		0, 0, 411, 412, 5, 40, 0, 0, 412, 413, 5, 186, 0, 0, 413, 542, 3, 198,
		99, 0, 414, 415, 5, 44, 0, 0, 415, 542, 3, 20, 10, 0, 416, 417, 5, 50,
		0, 0, 417, 420, 5, 26, 0, 0, 418, 419, 5, 77, 0, 0, 419, 421, 5, 55, 0,
		0, 420, 418, 1, 0, 0, 0, 420, 421, 1, 0, 0, 0, 421, 422, 1, 0, 0, 0, 422,
		542, 3, 208, 104, 0, 423, 424, 5, 50, 0, 0, 424, 427, 5, 80, 0, 0, 425,
		426, 5, 77, 0, 0, 426, 428, 5, 55, 0, 0, 427, 425, 1, 0, 0, 0, 427, 428,
		1, 0, 0, 0, 428, 429, 1, 0, 0, 0, 429, 542, 3, 208, 104, 0, 430, 431, 5,
		50, 0, 0, 431, 434, 5, 130, 0, 0, 432, 433, 5, 77, 0, 0, 433, 435, 5, 55,
		0, 0, 434, 432, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0, 435, 436, 1, 0, 0, 0,
		436, 542, 3, 208, 104, 0, 437, 438, 5, 50, 0, 0, 438, 542, 3, 20, 10, 0,
		439, 441, 5, 66, 0, 0, 440, 442, 3, 20, 10, 0, 441, 440, 1, 0, 0, 0, 441,
		442, 1, 0, 0, 0, 442, 542, 1, 0, 0, 0, 443, 444, 5, 102, 0, 0, 444, 447,
		5, 80, 0, 0, 445, 446, 5, 77, 0, 0, 446, 448, 5, 55, 0, 0, 447, 445, 1,
		0, 0, 0, 447, 448, 1, 0, 0, 0, 448, 449, 1, 0, 0, 0, 449, 452, 3, 208,
		104, 0, 450, 451, 5, 79, 0, 0, 451, 453, 3, 20, 10, 0, 452, 450, 1, 0,
		0, 0, 452, 453, 1, 0, 0, 0, 453, 542, 1, 0, 0, 0, 454, 455, 5, 102, 0,
		0, 455, 458, 5, 130, 0, 0, 456, 457, 5, 77, 0, 0, 457, 459, 5, 55, 0, 0,
		458, 456, 1, 0, 0, 0, 458, 459, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460,
		463, 3, 208, 104, 0, 461, 462, 5, 79, 0, 0, 462, 464, 3, 20, 10, 0, 463,
		461, 1, 0, 0, 0, 463, 464, 1, 0, 0, 0, 464, 542, 1, 0, 0, 0, 465, 466,
		5, 108, 0, 0, 466, 469, 5, 26, 0, 0, 467, 468, 5, 77, 0, 0, 468, 470, 5,
		55, 0, 0, 469, 467, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 471, 1, 0, 0,
		0, 471, 472, 3, 208, 104, 0, 472, 473, 3, 80, 40, 0, 473, 542, 1, 0, 0,
		0, 474, 475, 5, 108, 0, 0, 475, 478, 5, 26, 0, 0, 476, 477, 5, 77, 0, 0,
		477, 479, 5, 55, 0, 0, 478, 476, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479,
		480, 1, 0, 0, 0, 480, 481, 3, 208, 104, 0, 481, 482, 5, 27, 0, 0, 482,
		483, 5, 197, 0, 0, 483, 542, 1, 0, 0, 0, 484, 485, 5, 108, 0, 0, 485, 488,
		5, 26, 0, 0, 486, 487, 5, 77, 0, 0, 487, 489, 5, 55, 0, 0, 488, 486, 1,
		0, 0, 0, 488, 489, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0, 490, 491, 3, 208,
		104, 0, 491, 492, 5, 134, 0, 0, 492, 493, 3, 18, 9, 0, 493, 542, 1, 0,
		0, 0, 494, 495, 5, 108, 0, 0, 495, 498, 5, 26, 0, 0, 496, 497, 5, 77, 0,
		0, 497, 499, 5, 55, 0, 0, 498, 496, 1, 0, 0, 0, 498, 499, 1, 0, 0, 0, 499,
		500, 1, 0, 0, 0, 500, 542, 3, 72, 36, 0, 501, 502, 5, 108, 0, 0, 502, 503,
		5, 121, 0, 0, 503, 504, 5, 18, 0, 0, 504, 542, 3, 198, 99, 0, 505, 506,
		5, 108, 0, 0, 506, 542, 3, 66, 33, 0, 507, 508, 5, 110, 0, 0, 508, 518,
		3, 20, 10, 0, 509, 510, 5, 166, 0, 0, 510, 511, 5, 47, 0, 0, 511, 519,
		5, 197, 0, 0, 512, 513, 5, 166, 0, 0, 513, 514, 5, 182, 0, 0, 514, 519,
		5, 197, 0, 0, 515, 516, 5, 166, 0, 0, 516, 517, 5, 158, 0, 0, 517, 519,
		3, 214, 107, 0, 518, 509, 1, 0, 0, 0, 518, 512, 1, 0, 0, 0, 518, 515, 1,
		0, 0, 0, 519, 542, 1, 0, 0, 0, 520, 521, 5, 134, 0, 0, 521, 542, 5, 172,
		0, 0, 522, 523, 5, 135, 0, 0, 523, 526, 5, 26, 0, 0, 524, 525, 5, 77, 0,
		0, 525, 527, 5, 55, 0, 0, 526, 524, 1, 0, 0, 0, 526, 527, 1, 0, 0, 0, 527,
		528, 1, 0, 0, 0, 528, 529, 3, 208, 104, 0, 529, 530, 5, 166, 0, 0, 530,
		531, 3, 208, 104, 0, 531, 542, 1, 0, 0, 0, 532, 533, 5, 136, 0, 0, 533,
		534, 3, 20, 10, 0, 534, 535, 5, 67, 0, 0, 535, 536, 3, 214, 107, 0, 536,
		542, 1, 0, 0, 0, 537, 538, 5, 176, 0, 0, 538, 539, 3, 14, 7, 0, 539, 540,
		3, 130, 65, 0, 540, 542, 1, 0, 0, 0, 541, 327, 1, 0, 0, 0, 541, 339, 1,
		0, 0, 0, 541, 351, 1, 0, 0, 0, 541, 363, 1, 0, 0, 0, 541, 369, 1, 0, 0,
		0, 541, 380, 1, 0, 0, 0, 541, 391, 1, 0, 0, 0, 541, 402, 1, 0, 0, 0, 541,
		411, 1, 0, 0, 0, 541, 414, 1, 0, 0, 0, 541, 416, 1, 0, 0, 0, 541, 423,
		1, 0, 0, 0, 541, 430, 1, 0, 0, 0, 541, 437, 1, 0, 0, 0, 541, 439, 1, 0,
		0, 0, 541, 443, 1, 0, 0, 0, 541, 454, 1, 0, 0, 0, 541, 465, 1, 0, 0, 0,
		541, 474, 1, 0, 0, 0, 541, 484, 1, 0, 0, 0, 541, 494, 1, 0, 0, 0, 541,
		501, 1, 0, 0, 0, 541, 505, 1, 0, 0, 0, 541, 507, 1, 0, 0, 0, 541, 520,
		1, 0, 0, 0, 541, 522, 1, 0, 0, 0, 541, 532, 1, 0, 0, 0, 541, 537, 1, 0,
		0, 0, 542, 13, 1, 0, 0, 0, 543, 548, 3, 16, 8, 0, 544, 545, 5, 203, 0,
		0, 545, 547, 3, 16, 8, 0, 546, 544, 1, 0, 0, 0, 547, 550, 1, 0, 0, 0, 548,
		546, 1, 0, 0, 0, 548, 549, 1, 0, 0, 0, 549, 15, 1, 0, 0, 0, 550, 548, 1,
		0, 0, 0, 551, 552, 3, 208, 104, 0, 552, 553, 5, 208, 0, 0, 553, 554, 3,
		198, 99, 0, 554, 17, 1, 0, 0, 0, 555, 556, 7, 0, 0, 0, 556, 19, 1, 0, 0,
		0, 557, 558, 5, 125, 0, 0, 558, 563, 3, 198, 99, 0, 559, 560, 5, 125, 0,
		0, 560, 561, 5, 76, 0, 0, 561, 563, 5, 197, 0, 0, 562, 557, 1, 0, 0, 0,
		562, 559, 1, 0, 0, 0, 563, 21, 1, 0, 0, 0, 564, 565, 5, 15, 0, 0, 565,
		566, 5, 46, 0, 0, 566, 568, 3, 214, 107, 0, 567, 569, 3, 48, 24, 0, 568,
		567, 1, 0, 0, 0, 568, 569, 1, 0, 0, 0, 569, 23, 1, 0, 0, 0, 570, 571, 5,
		21, 0, 0, 571, 572, 5, 158, 0, 0, 572, 574, 3, 214, 107, 0, 573, 575, 3,
		20, 10, 0, 574, 573, 1, 0, 0, 0, 574, 575, 1, 0, 0, 0, 575, 25, 1, 0, 0,
		0, 576, 577, 7, 1, 0, 0, 577, 581, 5, 33, 0, 0, 578, 579, 5, 77, 0, 0,
		579, 580, 5, 114, 0, 0, 580, 582, 5, 55, 0, 0, 581, 578, 1, 0, 0, 0, 581,
		582, 1, 0, 0, 0, 582, 583, 1, 0, 0, 0, 583, 585, 3, 220, 110, 0, 584, 586,
		3, 48, 24, 0, 585, 584, 1, 0, 0, 0, 585, 586, 1, 0, 0, 0, 586, 588, 1,
		0, 0, 0, 587, 589, 3, 68, 34, 0, 588, 587, 1, 0, 0, 0, 588, 589, 1, 0,
		0, 0, 589, 730, 1, 0, 0, 0, 590, 598, 5, 15, 0, 0, 591, 594, 5, 29, 0,
		0, 592, 593, 5, 120, 0, 0, 593, 595, 5, 136, 0, 0, 594, 592, 1, 0, 0, 0,
		594, 595, 1, 0, 0, 0, 595, 598, 1, 0, 0, 0, 596, 598, 5, 136, 0, 0, 597,
		590, 1, 0, 0, 0, 597, 591, 1, 0, 0, 0, 597, 596, 1, 0, 0, 0, 598, 599,
		1, 0, 0, 0, 599, 603, 5, 46, 0, 0, 600, 601, 5, 77, 0, 0, 601, 602, 5,
		114, 0, 0, 602, 604, 5, 55, 0, 0, 603, 600, 1, 0, 0, 0, 603, 604, 1, 0,
		0, 0, 604, 605, 1, 0, 0, 0, 605, 607, 3, 214, 107, 0, 606, 608, 3, 50,
		25, 0, 607, 606, 1, 0, 0, 0, 607, 608, 1, 0, 0, 0, 608, 610, 1, 0, 0, 0,
		609, 611, 3, 48, 24, 0, 610, 609, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611,
		612, 1, 0, 0, 0, 612, 613, 3, 28, 14, 0, 613, 614, 3, 32, 16, 0, 614, 730,
		1, 0, 0, 0, 615, 616, 7, 1, 0, 0, 616, 617, 5, 99, 0, 0, 617, 621, 5, 181,
		0, 0, 618, 619, 5, 77, 0, 0, 619, 620, 5, 114, 0, 0, 620, 622, 5, 55, 0,
		0, 621, 618, 1, 0, 0, 0, 621, 622, 1, 0, 0, 0, 622, 623, 1, 0, 0, 0, 623,
		625, 3, 214, 107, 0, 624, 626, 3, 50, 25, 0, 625, 624, 1, 0, 0, 0, 625,
		626, 1, 0, 0, 0, 626, 628, 1, 0, 0, 0, 627, 629, 3, 48, 24, 0, 628, 627,
		1, 0, 0, 0, 628, 629, 1, 0, 0, 0, 629, 635, 1, 0, 0, 0, 630, 631, 5, 188,
		0, 0, 631, 633, 5, 164, 0, 0, 632, 634, 5, 195, 0, 0, 633, 632, 1, 0, 0,
		0, 633, 634, 1, 0, 0, 0, 634, 636, 1, 0, 0, 0, 635, 630, 1, 0, 0, 0, 635,
		636, 1, 0, 0, 0, 636, 638, 1, 0, 0, 0, 637, 639, 3, 52, 26, 0, 638, 637,
		1, 0, 0, 0, 638, 639, 1, 0, 0, 0, 639, 641, 1, 0, 0, 0, 640, 642, 3, 56,
		28, 0, 641, 640, 1, 0, 0, 0, 641, 642, 1, 0, 0, 0, 642, 643, 1, 0, 0, 0,
		643, 644, 3, 54, 27, 0, 644, 730, 1, 0, 0, 0, 645, 646, 7, 1, 0, 0, 646,
		647, 5, 103, 0, 0, 647, 651, 5, 181, 0, 0, 648, 649, 5, 77, 0, 0, 649,
		650, 5, 114, 0, 0, 650, 652, 5, 55, 0, 0, 651, 648, 1, 0, 0, 0, 651, 652,
		1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653, 655, 3, 214, 107, 0, 654, 656, 3,
		50, 25, 0, 655, 654, 1, 0, 0, 0, 655, 656, 1, 0, 0, 0, 656, 658, 1, 0,
		0, 0, 657, 659, 3, 48, 24, 0, 658, 657, 1, 0, 0, 0, 658, 659, 1, 0, 0,
		0, 659, 661, 1, 0, 0, 0, 660, 662, 3, 56, 28, 0, 661, 660, 1, 0, 0, 0,
		661, 662, 1, 0, 0, 0, 662, 668, 1, 0, 0, 0, 663, 669, 3, 52, 26, 0, 664,
		666, 3, 58, 29, 0, 665, 667, 5, 126, 0, 0, 666, 665, 1, 0, 0, 0, 666, 667,
		1, 0, 0, 0, 667, 669, 1, 0, 0, 0, 668, 663, 1, 0, 0, 0, 668, 664, 1, 0,
		0, 0, 669, 670, 1, 0, 0, 0, 670, 671, 3, 54, 27, 0, 671, 730, 1, 0, 0,
		0, 672, 680, 5, 15, 0, 0, 673, 676, 5, 29, 0, 0, 674, 675, 5, 120, 0, 0,
		675, 677, 5, 136, 0, 0, 676, 674, 1, 0, 0, 0, 676, 677, 1, 0, 0, 0, 677,
		680, 1, 0, 0, 0, 678, 680, 5, 136, 0, 0, 679, 672, 1, 0, 0, 0, 679, 673,
		1, 0, 0, 0, 679, 678, 1, 0, 0, 0, 680, 682, 1, 0, 0, 0, 681, 683, 5, 160,
		0, 0, 682, 681, 1, 0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 684, 1, 0, 0, 0,
		684, 688, 5, 158, 0, 0, 685, 686, 5, 77, 0, 0, 686, 687, 5, 114, 0, 0,
		687, 689, 5, 55, 0, 0, 688, 685, 1, 0, 0, 0, 688, 689, 1, 0, 0, 0, 689,
		690, 1, 0, 0, 0, 690, 692, 3, 214, 107, 0, 691, 693, 3, 50, 25, 0, 692,
		691, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 695, 1, 0, 0, 0, 694, 696,
		3, 48, 24, 0, 695, 694, 1, 0, 0, 0, 695, 696, 1, 0, 0, 0, 696, 698, 1,
		0, 0, 0, 697, 699, 3, 56, 28, 0, 698, 697, 1, 0, 0, 0, 698, 699, 1, 0,
		0, 0, 699, 701, 1, 0, 0, 0, 700, 702, 3, 58, 29, 0, 701, 700, 1, 0, 0,
		0, 701, 702, 1, 0, 0, 0, 702, 704, 1, 0, 0, 0, 703, 705, 3, 54, 27, 0,
		704, 703, 1, 0, 0, 0, 704, 705, 1, 0, 0, 0, 705, 730, 1, 0, 0, 0, 706,
		709, 7, 1, 0, 0, 707, 708, 5, 120, 0, 0, 708, 710, 5, 136, 0, 0, 709, 707,
		1, 0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711, 715, 5, 181,
		0, 0, 712, 713, 5, 77, 0, 0, 713, 714, 5, 114, 0, 0, 714, 716, 5, 55, 0,
		0, 715, 712, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 717, 1, 0, 0, 0, 717,
		719, 3, 214, 107, 0, 718, 720, 3, 50, 25, 0, 719, 718, 1, 0, 0, 0, 719,
		720, 1, 0, 0, 0, 720, 722, 1, 0, 0, 0, 721, 723, 3, 48, 24, 0, 722, 721,
		1, 0, 0, 0, 722, 723, 1, 0, 0, 0, 723, 725, 1, 0, 0, 0, 724, 726, 3, 56,
		28, 0, 725, 724, 1, 0, 0, 0, 725, 726, 1, 0, 0, 0, 726, 727, 1, 0, 0, 0,
		727, 728, 3, 54, 27, 0, 728, 730, 1, 0, 0, 0, 729, 576, 1, 0, 0, 0, 729,
		597, 1, 0, 0, 0, 729, 615, 1, 0, 0, 0, 729, 645, 1, 0, 0, 0, 729, 679,
		1, 0, 0, 0, 729, 706, 1, 0, 0, 0, 730, 27, 1, 0, 0, 0, 731, 732, 5, 214,
		0, 0, 732, 737, 3, 30, 15, 0, 733, 734, 5, 203, 0, 0, 734, 736, 3, 30,
		15, 0, 735, 733, 1, 0, 0, 0, 736, 739, 1, 0, 0, 0, 737, 735, 1, 0, 0, 0,
		737, 738, 1, 0, 0, 0, 738, 740, 1, 0, 0, 0, 739, 737, 1, 0, 0, 0, 740,
		741, 5, 224, 0, 0, 741, 29, 1, 0, 0, 0, 742, 743, 6, 15, -1, 0, 743, 744,
		3, 236, 118, 0, 744, 766, 3, 192, 96, 0, 745, 746, 4, 15, 0, 1, 746, 747,
		5, 38, 0, 0, 747, 748, 3, 226, 113, 0, 748, 749, 6, 15, -1, 0, 749, 765,
		1, 0, 0, 0, 750, 751, 4, 15, 1, 1, 751, 752, 5, 57, 0, 0, 752, 753, 3,
		198, 99, 0, 753, 754, 6, 15, -1, 0, 754, 765, 1, 0, 0, 0, 755, 756, 4,
		15, 2, 1, 756, 757, 5, 74, 0, 0, 757, 765, 6, 15, -1, 0, 758, 759, 4, 15,
		3, 1, 759, 760, 5, 82, 0, 0, 760, 765, 6, 15, -1, 0, 761, 762, 4, 15, 4,
		1, 762, 763, 5, 88, 0, 0, 763, 765, 6, 15, -1, 0, 764, 745, 1, 0, 0, 0,
		764, 750, 1, 0, 0, 0, 764, 755, 1, 0, 0, 0, 764, 758, 1, 0, 0, 0, 764,
		761, 1, 0, 0, 0, 765, 768, 1, 0, 0, 0, 766, 764, 1, 0, 0, 0, 766, 767,
		1, 0, 0, 0, 767, 31, 1, 0, 0, 0, 768, 766, 1, 0, 0, 0, 769, 771, 6, 16,
		-1, 0, 770, 772, 3, 34, 17, 0, 771, 770, 1, 0, 0, 0, 771, 772, 1, 0, 0,
		0, 772, 795, 1, 0, 0, 0, 773, 774, 4, 16, 5, 1, 774, 775, 3, 38, 19, 0,
		775, 776, 6, 16, -1, 0, 776, 794, 1, 0, 0, 0, 777, 778, 4, 16, 6, 1, 778,
		779, 3, 40, 20, 0, 779, 780, 6, 16, -1, 0, 780, 794, 1, 0, 0, 0, 781, 782,
		4, 16, 7, 1, 782, 783, 3, 42, 21, 0, 783, 784, 6, 16, -1, 0, 784, 794,
		1, 0, 0, 0, 785, 786, 4, 16, 8, 1, 786, 787, 3, 44, 22, 0, 787, 788, 6,
		16, -1, 0, 788, 794, 1, 0, 0, 0, 789, 790, 4, 16, 9, 1, 790, 791, 3, 46,
		23, 0, 791, 792, 6, 16, -1, 0, 792, 794, 1, 0, 0, 0, 793, 773, 1, 0, 0,
		0, 793, 777, 1, 0, 0, 0, 793, 781, 1, 0, 0, 0, 793, 785, 1, 0, 0, 0, 793,
		789, 1, 0, 0, 0, 794, 797, 1, 0, 0, 0, 795, 793, 1, 0, 0, 0, 795, 796,
		1, 0, 0, 0, 796, 33, 1, 0, 0, 0, 797, 795, 1, 0, 0, 0, 798, 799, 5, 129,
		0, 0, 799, 800, 5, 90, 0, 0, 800, 801, 3, 194, 97, 0, 801, 35, 1, 0, 0,
		0, 802, 809, 3, 236, 118, 0, 803, 806, 3, 236, 118, 0, 804, 805, 5, 214,
		0, 0, 805, 807, 5, 224, 0, 0, 806, 804, 1, 0, 0, 0, 806, 807, 1, 0, 0,
		0, 807, 810, 1, 0, 0, 0, 808, 810, 3, 226, 113, 0, 809, 803, 1, 0, 0, 0,
		809, 808, 1, 0, 0, 0, 810, 37, 1, 0, 0, 0, 811, 812, 5, 151, 0, 0, 812,
		813, 5, 214, 0, 0, 813, 814, 3, 236, 118, 0, 814, 818, 5, 214, 0, 0, 815,
		817, 3, 36, 18, 0, 816, 815, 1, 0, 0, 0, 817, 820, 1, 0, 0, 0, 818, 816,
		1, 0, 0, 0, 818, 819, 1, 0, 0, 0, 819, 821, 1, 0, 0, 0, 820, 818, 1, 0,
		0, 0, 821, 822, 5, 224, 0, 0, 822, 823, 5, 224, 0, 0, 823, 39, 1, 0, 0,
		0, 824, 825, 5, 96, 0, 0, 825, 835, 5, 214, 0, 0, 826, 836, 5, 195, 0,
		0, 827, 828, 5, 106, 0, 0, 828, 829, 5, 195, 0, 0, 829, 830, 5, 104, 0,
		0, 830, 836, 5, 195, 0, 0, 831, 832, 5, 104, 0, 0, 832, 833, 5, 195, 0,
		0, 833, 834, 5, 106, 0, 0, 834, 836, 5, 195, 0, 0, 835, 826, 1, 0, 0, 0,
		835, 827, 1, 0, 0, 0, 835, 831, 1, 0, 0, 0, 836, 837, 1, 0, 0, 0, 837,
		838, 5, 224, 0, 0, 838, 41, 1, 0, 0, 0, 839, 840, 5, 93, 0, 0, 840, 841,
		5, 214, 0, 0, 841, 842, 3, 236, 118, 0, 842, 846, 5, 214, 0, 0, 843, 845,
		3, 36, 18, 0, 844, 843, 1, 0, 0, 0, 845, 848, 1, 0, 0, 0, 846, 844, 1,
		0, 0, 0, 846, 847, 1, 0, 0, 0, 847, 849, 1, 0, 0, 0, 848, 846, 1, 0, 0,
		0, 849, 850, 5, 224, 0, 0, 850, 851, 5, 224, 0, 0, 851, 43, 1, 0, 0, 0,
		852, 853, 5, 132, 0, 0, 853, 864, 5, 214, 0, 0, 854, 855, 5, 106, 0, 0,
		855, 856, 3, 236, 118, 0, 856, 857, 5, 104, 0, 0, 857, 858, 3, 236, 118,
		0, 858, 865, 1, 0, 0, 0, 859, 860, 5, 104, 0, 0, 860, 861, 3, 236, 118,
		0, 861, 862, 5, 106, 0, 0, 862, 863, 3, 236, 118, 0, 863, 865, 1, 0, 0,
		0, 864, 854, 1, 0, 0, 0, 864, 859, 1, 0, 0, 0, 865, 866, 1, 0, 0, 0, 866,
		867, 5, 224, 0, 0, 867, 45, 1, 0, 0, 0, 868, 869, 5, 149, 0, 0, 869, 870,
		5, 214, 0, 0, 870, 871, 3, 164, 82, 0, 871, 872, 5, 224, 0, 0, 872, 47,
		1, 0, 0, 0, 873, 874, 5, 118, 0, 0, 874, 877, 5, 23, 0, 0, 875, 878, 3,
		236, 118, 0, 876, 878, 5, 197, 0, 0, 877, 875, 1, 0, 0, 0, 877, 876, 1,
		0, 0, 0, 878, 49, 1, 0, 0, 0, 879, 880, 5, 179, 0, 0, 880, 881, 5, 197,
		0, 0, 881, 51, 1, 0, 0, 0, 882, 883, 5, 166, 0, 0, 883, 884, 3, 214, 107,
		0, 884, 53, 1, 0, 0, 0, 885, 886, 5, 10, 0, 0, 886, 887, 3, 112, 56, 0,
		887, 55, 1, 0, 0, 0, 888, 889, 5, 214, 0, 0, 889, 894, 3, 70, 35, 0, 890,
		891, 5, 203, 0, 0, 891, 893, 3, 70, 35, 0, 892, 890, 1, 0, 0, 0, 893, 896,
		1, 0, 0, 0, 894, 892, 1, 0, 0, 0, 894, 895, 1, 0, 0, 0, 895, 897, 1, 0,
		0, 0, 896, 894, 1, 0, 0, 0, 897, 898, 5, 224, 0, 0, 898, 904, 1, 0, 0,
		0, 899, 900, 5, 10, 0, 0, 900, 904, 3, 214, 107, 0, 901, 902, 5, 10, 0,
		0, 902, 904, 3, 212, 106, 0, 903, 888, 1, 0, 0, 0, 903, 899, 1, 0, 0, 0,
		903, 901, 1, 0, 0, 0, 904, 57, 1, 0, 0, 0, 905, 906, 6, 29, -1, 0, 906,
		933, 3, 68, 34, 0, 907, 908, 4, 29, 10, 1, 908, 909, 3, 136, 68, 0, 909,
		910, 6, 29, -1, 0, 910, 932, 1, 0, 0, 0, 911, 912, 4, 29, 11, 1, 912, 913,
		3, 60, 30, 0, 913, 914, 6, 29, -1, 0, 914, 932, 1, 0, 0, 0, 915, 916, 4,
		29, 12, 1, 916, 917, 3, 62, 31, 0, 917, 918, 6, 29, -1, 0, 918, 932, 1,
		0, 0, 0, 919, 920, 4, 29, 13, 1, 920, 921, 3, 64, 32, 0, 921, 922, 6, 29,
		-1, 0, 922, 932, 1, 0, 0, 0, 923, 924, 4, 29, 14, 1, 924, 925, 3, 66, 33,
		0, 925, 926, 6, 29, -1, 0, 926, 932, 1, 0, 0, 0, 927, 928, 4, 29, 15, 1,
		928, 929, 3, 144, 72, 0, 929, 930, 6, 29, -1, 0, 930, 932, 1, 0, 0, 0,
		931, 907, 1, 0, 0, 0, 931, 911, 1, 0, 0, 0, 931, 915, 1, 0, 0, 0, 931,
		919, 1, 0, 0, 0, 931, 923, 1, 0, 0, 0, 931, 927, 1, 0, 0, 0, 932, 935,
		1, 0, 0, 0, 933, 931, 1, 0, 0, 0, 933, 934, 1, 0, 0, 0, 934, 59, 1, 0,
		0, 0, 935, 933, 1, 0, 0, 0, 936, 937, 5, 125, 0, 0, 937, 938, 5, 18, 0,
		0, 938, 939, 3, 198, 99, 0, 939, 61, 1, 0, 0, 0, 940, 941, 5, 129, 0, 0,
		941, 942, 5, 90, 0, 0, 942, 943, 3, 198, 99, 0, 943, 63, 1, 0, 0, 0, 944,
		945, 5, 143, 0, 0, 945, 946, 5, 18, 0, 0, 946, 947, 3, 198, 99, 0, 947,
		65, 1, 0, 0, 0, 948, 949, 5, 172, 0, 0, 949, 954, 3, 84, 42, 0, 950, 951,
		5, 203, 0, 0, 951, 953, 3, 84, 42, 0, 952, 950, 1, 0, 0, 0, 953, 956, 1,
		0, 0, 0, 954, 952, 1, 0, 0, 0, 954, 955, 1, 0, 0, 0, 955, 67, 1, 0, 0,
		0, 956, 954, 1, 0, 0, 0, 957, 959, 5, 53, 0, 0, 958, 960, 5, 208, 0, 0,
		959, 958, 1, 0, 0, 0, 959, 960, 1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961,
		967, 3, 238, 119, 0, 962, 964, 5, 214, 0, 0, 963, 965, 3, 194, 97, 0, 964,
		963, 1, 0, 0, 0, 964, 965, 1, 0, 0, 0, 965, 966, 1, 0, 0, 0, 966, 968,
		5, 224, 0, 0, 967, 962, 1, 0, 0, 0, 967, 968, 1, 0, 0, 0, 968, 69, 1, 0,
		0, 0, 969, 980, 3, 72, 36, 0, 970, 971, 5, 28, 0, 0, 971, 972, 3, 236,
		118, 0, 972, 973, 5, 21, 0, 0, 973, 974, 3, 198, 99, 0, 974, 980, 1, 0,
		0, 0, 975, 976, 5, 80, 0, 0, 976, 980, 3, 76, 38, 0, 977, 978, 5, 130,
		0, 0, 978, 980, 3, 78, 39, 0, 979, 969, 1, 0, 0, 0, 979, 970, 1, 0, 0,
		0, 979, 975, 1, 0, 0, 0, 979, 977, 1, 0, 0, 0, 980, 71, 1, 0, 0, 0, 981,
		982, 3, 208, 104, 0, 982, 984, 3, 192, 96, 0, 983, 985, 3, 74, 37, 0, 984,
		983, 1, 0, 0, 0, 984, 985, 1, 0, 0, 0, 985, 988, 1, 0, 0, 0, 986, 987,
		5, 27, 0, 0, 987, 989, 5, 197, 0, 0, 988, 986, 1, 0, 0, 0, 988, 989, 1,
		0, 0, 0, 989, 991, 1, 0, 0, 0, 990, 992, 3, 80, 40, 0, 991, 990, 1, 0,
		0, 0, 991, 992, 1, 0, 0, 0, 992, 995, 1, 0, 0, 0, 993, 994, 5, 172, 0,
		0, 994, 996, 3, 198, 99, 0, 995, 993, 1, 0, 0, 0, 995, 996, 1, 0, 0, 0,
		996, 1014, 1, 0, 0, 0, 997, 999, 3, 208, 104, 0, 998, 1000, 3, 192, 96,
		0, 999, 998, 1, 0, 0, 0, 999, 1000, 1, 0, 0, 0, 1000, 1001, 1, 0, 0, 0,
		1001, 1004, 3, 74, 37, 0, 1002, 1003, 5, 27, 0, 0, 1003, 1005, 5, 197,
		0, 0, 1004, 1002, 1, 0, 0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 1007, 1, 0,
		0, 0, 1006, 1008, 3, 80, 40, 0, 1007, 1006, 1, 0, 0, 0, 1007, 1008, 1,
		0, 0, 0, 1008, 1011, 1, 0, 0, 0, 1009, 1010, 5, 172, 0, 0, 1010, 1012,
		3, 198, 99, 0, 1011, 1009, 1, 0, 0, 0, 1011, 1012, 1, 0, 0, 0, 1012, 1014,
		1, 0, 0, 0, 1013, 981, 1, 0, 0, 0, 1013, 997, 1, 0, 0, 0, 1014, 73, 1,
		0, 0, 0, 1015, 1016, 7, 2, 0, 0, 1016, 1017, 3, 198, 99, 0, 1017, 75, 1,
		0, 0, 0, 1018, 1019, 3, 208, 104, 0, 1019, 1020, 3, 198, 99, 0, 1020, 1021,
		5, 173, 0, 0, 1021, 1022, 3, 192, 96, 0, 1022, 1023, 5, 71, 0, 0, 1023,
		1024, 5, 195, 0, 0, 1024, 77, 1, 0, 0, 0, 1025, 1026, 3, 208, 104, 0, 1026,
		1027, 3, 110, 55, 0, 1027, 79, 1, 0, 0, 0, 1028, 1029, 5, 24, 0, 0, 1029,
		1030, 5, 214, 0, 0, 1030, 1035, 3, 82, 41, 0, 1031, 1032, 5, 203, 0, 0,
		1032, 1034, 3, 82, 41, 0, 1033, 1031, 1, 0, 0, 0, 1034, 1037, 1, 0, 0,
		0, 1035, 1033, 1, 0, 0, 0, 1035, 1036, 1, 0, 0, 0, 1036, 1038, 1, 0, 0,
		0, 1037, 1035, 1, 0, 0, 0, 1038, 1039, 5, 224, 0, 0, 1039, 81, 1, 0, 0,
		0, 1040, 1046, 3, 236, 118, 0, 1041, 1043, 5, 214, 0, 0, 1042, 1044, 3,
		194, 97, 0, 1043, 1042, 1, 0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1045,
		1, 0, 0, 0, 1045, 1047, 5, 224, 0, 0, 1046, 1041, 1, 0, 0, 0, 1046, 1047,
		1, 0, 0, 0, 1047, 83, 1, 0, 0, 0, 1048, 1056, 3, 198, 99, 0, 1049, 1057,
		5, 40, 0, 0, 1050, 1051, 5, 166, 0, 0, 1051, 1052, 5, 47, 0, 0, 1052, 1057,
		5, 197, 0, 0, 1053, 1054, 5, 166, 0, 0, 1054, 1055, 5, 182, 0, 0, 1055,
		1057, 5, 197, 0, 0, 1056, 1049, 1, 0, 0, 0, 1056, 1050, 1, 0, 0, 0, 1056,
		1053, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057, 85, 1, 0, 0, 0, 1058, 1060,
		7, 3, 0, 0, 1059, 1061, 5, 158, 0, 0, 1060, 1059, 1, 0, 0, 0, 1060, 1061,
		1, 0, 0, 0, 1061, 1062, 1, 0, 0, 0, 1062, 1063, 3, 210, 105, 0, 1063, 87,
		1, 0, 0, 0, 1064, 1065, 7, 4, 0, 0, 1065, 1068, 5, 33, 0, 0, 1066, 1067,
		5, 77, 0, 0, 1067, 1069, 5, 55, 0, 0, 1068, 1066, 1, 0, 0, 0, 1068, 1069,
		1, 0, 0, 0, 1069, 1070, 1, 0, 0, 0, 1070, 1072, 3, 220, 110, 0, 1071, 1073,
		3, 48, 24, 0, 1072, 1071, 1, 0, 0, 0, 1072, 1073, 1, 0, 0, 0, 1073, 1096,
		1, 0, 0, 0, 1074, 1081, 7, 4, 0, 0, 1075, 1082, 5, 46, 0, 0, 1076, 1078,
		5, 160, 0, 0, 1077, 1076, 1, 0, 0, 0, 1077, 1078, 1, 0, 0, 0, 1078, 1079,
		1, 0, 0, 0, 1079, 1082, 5, 158, 0, 0, 1080, 1082, 5, 181, 0, 0, 1081, 1075,
		1, 0, 0, 0, 1081, 1077, 1, 0, 0, 0, 1081, 1080, 1, 0, 0, 0, 1082, 1085,
		1, 0, 0, 0, 1083, 1084, 5, 77, 0, 0, 1084, 1086, 5, 55, 0, 0, 1085, 1083,
		1, 0, 0, 0, 1085, 1086, 1, 0, 0, 0, 1086, 1087, 1, 0, 0, 0, 1087, 1089,
		3, 214, 107, 0, 1088, 1090, 3, 48, 24, 0, 1089, 1088, 1, 0, 0, 0, 1089,
		1090, 1, 0, 0, 0, 1090, 1093, 1, 0, 0, 0, 1091, 1092, 5, 113, 0, 0, 1092,
		1094, 5, 39, 0, 0, 1093, 1091, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094,
		1096, 1, 0, 0, 0, 1095, 1064, 1, 0, 0, 0, 1095, 1074, 1, 0, 0, 0, 1096,
		89, 1, 0, 0, 0, 1097, 1098, 5, 55, 0, 0, 1098, 1099, 5, 33, 0, 0, 1099,
		1111, 3, 220, 110, 0, 1100, 1107, 5, 55, 0, 0, 1101, 1108, 5, 46, 0, 0,
		1102, 1104, 5, 160, 0, 0, 1103, 1102, 1, 0, 0, 0, 1103, 1104, 1, 0, 0,
		0, 1104, 1105, 1, 0, 0, 0, 1105, 1108, 5, 158, 0, 0, 1106, 1108, 5, 181,
		0, 0, 1107, 1101, 1, 0, 0, 0, 1107, 1103, 1, 0, 0, 0, 1107, 1106, 1, 0,
		0, 0, 1107, 1108, 1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109, 1111, 3, 214,
		107, 0, 1110, 1097, 1, 0, 0, 0, 1110, 1100, 1, 0, 0, 0, 1111, 91, 1, 0,
		0, 0, 1112, 1113, 5, 56, 0, 0, 1113, 1114, 5, 13, 0, 0, 1114, 1119, 3,
		2, 1, 0, 1115, 1116, 5, 56, 0, 0, 1116, 1117, 5, 156, 0, 0, 1117, 1119,
		3, 2, 1, 0, 1118, 1112, 1, 0, 0, 0, 1118, 1115, 1, 0, 0, 0, 1119, 93, 1,
		0, 0, 0, 1120, 1121, 5, 84, 0, 0, 1121, 1123, 5, 86, 0, 0, 1122, 1124,
		5, 158, 0, 0, 1123, 1122, 1, 0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124, 1128,
		1, 0, 0, 0, 1125, 1129, 3, 214, 107, 0, 1126, 1127, 5, 69, 0, 0, 1127,
		1129, 3, 212, 106, 0, 1128, 1125, 1, 0, 0, 0, 1128, 1126, 1, 0, 0, 0, 1129,
		1131, 1, 0, 0, 0, 1130, 1132, 3, 96, 48, 0, 1131, 1130, 1, 0, 0, 0, 1131,
		1132, 1, 0, 0, 0, 1132, 1133, 1, 0, 0, 0, 1133, 1134, 3, 98, 49, 0, 1134,
		95, 1, 0, 0, 0, 1135, 1136, 5, 214, 0, 0, 1136, 1141, 3, 208, 104, 0, 1137,
		1138, 5, 203, 0, 0, 1138, 1140, 3, 208, 104, 0, 1139, 1137, 1, 0, 0, 0,
		1140, 1143, 1, 0, 0, 0, 1141, 1139, 1, 0, 0, 0, 1141, 1142, 1, 0, 0, 0,
		1142, 1144, 1, 0, 0, 0, 1143, 1141, 1, 0, 0, 0, 1144, 1145, 5, 224, 0,
		0, 1145, 97, 1, 0, 0, 0, 1146, 1147, 5, 65, 0, 0, 1147, 1164, 3, 236, 118,
		0, 1148, 1149, 5, 180, 0, 0, 1149, 1154, 3, 100, 50, 0, 1150, 1151, 5,
		203, 0, 0, 1151, 1153, 3, 100, 50, 0, 1152, 1150, 1, 0, 0, 0, 1153, 1156,
		1, 0, 0, 0, 1154, 1152, 1, 0, 0, 0, 1154, 1155, 1, 0, 0, 0, 1155, 1164,
		1, 0, 0, 0, 1156, 1154, 1, 0, 0, 0, 1157, 1159, 3, 112, 56, 0, 1158, 1160,
		5, 225, 0, 0, 1159, 1158, 1, 0, 0, 0, 1159, 1160, 1, 0, 0, 0, 1160, 1161,
		1, 0, 0, 0, 1161, 1162, 5, 0, 0, 1, 1162, 1164, 1, 0, 0, 0, 1163, 1146,
		1, 0, 0, 0, 1163, 1148, 1, 0, 0, 0, 1163, 1157, 1, 0, 0, 0, 1164, 99, 1,
		0, 0, 0, 1165, 1166, 5, 214, 0, 0, 1166, 1171, 3, 102, 51, 0, 1167, 1168,
		5, 203, 0, 0, 1168, 1170, 3, 102, 51, 0, 1169, 1167, 1, 0, 0, 0, 1170,
		1173, 1, 0, 0, 0, 1171, 1169, 1, 0, 0, 0, 1171, 1172, 1, 0, 0, 0, 1172,
		1174, 1, 0, 0, 0, 1173, 1171, 1, 0, 0, 0, 1174, 1175, 5, 224, 0, 0, 1175,
		1179, 1, 0, 0, 0, 1176, 1177, 5, 214, 0, 0, 1177, 1179, 5, 224, 0, 0, 1178,
		1165, 1, 0, 0, 0, 1178, 1176, 1, 0, 0, 0, 1179, 101, 1, 0, 0, 0, 1180,
		1181, 3, 226, 113, 0, 1181, 103, 1, 0, 0, 0, 1182, 1183, 5, 91, 0, 0, 1183,
		1185, 5, 111, 0, 0, 1184, 1186, 3, 48, 24, 0, 1185, 1184, 1, 0, 0, 0, 1185,
		1186, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187, 1189, 3, 130, 65, 0, 1188,
		1190, 7, 5, 0, 0, 1189, 1188, 1, 0, 0, 0, 1189, 1190, 1, 0, 0, 0, 1190,
		105, 1, 0, 0, 0, 1191, 1192, 5, 119, 0, 0, 1192, 1193, 5, 158, 0, 0, 1193,
		1195, 3, 214, 107, 0, 1194, 1196, 3, 48, 24, 0, 1195, 1194, 1, 0, 0, 0,
		1195, 1196, 1, 0, 0, 0, 1196, 1198, 1, 0, 0, 0, 1197, 1199, 3, 20, 10,
		0, 1198, 1197, 1, 0, 0, 0, 1198, 1199, 1, 0, 0, 0, 1199, 1201, 1, 0, 0,
		0, 1200, 1202, 5, 60, 0, 0, 1201, 1200, 1, 0, 0, 0, 1201, 1202, 1, 0, 0,
		0, 1202, 1204, 1, 0, 0, 0, 1203, 1205, 5, 37, 0, 0, 1204, 1203, 1, 0, 0,
		0, 1204, 1205, 1, 0, 0, 0, 1205, 107, 1, 0, 0, 0, 1206, 1207, 5, 135, 0,
		0, 1207, 1208, 5, 158, 0, 0, 1208, 1209, 3, 214, 107, 0, 1209, 1210, 5,
		166, 0, 0, 1210, 1218, 3, 214, 107, 0, 1211, 1212, 5, 203, 0, 0, 1212,
		1213, 3, 214, 107, 0, 1213, 1214, 5, 166, 0, 0, 1214, 1215, 3, 214, 107,
		0, 1215, 1217, 1, 0, 0, 0, 1216, 1211, 1, 0, 0, 0, 1217, 1220, 1, 0, 0,
		0, 1218, 1216, 1, 0, 0, 0, 1218, 1219, 1, 0, 0, 0, 1219, 1222, 1, 0, 0,
		0, 1220, 1218, 1, 0, 0, 0, 1221, 1223, 3, 48, 24, 0, 1222, 1221, 1, 0,
		0, 0, 1222, 1223, 1, 0, 0, 0, 1223, 109, 1, 0, 0, 0, 1224, 1226, 5, 214,
		0, 0, 1225, 1227, 3, 118, 59, 0, 1226, 1225, 1, 0, 0, 0, 1226, 1227, 1,
		0, 0, 0, 1227, 1228, 1, 0, 0, 0, 1228, 1229, 5, 145, 0, 0, 1229, 1231,
		3, 194, 97, 0, 1230, 1232, 3, 132, 66, 0, 1231, 1230, 1, 0, 0, 0, 1231,
		1232, 1, 0, 0, 0, 1232, 1234, 1, 0, 0, 0, 1233, 1235, 3, 138, 69, 0, 1234,
		1233, 1, 0, 0, 0, 1234, 1235, 1, 0, 0, 0, 1235, 1236, 1, 0, 0, 0, 1236,
		1237, 5, 224, 0, 0, 1237, 111, 1, 0, 0, 0, 1238, 1244, 3, 114, 57, 0, 1239,
		1240, 5, 175, 0, 0, 1240, 1241, 5, 4, 0, 0, 1241, 1243, 3, 114, 57, 0,
		1242, 1239, 1, 0, 0, 0, 1243, 1246, 1, 0, 0, 0, 1244, 1242, 1, 0, 0, 0,
		1244, 1245, 1, 0, 0, 0, 1245, 113, 1, 0, 0, 0, 1246, 1244, 1, 0, 0, 0,
		1247, 1253, 3, 116, 58, 0, 1248, 1249, 5, 214, 0, 0, 1249, 1250, 3, 112,
		56, 0, 1250, 1251, 5, 224, 0, 0, 1251, 1253, 1, 0, 0, 0, 1252, 1247, 1,
		0, 0, 0, 1252, 1248, 1, 0, 0, 0, 1253, 115, 1, 0, 0, 0, 1254, 1256, 3,
		118, 59, 0, 1255, 1254, 1, 0, 0, 0, 1255, 1256, 1, 0, 0, 0, 1256, 1257,
		1, 0, 0, 0, 1257, 1259, 5, 145, 0, 0, 1258, 1260, 5, 48, 0, 0, 1259, 1258,
		1, 0, 0, 0, 1259, 1260, 1, 0, 0, 0, 1260, 1262, 1, 0, 0, 0, 1261, 1263,
		3, 120, 60, 0, 1262, 1261, 1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1264,
		1, 0, 0, 0, 1264, 1266, 3, 194, 97, 0, 1265, 1267, 3, 122, 61, 0, 1266,
		1265, 1, 0, 0, 0, 1266, 1267, 1, 0, 0, 0, 1267, 1269, 1, 0, 0, 0, 1268,
		1270, 3, 124, 62, 0, 1269, 1268, 1, 0, 0, 0, 1269, 1270, 1, 0, 0, 0, 1270,
		1272, 1, 0, 0, 0, 1271, 1273, 3, 126, 63, 0, 1272, 1271, 1, 0, 0, 0, 1272,
		1273, 1, 0, 0, 0, 1273, 1275, 1, 0, 0, 0, 1274, 1276, 3, 128, 64, 0, 1275,
		1274, 1, 0, 0, 0, 1275, 1276, 1, 0, 0, 0, 1276, 1278, 1, 0, 0, 0, 1277,
		1279, 3, 130, 65, 0, 1278, 1277, 1, 0, 0, 0, 1278, 1279, 1, 0, 0, 0, 1279,
		1281, 1, 0, 0, 0, 1280, 1282, 3, 132, 66, 0, 1281, 1280, 1, 0, 0, 0, 1281,
		1282, 1, 0, 0, 0, 1282, 1285, 1, 0, 0, 0, 1283, 1284, 5, 188, 0, 0, 1284,
		1286, 7, 6, 0, 0, 1285, 1283, 1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286,
		1289, 1, 0, 0, 0, 1287, 1288, 5, 188, 0, 0, 1288, 1290, 5, 168, 0, 0, 1289,
		1287, 1, 0, 0, 0, 1289, 1290, 1, 0, 0, 0, 1290, 1292, 1, 0, 0, 0, 1291,
		1293, 3, 134, 67, 0, 1292, 1291, 1, 0, 0, 0, 1292, 1293, 1, 0, 0, 0, 1293,
		1295, 1, 0, 0, 0, 1294, 1296, 3, 136, 68, 0, 1295, 1294, 1, 0, 0, 0, 1295,
		1296, 1, 0, 0, 0, 1296, 1298, 1, 0, 0, 0, 1297, 1299, 3, 140, 70, 0, 1298,
		1297, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1301, 1, 0, 0, 0, 1300,
		1302, 3, 142, 71, 0, 1301, 1300, 1, 0, 0, 0, 1301, 1302, 1, 0, 0, 0, 1302,
		1304, 1, 0, 0, 0, 1303, 1305, 3, 144, 72, 0, 1304, 1303, 1, 0, 0, 0, 1304,
		1305, 1, 0, 0, 0, 1305, 117, 1, 0, 0, 0, 1306, 1307, 5, 188, 0, 0, 1307,
		1308, 3, 194, 97, 0, 1308, 119, 1, 0, 0, 0, 1309, 1310, 5, 167, 0, 0, 1310,
		1313, 5, 195, 0, 0, 1311, 1312, 5, 188, 0, 0, 1312, 1314, 5, 163, 0, 0,
		1313, 1311, 1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 121, 1, 0, 0, 0,
		1315, 1316, 5, 67, 0, 0, 1316, 1317, 3, 146, 73, 0, 1317, 123, 1, 0, 0,
		0, 1318, 1320, 7, 7, 0, 0, 1319, 1318, 1, 0, 0, 0, 1319, 1320, 1, 0, 0,
		0, 1320, 1321, 1, 0, 0, 0, 1321, 1322, 5, 9, 0, 0, 1322, 1323, 5, 89, 0,
		0, 1323, 1324, 3, 194, 97, 0, 1324, 125, 1, 0, 0, 0, 1325, 1326, 5, 187,
		0, 0, 1326, 1327, 3, 236, 118, 0, 1327, 1328, 5, 10, 0, 0, 1328, 1329,
		5, 214, 0, 0, 1329, 1330, 3, 168, 84, 0, 1330, 1331, 5, 224, 0, 0, 1331,
		127, 1, 0, 0, 0, 1332, 1333, 5, 128, 0, 0, 1333, 1334, 3, 198, 99, 0, 1334,
		129, 1, 0, 0, 0, 1335, 1336, 5, 186, 0, 0, 1336, 1337, 3, 198, 99, 0, 1337,
		131, 1, 0, 0, 0, 1338, 1339, 5, 72, 0, 0, 1339, 1346, 5, 18, 0, 0, 1340,
		1341, 7, 6, 0, 0, 1341, 1342, 5, 214, 0, 0, 1342, 1343, 3, 194, 97, 0,
		1343, 1344, 5, 224, 0, 0, 1344, 1347, 1, 0, 0, 0, 1345, 1347, 3, 194, 97,
		0, 1346, 1340, 1, 0, 0, 0, 1346, 1345, 1, 0, 0, 0, 1347, 133, 1, 0, 0,
		0, 1348, 1349, 5, 73, 0, 0, 1349, 1350, 3, 198, 99, 0, 1350, 135, 1, 0,
		0, 0, 1351, 1352, 5, 121, 0, 0, 1352, 1353, 5, 18, 0, 0, 1353, 1354, 3,
		158, 79, 0, 1354, 137, 1, 0, 0, 0, 1355, 1356, 5, 121, 0, 0, 1356, 1357,
		5, 18, 0, 0, 1357, 1358, 3, 194, 97, 0, 1358, 139, 1, 0, 0, 0, 1359, 1360,
		5, 98, 0, 0, 1360, 1361, 3, 156, 78, 0, 1361, 1362, 5, 18, 0, 0, 1362,
		1363, 3, 194, 97, 0, 1363, 141, 1, 0, 0, 0, 1364, 1365, 5, 98, 0, 0, 1365,
		1368, 3, 156, 78, 0, 1366, 1367, 5, 188, 0, 0, 1367, 1369, 5, 163, 0, 0,
		1368, 1366, 1, 0, 0, 0, 1368, 1369, 1, 0, 0, 0, 1369, 143, 1, 0, 0, 0,
		1370, 1371, 5, 149, 0, 0, 1371, 1372, 3, 164, 82, 0, 1372, 145, 1, 0, 0,
		0, 1373, 1374, 6, 73, -1, 0, 1374, 1376, 3, 210, 105, 0, 1375, 1377, 5,
		60, 0, 0, 1376, 1375, 1, 0, 0, 0, 1376, 1377, 1, 0, 0, 0, 1377, 1379, 1,
		0, 0, 0, 1378, 1380, 3, 154, 77, 0, 1379, 1378, 1, 0, 0, 0, 1379, 1380,
		1, 0, 0, 0, 1380, 1386, 1, 0, 0, 0, 1381, 1382, 5, 214, 0, 0, 1382, 1383,
		3, 146, 73, 0, 1383, 1384, 5, 224, 0, 0, 1384, 1386, 1, 0, 0, 0, 1385,
		1373, 1, 0, 0, 0, 1385, 1381, 1, 0, 0, 0, 1386, 1404, 1, 0, 0, 0, 1387,
		1388, 10, 3, 0, 0, 1388, 1389, 3, 150, 75, 0, 1389, 1390, 3, 146, 73, 4,
		1390, 1403, 1, 0, 0, 0, 1391, 1393, 10, 4, 0, 0, 1392, 1394, 7, 8, 0, 0,
		1393, 1392, 1, 0, 0, 0, 1393, 1394, 1, 0, 0, 0, 1394, 1396, 1, 0, 0, 0,
		1395, 1397, 3, 148, 74, 0, 1396, 1395, 1, 0, 0, 0, 1396, 1397, 1, 0, 0,
		0, 1397, 1398, 1, 0, 0, 0, 1398, 1399, 5, 89, 0, 0, 1399, 1400, 3, 146,
		73, 0, 1400, 1401, 3, 152, 76, 0, 1401, 1403, 1, 0, 0, 0, 1402, 1387, 1,
		0, 0, 0, 1402, 1391, 1, 0, 0, 0, 1403, 1406, 1, 0, 0, 0, 1404, 1402, 1,
		0, 0, 0, 1404, 1405, 1, 0, 0, 0, 1405, 147, 1, 0, 0, 0, 1406, 1404, 1,
		0, 0, 0, 1407, 1409, 7, 9, 0, 0, 1408, 1407, 1, 0, 0, 0, 1408, 1409, 1,
		0, 0, 0, 1409, 1410, 1, 0, 0, 0, 1410, 1417, 5, 83, 0, 0, 1411, 1413, 5,
		83, 0, 0, 1412, 1414, 7, 9, 0, 0, 1413, 1412, 1, 0, 0, 0, 1413, 1414, 1,
		0, 0, 0, 1414, 1417, 1, 0, 0, 0, 1415, 1417, 7, 9, 0, 0, 1416, 1408, 1,
		0, 0, 0, 1416, 1411, 1, 0, 0, 0, 1416, 1415, 1, 0, 0, 0, 1417, 1451, 1,
		0, 0, 0, 1418, 1420, 7, 10, 0, 0, 1419, 1418, 1, 0, 0, 0, 1419, 1420, 1,
		0, 0, 0, 1420, 1421, 1, 0, 0, 0, 1421, 1423, 7, 11, 0, 0, 1422, 1424, 5,
		122, 0, 0, 1423, 1422, 1, 0, 0, 0, 1423, 1424, 1, 0, 0, 0, 1424, 1433,
		1, 0, 0, 0, 1425, 1427, 7, 11, 0, 0, 1426, 1428, 5, 122, 0, 0, 1427, 1426,
		1, 0, 0, 0, 1427, 1428, 1, 0, 0, 0, 1428, 1430, 1, 0, 0, 0, 1429, 1431,
		7, 10, 0, 0, 1430, 1429, 1, 0, 0, 0, 1430, 1431, 1, 0, 0, 0, 1431, 1433,
		1, 0, 0, 0, 1432, 1419, 1, 0, 0, 0, 1432, 1425, 1, 0, 0, 0, 1433, 1451,
		1, 0, 0, 0, 1434, 1436, 7, 12, 0, 0, 1435, 1434, 1, 0, 0, 0, 1435, 1436,
		1, 0, 0, 0, 1436, 1437, 1, 0, 0, 0, 1437, 1439, 5, 68, 0, 0, 1438, 1440,
		5, 122, 0, 0, 1439, 1438, 1, 0, 0, 0, 1439, 1440, 1, 0, 0, 0, 1440, 1449,
		1, 0, 0, 0, 1441, 1443, 5, 68, 0, 0, 1442, 1444, 5, 122, 0, 0, 1443, 1442,
		1, 0, 0, 0, 1443, 1444, 1, 0, 0, 0, 1444, 1446, 1, 0, 0, 0, 1445, 1447,
		7, 12, 0, 0, 1446, 1445, 1, 0, 0, 0, 1446, 1447, 1, 0, 0, 0, 1447, 1449,
		1, 0, 0, 0, 1448, 1435, 1, 0, 0, 0, 1448, 1441, 1, 0, 0, 0, 1449, 1451,
		1, 0, 0, 0, 1450, 1416, 1, 0, 0, 0, 1450, 1432, 1, 0, 0, 0, 1450, 1448,
		1, 0, 0, 0, 1451, 149, 1, 0, 0, 0, 1452, 1454, 7, 8, 0, 0, 1453, 1452,
		1, 0, 0, 0, 1453, 1454, 1, 0, 0, 0, 1454, 1455, 1, 0, 0, 0, 1455, 1456,
		5, 30, 0, 0, 1456, 1459, 5, 89, 0, 0, 1457, 1459, 5, 203, 0, 0, 1458, 1453,
		1, 0, 0, 0, 1458, 1457, 1, 0, 0, 0, 1459, 151, 1, 0, 0, 0, 1460, 1461,
		5, 118, 0, 0, 1461, 1470, 3, 194, 97, 0, 1462, 1463, 5, 178, 0, 0, 1463,
		1464, 5, 214, 0, 0, 1464, 1465, 3, 194, 97, 0, 1465, 1466, 5, 224, 0, 0,
		1466, 1470, 1, 0, 0, 0, 1467, 1468, 5, 178, 0, 0, 1468, 1470, 3, 194, 97,
		0, 1469, 1460, 1, 0, 0, 0, 1469, 1462, 1, 0, 0, 0, 1469, 1467, 1, 0, 0,
		0, 1470, 153, 1, 0, 0, 0, 1471, 1472, 5, 143, 0, 0, 1472, 1475, 3, 162,
		81, 0, 1473, 1474, 5, 117, 0, 0, 1474, 1476, 3, 162, 81, 0, 1475, 1473,
		1, 0, 0, 0, 1475, 1476, 1, 0, 0, 0, 1476, 155, 1, 0, 0, 0, 1477, 1480,
		3, 198, 99, 0, 1478, 1479, 7, 13, 0, 0, 1479, 1481, 3, 198, 99, 0, 1480,
		1478, 1, 0, 0, 0, 1480, 1481, 1, 0, 0, 0, 1481, 157, 1, 0, 0, 0, 1482,
		1487, 3, 160, 80, 0, 1483, 1484, 5, 203, 0, 0, 1484, 1486, 3, 160, 80,
		0, 1485, 1483, 1, 0, 0, 0, 1486, 1489, 1, 0, 0, 0, 1487, 1485, 1, 0, 0,
		0, 1487, 1488, 1, 0, 0, 0, 1488, 159, 1, 0, 0, 0, 1489, 1487, 1, 0, 0,
		0, 1490, 1492, 3, 198, 99, 0, 1491, 1493, 7, 14, 0, 0, 1492, 1491, 1, 0,
		0, 0, 1492, 1493, 1, 0, 0, 0, 1493, 1496, 1, 0, 0, 0, 1494, 1495, 5, 116,
		0, 0, 1495, 1497, 7, 15, 0, 0, 1496, 1494, 1, 0, 0, 0, 1496, 1497, 1, 0,
		0, 0, 1497, 1500, 1, 0, 0, 0, 1498, 1499, 5, 25, 0, 0, 1499, 1501, 5, 197,
		0, 0, 1500, 1498, 1, 0, 0, 0, 1500, 1501, 1, 0, 0, 0, 1501, 161, 1, 0,
		0, 0, 1502, 1505, 3, 224, 112, 0, 1503, 1504, 5, 226, 0, 0, 1504, 1506,
		3, 224, 112, 0, 1505, 1503, 1, 0, 0, 0, 1505, 1506, 1, 0, 0, 0, 1506, 163,
		1, 0, 0, 0, 1507, 1512, 3, 166, 83, 0, 1508, 1509, 5, 203, 0, 0, 1509,
		1511, 3, 166, 83, 0, 1510, 1508, 1, 0, 0, 0, 1511, 1514, 1, 0, 0, 0, 1512,
		1510, 1, 0, 0, 0, 1512, 1513, 1, 0, 0, 0, 1513, 165, 1, 0, 0, 0, 1514,
		1512, 1, 0, 0, 0, 1515, 1516, 3, 236, 118, 0, 1516, 1517, 5, 208, 0, 0,
		1517, 1518, 3, 226, 113, 0, 1518, 167, 1, 0, 0, 0, 1519, 1521, 3, 170,
		85, 0, 1520, 1519, 1, 0, 0, 0, 1520, 1521, 1, 0, 0, 0, 1521, 1523, 1, 0,
		0, 0, 1522, 1524, 3, 172, 86, 0, 1523, 1522, 1, 0, 0, 0, 1523, 1524, 1,
		0, 0, 0, 1524, 1526, 1, 0, 0, 0, 1525, 1527, 3, 174, 87, 0, 1526, 1525,
		1, 0, 0, 0, 1526, 1527, 1, 0, 0, 0, 1527, 169, 1, 0, 0, 0, 1528, 1529,
		5, 125, 0, 0, 1529, 1530, 5, 18, 0, 0, 1530, 1531, 3, 194, 97, 0, 1531,
		171, 1, 0, 0, 0, 1532, 1533, 5, 121, 0, 0, 1533, 1534, 5, 18, 0, 0, 1534,
		1535, 3, 158, 79, 0, 1535, 173, 1, 0, 0, 0, 1536, 1537, 7, 16, 0, 0, 1537,
		1538, 3, 176, 88, 0, 1538, 175, 1, 0, 0, 0, 1539, 1546, 3, 178, 89, 0,
		1540, 1541, 5, 16, 0, 0, 1541, 1542, 3, 178, 89, 0, 1542, 1543, 5, 6, 0,
		0, 1543, 1544, 3, 178, 89, 0, 1544, 1546, 1, 0, 0, 0, 1545, 1539, 1, 0,
		0, 0, 1545, 1540, 1, 0, 0, 0, 1546, 177, 1, 0, 0, 0, 1547, 1548, 5, 32,
		0, 0, 1548, 1560, 5, 141, 0, 0, 1549, 1550, 5, 174, 0, 0, 1550, 1560, 5,
		127, 0, 0, 1551, 1552, 5, 174, 0, 0, 1552, 1560, 5, 63, 0, 0, 1553, 1554,
		3, 224, 112, 0, 1554, 1555, 5, 127, 0, 0, 1555, 1560, 1, 0, 0, 0, 1556,
		1557, 3, 224, 112, 0, 1557, 1558, 5, 63, 0, 0, 1558, 1560, 1, 0, 0, 0,
		1559, 1547, 1, 0, 0, 0, 1559, 1549, 1, 0, 0, 0, 1559, 1551, 1, 0, 0, 0,
		1559, 1553, 1, 0, 0, 0, 1559, 1556, 1, 0, 0, 0, 1560, 179, 1, 0, 0, 0,
		1561, 1562, 5, 148, 0, 0, 1562, 1563, 3, 164, 82, 0, 1563, 181, 1, 0, 0,
		0, 1564, 1565, 5, 150, 0, 0, 1565, 1566, 5, 29, 0, 0, 1566, 1567, 5, 33,
		0, 0, 1567, 1607, 3, 220, 110, 0, 1568, 1569, 5, 150, 0, 0, 1569, 1570,
		5, 29, 0, 0, 1570, 1571, 5, 46, 0, 0, 1571, 1607, 3, 214, 107, 0, 1572,
		1573, 5, 150, 0, 0, 1573, 1575, 5, 29, 0, 0, 1574, 1576, 5, 160, 0, 0,
		1575, 1574, 1, 0, 0, 0, 1575, 1576, 1, 0, 0, 0, 1576, 1578, 1, 0, 0, 0,
		1577, 1579, 5, 158, 0, 0, 1578, 1577, 1, 0, 0, 0, 1578, 1579, 1, 0, 0,
		0, 1579, 1580, 1, 0, 0, 0, 1580, 1607, 3, 214, 107, 0, 1581, 1582, 5, 150,
		0, 0, 1582, 1607, 5, 34, 0, 0, 1583, 1584, 5, 150, 0, 0, 1584, 1587, 5,
		45, 0, 0, 1585, 1586, 5, 67, 0, 0, 1586, 1588, 3, 220, 110, 0, 1587, 1585,
		1, 0, 0, 0, 1587, 1588, 1, 0, 0, 0, 1588, 1607, 1, 0, 0, 0, 1589, 1591,
		5, 150, 0, 0, 1590, 1592, 5, 160, 0, 0, 1591, 1590, 1, 0, 0, 0, 1591, 1592,
		1, 0, 0, 0, 1592, 1593, 1, 0, 0, 0, 1593, 1596, 5, 159, 0, 0, 1594, 1595,
		7, 17, 0, 0, 1595, 1597, 3, 220, 110, 0, 1596, 1594, 1, 0, 0, 0, 1596,
		1597, 1, 0, 0, 0, 1597, 1601, 1, 0, 0, 0, 1598, 1599, 5, 97, 0, 0, 1599,
		1602, 5, 197, 0, 0, 1600, 1602, 3, 130, 65, 0, 1601, 1598, 1, 0, 0, 0,
		1601, 1600, 1, 0, 0, 0, 1601, 1602, 1, 0, 0, 0, 1602, 1604, 1, 0, 0, 0,
		1603, 1605, 3, 142, 71, 0, 1604, 1603, 1, 0, 0, 0, 1604, 1605, 1, 0, 0,
		0, 1605, 1607, 1, 0, 0, 0, 1606, 1564, 1, 0, 0, 0, 1606, 1568, 1, 0, 0,
		0, 1606, 1572, 1, 0, 0, 0, 1606, 1581, 1, 0, 0, 0, 1606, 1583, 1, 0, 0,
		0, 1606, 1589, 1, 0, 0, 0, 1607, 183, 1, 0, 0, 0, 1608, 1609, 5, 157, 0,
		0, 1609, 1610, 5, 62, 0, 0, 1610, 1611, 5, 49, 0, 0, 1611, 1643, 3, 214,
		107, 0, 1612, 1613, 5, 157, 0, 0, 1613, 1614, 5, 62, 0, 0, 1614, 1643,
		5, 101, 0, 0, 1615, 1616, 5, 157, 0, 0, 1616, 1617, 5, 133, 0, 0, 1617,
		1643, 5, 45, 0, 0, 1618, 1619, 5, 157, 0, 0, 1619, 1620, 5, 133, 0, 0,
		1620, 1621, 5, 46, 0, 0, 1621, 1643, 3, 214, 107, 0, 1622, 1623, 5, 157,
		0, 0, 1623, 1631, 7, 18, 0, 0, 1624, 1625, 5, 49, 0, 0, 1625, 1632, 5,
		147, 0, 0, 1626, 1632, 5, 59, 0, 0, 1627, 1629, 5, 172, 0, 0, 1628, 1627,
		1, 0, 0, 0, 1628, 1629, 1, 0, 0, 0, 1629, 1630, 1, 0, 0, 0, 1630, 1632,
		5, 105, 0, 0, 1631, 1624, 1, 0, 0, 0, 1631, 1626, 1, 0, 0, 0, 1631, 1628,
		1, 0, 0, 0, 1632, 1633, 1, 0, 0, 0, 1633, 1643, 3, 214, 107, 0, 1634, 1635,
		5, 157, 0, 0, 1635, 1636, 7, 18, 0, 0, 1636, 1637, 5, 138, 0, 0, 1637,
		1643, 5, 147, 0, 0, 1638, 1639, 5, 157, 0, 0, 1639, 1640, 5, 155, 0, 0,
		1640, 1641, 5, 137, 0, 0, 1641, 1643, 3, 214, 107, 0, 1642, 1608, 1, 0,
		0, 0, 1642, 1612, 1, 0, 0, 0, 1642, 1615, 1, 0, 0, 0, 1642, 1618, 1, 0,
		0, 0, 1642, 1622, 1, 0, 0, 0, 1642, 1634, 1, 0, 0, 0, 1642, 1638, 1, 0,
		0, 0, 1643, 185, 1, 0, 0, 0, 1644, 1646, 5, 171, 0, 0, 1645, 1647, 5, 160,
		0, 0, 1646, 1645, 1, 0, 0, 0, 1646, 1647, 1, 0, 0, 0, 1647, 1649, 1, 0,
		0, 0, 1648, 1650, 5, 158, 0, 0, 1649, 1648, 1, 0, 0, 0, 1649, 1650, 1,
		0, 0, 0, 1650, 1653, 1, 0, 0, 0, 1651, 1652, 5, 77, 0, 0, 1652, 1654, 5,
		55, 0, 0, 1653, 1651, 1, 0, 0, 0, 1653, 1654, 1, 0, 0, 0, 1654, 1655, 1,
		0, 0, 0, 1655, 1657, 3, 214, 107, 0, 1656, 1658, 3, 48, 24, 0, 1657, 1656,
		1, 0, 0, 0, 1657, 1658, 1, 0, 0, 0, 1658, 187, 1, 0, 0, 0, 1659, 1660,
		5, 177, 0, 0, 1660, 1661, 3, 220, 110, 0, 1661, 189, 1, 0, 0, 0, 1662,
		1663, 5, 183, 0, 0, 1663, 1665, 3, 214, 107, 0, 1664, 1666, 5, 54, 0, 0,
		1665, 1664, 1, 0, 0, 0, 1665, 1666, 1, 0, 0, 0, 1666, 1669, 1, 0, 0, 0,
		1667, 1668, 5, 98, 0, 0, 1668, 1670, 5, 195, 0, 0, 1669, 1667, 1, 0, 0,
		0, 1669, 1670, 1, 0, 0, 0, 1670, 191, 1, 0, 0, 0, 1671, 1719, 3, 236, 118,
		0, 1672, 1673, 3, 236, 118, 0, 1673, 1674, 5, 214, 0, 0, 1674, 1675, 3,
		236, 118, 0, 1675, 1682, 3, 192, 96, 0, 1676, 1677, 5, 203, 0, 0, 1677,
		1678, 3, 236, 118, 0, 1678, 1679, 3, 192, 96, 0, 1679, 1681, 1, 0, 0, 0,
		1680, 1676, 1, 0, 0, 0, 1681, 1684, 1, 0, 0, 0, 1682, 1680, 1, 0, 0, 0,
		1682, 1683, 1, 0, 0, 0, 1683, 1685, 1, 0, 0, 0, 1684, 1682, 1, 0, 0, 0,
		1685, 1686, 5, 224, 0, 0, 1686, 1719, 1, 0, 0, 0, 1687, 1688, 3, 236, 118,
		0, 1688, 1689, 5, 214, 0, 0, 1689, 1694, 3, 240, 120, 0, 1690, 1691, 5,
		203, 0, 0, 1691, 1693, 3, 240, 120, 0, 1692, 1690, 1, 0, 0, 0, 1693, 1696,
		1, 0, 0, 0, 1694, 1692, 1, 0, 0, 0, 1694, 1695, 1, 0, 0, 0, 1695, 1697,
		1, 0, 0, 0, 1696, 1694, 1, 0, 0, 0, 1697, 1698, 5, 224, 0, 0, 1698, 1719,
		1, 0, 0, 0, 1699, 1700, 3, 236, 118, 0, 1700, 1701, 5, 214, 0, 0, 1701,
		1706, 3, 192, 96, 0, 1702, 1703, 5, 203, 0, 0, 1703, 1705, 3, 192, 96,
		0, 1704, 1702, 1, 0, 0, 0, 1705, 1708, 1, 0, 0, 0, 1706, 1704, 1, 0, 0,
		0, 1706, 1707, 1, 0, 0, 0, 1707, 1709, 1, 0, 0, 0, 1708, 1706, 1, 0, 0,
		0, 1709, 1710, 5, 224, 0, 0, 1710, 1719, 1, 0, 0, 0, 1711, 1712, 3, 236,
		118, 0, 1712, 1714, 5, 214, 0, 0, 1713, 1715, 3, 194, 97, 0, 1714, 1713,
		1, 0, 0, 0, 1714, 1715, 1, 0, 0, 0, 1715, 1716, 1, 0, 0, 0, 1716, 1717,
		5, 224, 0, 0, 1717, 1719, 1, 0, 0, 0, 1718, 1671, 1, 0, 0, 0, 1718, 1672,
		1, 0, 0, 0, 1718, 1687, 1, 0, 0, 0, 1718, 1699, 1, 0, 0, 0, 1718, 1711,
		1, 0, 0, 0, 1719, 193, 1, 0, 0, 0, 1720, 1725, 3, 196, 98, 0, 1721, 1722,
		5, 203, 0, 0, 1722, 1724, 3, 196, 98, 0, 1723, 1721, 1, 0, 0, 0, 1724,
		1727, 1, 0, 0, 0, 1725, 1723, 1, 0, 0, 0, 1725, 1726, 1, 0, 0, 0, 1726,
		195, 1, 0, 0, 0, 1727, 1725, 1, 0, 0, 0, 1728, 1729, 3, 214, 107, 0, 1729,
		1730, 5, 206, 0, 0, 1730, 1732, 1, 0, 0, 0, 1731, 1728, 1, 0, 0, 0, 1731,
		1732, 1, 0, 0, 0, 1732, 1733, 1, 0, 0, 0, 1733, 1740, 5, 199, 0, 0, 1734,
		1735, 5, 214, 0, 0, 1735, 1736, 3, 112, 56, 0, 1736, 1737, 5, 224, 0, 0,
		1737, 1740, 1, 0, 0, 0, 1738, 1740, 3, 198, 99, 0, 1739, 1731, 1, 0, 0,
		0, 1739, 1734, 1, 0, 0, 0, 1739, 1738, 1, 0, 0, 0, 1740, 197, 1, 0, 0,
		0, 1741, 1742, 6, 99, -1, 0, 1742, 1744, 5, 19, 0, 0, 1743, 1745, 3, 198,
		99, 0, 1744, 1743, 1, 0, 0, 0, 1744, 1745, 1, 0, 0, 0, 1745, 1751, 1, 0,
		0, 0, 1746, 1747, 5, 185, 0, 0, 1747, 1748, 3, 198, 99, 0, 1748, 1749,
		5, 162, 0, 0, 1749, 1750, 3, 198, 99, 0, 1750, 1752, 1, 0, 0, 0, 1751,
		1746, 1, 0, 0, 0, 1752, 1753, 1, 0, 0, 0, 1753, 1751, 1, 0, 0, 0, 1753,
		1754, 1, 0, 0, 0, 1754, 1757, 1, 0, 0, 0, 1755, 1756, 5, 51, 0, 0, 1756,
		1758, 3, 198, 99, 0, 1757, 1755, 1, 0, 0, 0, 1757, 1758, 1, 0, 0, 0, 1758,
		1759, 1, 0, 0, 0, 1759, 1760, 5, 52, 0, 0, 1760, 1871, 1, 0, 0, 0, 1761,
		1762, 5, 20, 0, 0, 1762, 1763, 5, 214, 0, 0, 1763, 1764, 3, 198, 99, 0,
		1764, 1765, 5, 10, 0, 0, 1765, 1766, 3, 192, 96, 0, 1766, 1767, 5, 224,
		0, 0, 1767, 1871, 1, 0, 0, 0, 1768, 1769, 5, 35, 0, 0, 1769, 1871, 5, 197,
		0, 0, 1770, 1771, 5, 58, 0, 0, 1771, 1772, 5, 214, 0, 0, 1772, 1773, 3,
		228, 114, 0, 1773, 1774, 5, 67, 0, 0, 1774, 1775, 3, 198, 99, 0, 1775,
		1776, 5, 224, 0, 0, 1776, 1871, 1, 0, 0, 0, 1777, 1778, 5, 85, 0, 0, 1778,
		1779, 3, 198, 99, 0, 1779, 1780, 3, 228, 114, 0, 1780, 1871, 1, 0, 0, 0,
		1781, 1782, 5, 154, 0, 0, 1782, 1783, 5, 214, 0, 0, 1783, 1784, 3, 198,
		99, 0, 1784, 1785, 5, 67, 0, 0, 1785, 1788, 3, 198, 99, 0, 1786, 1787,
		5, 64, 0, 0, 1787, 1789, 3, 198, 99, 0, 1788, 1786, 1, 0, 0, 0, 1788, 1789,
		1, 0, 0, 0, 1789, 1790, 1, 0, 0, 0, 1790, 1791, 5, 224, 0, 0, 1791, 1871,
		1, 0, 0, 0, 1792, 1793, 5, 165, 0, 0, 1793, 1871, 5, 197, 0, 0, 1794, 1795,
		5, 170, 0, 0, 1795, 1796, 5, 214, 0, 0, 1796, 1797, 7, 19, 0, 0, 1797,
		1798, 5, 197, 0, 0, 1798, 1799, 5, 67, 0, 0, 1799, 1800, 3, 198, 99, 0,
		1800, 1801, 5, 224, 0, 0, 1801, 1871, 1, 0, 0, 0, 1802, 1803, 3, 236, 118,
		0, 1803, 1805, 5, 214, 0, 0, 1804, 1806, 3, 194, 97, 0, 1805, 1804, 1,
		0, 0, 0, 1805, 1806, 1, 0, 0, 0, 1806, 1807, 1, 0, 0, 0, 1807, 1808, 5,
		224, 0, 0, 1808, 1809, 1, 0, 0, 0, 1809, 1810, 5, 124, 0, 0, 1810, 1811,
		5, 214, 0, 0, 1811, 1812, 3, 168, 84, 0, 1812, 1813, 5, 224, 0, 0, 1813,
		1871, 1, 0, 0, 0, 1814, 1815, 3, 236, 118, 0, 1815, 1817, 5, 214, 0, 0,
		1816, 1818, 3, 194, 97, 0, 1817, 1816, 1, 0, 0, 0, 1817, 1818, 1, 0, 0,
		0, 1818, 1819, 1, 0, 0, 0, 1819, 1820, 5, 224, 0, 0, 1820, 1821, 1, 0,
		0, 0, 1821, 1822, 5, 124, 0, 0, 1822, 1823, 3, 236, 118, 0, 1823, 1871,
		1, 0, 0, 0, 1824, 1830, 3, 236, 118, 0, 1825, 1827, 5, 214, 0, 0, 1826,
		1828, 3, 194, 97, 0, 1827, 1826, 1, 0, 0, 0, 1827, 1828, 1, 0, 0, 0, 1828,
		1829, 1, 0, 0, 0, 1829, 1831, 5, 224, 0, 0, 1830, 1825, 1, 0, 0, 0, 1830,
		1831, 1, 0, 0, 0, 1831, 1832, 1, 0, 0, 0, 1832, 1834, 5, 214, 0, 0, 1833,
		1835, 5, 48, 0, 0, 1834, 1833, 1, 0, 0, 0, 1834, 1835, 1, 0, 0, 0, 1835,
		1837, 1, 0, 0, 0, 1836, 1838, 3, 200, 100, 0, 1837, 1836, 1, 0, 0, 0, 1837,
		1838, 1, 0, 0, 0, 1838, 1839, 1, 0, 0, 0, 1839, 1840, 5, 224, 0, 0, 1840,
		1871, 1, 0, 0, 0, 1841, 1871, 3, 226, 113, 0, 1842, 1843, 5, 205, 0, 0,
		1843, 1871, 3, 198, 99, 17, 1844, 1845, 5, 114, 0, 0, 1845, 1871, 3, 198,
		99, 12, 1846, 1847, 3, 214, 107, 0, 1847, 1848, 5, 206, 0, 0, 1848, 1850,
		1, 0, 0, 0, 1849, 1846, 1, 0, 0, 0, 1849, 1850, 1, 0, 0, 0, 1850, 1851,
		1, 0, 0, 0, 1851, 1871, 5, 199, 0, 0, 1852, 1853, 5, 214, 0, 0, 1853, 1854,
		3, 112, 56, 0, 1854, 1855, 5, 224, 0, 0, 1855, 1871, 1, 0, 0, 0, 1856,
		1857, 5, 214, 0, 0, 1857, 1858, 3, 198, 99, 0, 1858, 1859, 5, 224, 0, 0,
		1859, 1871, 1, 0, 0, 0, 1860, 1861, 5, 214, 0, 0, 1861, 1862, 3, 194, 97,
		0, 1862, 1863, 5, 224, 0, 0, 1863, 1871, 1, 0, 0, 0, 1864, 1866, 5, 212,
		0, 0, 1865, 1867, 3, 194, 97, 0, 1866, 1865, 1, 0, 0, 0, 1866, 1867, 1,
		0, 0, 0, 1867, 1868, 1, 0, 0, 0, 1868, 1871, 5, 223, 0, 0, 1869, 1871,
		3, 206, 103, 0, 1870, 1741, 1, 0, 0, 0, 1870, 1761, 1, 0, 0, 0, 1870, 1768,
		1, 0, 0, 0, 1870, 1770, 1, 0, 0, 0, 1870, 1777, 1, 0, 0, 0, 1870, 1781,
		1, 0, 0, 0, 1870, 1792, 1, 0, 0, 0, 1870, 1794, 1, 0, 0, 0, 1870, 1802,
		1, 0, 0, 0, 1870, 1814, 1, 0, 0, 0, 1870, 1824, 1, 0, 0, 0, 1870, 1841,
		1, 0, 0, 0, 1870, 1842, 1, 0, 0, 0, 1870, 1844, 1, 0, 0, 0, 1870, 1849,
		1, 0, 0, 0, 1870, 1852, 1, 0, 0, 0, 1870, 1856, 1, 0, 0, 0, 1870, 1860,
		1, 0, 0, 0, 1870, 1864, 1, 0, 0, 0, 1870, 1869, 1, 0, 0, 0, 1871, 1943,
		1, 0, 0, 0, 1872, 1873, 10, 16, 0, 0, 1873, 1874, 7, 20, 0, 0, 1874, 1942,
		3, 198, 99, 17, 1875, 1876, 10, 15, 0, 0, 1876, 1877, 7, 21, 0, 0, 1877,
		1942, 3, 198, 99, 16, 1878, 1897, 10, 14, 0, 0, 1879, 1898, 5, 207, 0,
		0, 1880, 1898, 5, 208, 0, 0, 1881, 1898, 5, 216, 0, 0, 1882, 1898, 5, 213,
		0, 0, 1883, 1898, 5, 209, 0, 0, 1884, 1898, 5, 215, 0, 0, 1885, 1898, 5,
		210, 0, 0, 1886, 1888, 5, 70, 0, 0, 1887, 1886, 1, 0, 0, 0, 1887, 1888,
		1, 0, 0, 0, 1888, 1890, 1, 0, 0, 0, 1889, 1891, 5, 114, 0, 0, 1890, 1889,
		1, 0, 0, 0, 1890, 1891, 1, 0, 0, 0, 1891, 1892, 1, 0, 0, 0, 1892, 1898,
		5, 79, 0, 0, 1893, 1895, 5, 114, 0, 0, 1894, 1893, 1, 0, 0, 0, 1894, 1895,
		1, 0, 0, 0, 1895, 1896, 1, 0, 0, 0, 1896, 1898, 7, 22, 0, 0, 1897, 1879,
		1, 0, 0, 0, 1897, 1880, 1, 0, 0, 0, 1897, 1881, 1, 0, 0, 0, 1897, 1882,
		1, 0, 0, 0, 1897, 1883, 1, 0, 0, 0, 1897, 1884, 1, 0, 0, 0, 1897, 1885,
		1, 0, 0, 0, 1897, 1887, 1, 0, 0, 0, 1897, 1894, 1, 0, 0, 0, 1898, 1899,
		1, 0, 0, 0, 1899, 1942, 3, 198, 99, 15, 1900, 1901, 10, 11, 0, 0, 1901,
		1902, 5, 6, 0, 0, 1902, 1942, 3, 198, 99, 12, 1903, 1904, 10, 10, 0, 0,
		1904, 1905, 5, 120, 0, 0, 1905, 1942, 3, 198, 99, 11, 1906, 1908, 10, 9,
		0, 0, 1907, 1909, 5, 114, 0, 0, 1908, 1907, 1, 0, 0, 0, 1908, 1909, 1,
		0, 0, 0, 1909, 1910, 1, 0, 0, 0, 1910, 1911, 5, 16, 0, 0, 1911, 1912, 3,
		198, 99, 0, 1912, 1913, 5, 6, 0, 0, 1913, 1914, 3, 198, 99, 10, 1914, 1942,
		1, 0, 0, 0, 1915, 1916, 10, 8, 0, 0, 1916, 1917, 5, 219, 0, 0, 1917, 1918,
		3, 198, 99, 0, 1918, 1919, 5, 202, 0, 0, 1919, 1920, 3, 198, 99, 8, 1920,
		1942, 1, 0, 0, 0, 1921, 1922, 10, 19, 0, 0, 1922, 1923, 5, 212, 0, 0, 1923,
		1924, 3, 198, 99, 0, 1924, 1925, 5, 223, 0, 0, 1925, 1942, 1, 0, 0, 0,
		1926, 1927, 10, 18, 0, 0, 1927, 1928, 5, 206, 0, 0, 1928, 1942, 5, 195,
		0, 0, 1929, 1930, 10, 13, 0, 0, 1930, 1932, 5, 87, 0, 0, 1931, 1933, 5,
		114, 0, 0, 1932, 1931, 1, 0, 0, 0, 1932, 1933, 1, 0, 0, 0, 1933, 1934,
		1, 0, 0, 0, 1934, 1942, 5, 115, 0, 0, 1935, 1939, 10, 7, 0, 0, 1936, 1940,
		3, 234, 117, 0, 1937, 1938, 5, 10, 0, 0, 1938, 1940, 3, 236, 118, 0, 1939,
		1936, 1, 0, 0, 0, 1939, 1937, 1, 0, 0, 0, 1940, 1942, 1, 0, 0, 0, 1941,
		1872, 1, 0, 0, 0, 1941, 1875, 1, 0, 0, 0, 1941, 1878, 1, 0, 0, 0, 1941,
		1900, 1, 0, 0, 0, 1941, 1903, 1, 0, 0, 0, 1941, 1906, 1, 0, 0, 0, 1941,
		1915, 1, 0, 0, 0, 1941, 1921, 1, 0, 0, 0, 1941, 1926, 1, 0, 0, 0, 1941,
		1929, 1, 0, 0, 0, 1941, 1935, 1, 0, 0, 0, 1942, 1945, 1, 0, 0, 0, 1943,
		1941, 1, 0, 0, 0, 1943, 1944, 1, 0, 0, 0, 1944, 199, 1, 0, 0, 0, 1945,
		1943, 1, 0, 0, 0, 1946, 1951, 3, 202, 101, 0, 1947, 1948, 5, 203, 0, 0,
		1948, 1950, 3, 202, 101, 0, 1949, 1947, 1, 0, 0, 0, 1950, 1953, 1, 0, 0,
		0, 1951, 1949, 1, 0, 0, 0, 1951, 1952, 1, 0, 0, 0, 1952, 201, 1, 0, 0,
		0, 1953, 1951, 1, 0, 0, 0, 1954, 1957, 3, 204, 102, 0, 1955, 1957, 3, 198,
		99, 0, 1956, 1954, 1, 0, 0, 0, 1956, 1955, 1, 0, 0, 0, 1957, 203, 1, 0,
		0, 0, 1958, 1959, 5, 214, 0, 0, 1959, 1964, 3, 236, 118, 0, 1960, 1961,
		5, 203, 0, 0, 1961, 1963, 3, 236, 118, 0, 1962, 1960, 1, 0, 0, 0, 1963,
		1966, 1, 0, 0, 0, 1964, 1962, 1, 0, 0, 0, 1964, 1965, 1, 0, 0, 0, 1965,
		1967, 1, 0, 0, 0, 1966, 1964, 1, 0, 0, 0, 1967, 1968, 5, 224, 0, 0, 1968,
		1978, 1, 0, 0, 0, 1969, 1974, 3, 236, 118, 0, 1970, 1971, 5, 203, 0, 0,
		1971, 1973, 3, 236, 118, 0, 1972, 1970, 1, 0, 0, 0, 1973, 1976, 1, 0, 0,
		0, 1974, 1972, 1, 0, 0, 0, 1974, 1975, 1, 0, 0, 0, 1975, 1978, 1, 0, 0,
		0, 1976, 1974, 1, 0, 0, 0, 1977, 1958, 1, 0, 0, 0, 1977, 1969, 1, 0, 0,
		0, 1978, 1979, 1, 0, 0, 0, 1979, 1980, 5, 198, 0, 0, 1980, 1981, 3, 198,
		99, 0, 1981, 205, 1, 0, 0, 0, 1982, 1983, 3, 214, 107, 0, 1983, 1984, 5,
		206, 0, 0, 1984, 1986, 1, 0, 0, 0, 1985, 1982, 1, 0, 0, 0, 1985, 1986,
		1, 0, 0, 0, 1986, 1987, 1, 0, 0, 0, 1987, 1988, 3, 208, 104, 0, 1988, 207,
		1, 0, 0, 0, 1989, 1992, 3, 236, 118, 0, 1990, 1991, 5, 206, 0, 0, 1991,
		1993, 3, 236, 118, 0, 1992, 1990, 1, 0, 0, 0, 1992, 1993, 1, 0, 0, 0, 1993,
		209, 1, 0, 0, 0, 1994, 1995, 6, 105, -1, 0, 1995, 2002, 3, 214, 107, 0,
		1996, 2002, 3, 212, 106, 0, 1997, 1998, 5, 214, 0, 0, 1998, 1999, 3, 112,
		56, 0, 1999, 2000, 5, 224, 0, 0, 2000, 2002, 1, 0, 0, 0, 2001, 1994, 1,
		0, 0, 0, 2001, 1996, 1, 0, 0, 0, 2001, 1997, 1, 0, 0, 0, 2002, 2011, 1,
		0, 0, 0, 2003, 2007, 10, 1, 0, 0, 2004, 2008, 3, 234, 117, 0, 2005, 2006,
		5, 10, 0, 0, 2006, 2008, 3, 236, 118, 0, 2007, 2004, 1, 0, 0, 0, 2007,
		2005, 1, 0, 0, 0, 2008, 2010, 1, 0, 0, 0, 2009, 2003, 1, 0, 0, 0, 2010,
		2013, 1, 0, 0, 0, 2011, 2009, 1, 0, 0, 0, 2011, 2012, 1, 0, 0, 0, 2012,
		211, 1, 0, 0, 0, 2013, 2011, 1, 0, 0, 0, 2014, 2015, 3, 236, 118, 0, 2015,
		2017, 5, 214, 0, 0, 2016, 2018, 3, 216, 108, 0, 2017, 2016, 1, 0, 0, 0,
		2017, 2018, 1, 0, 0, 0, 2018, 2019, 1, 0, 0, 0, 2019, 2020, 5, 224, 0,
		0, 2020, 213, 1, 0, 0, 0, 2021, 2022, 3, 220, 110, 0, 2022, 2023, 5, 206,
		0, 0, 2023, 2025, 1, 0, 0, 0, 2024, 2021, 1, 0, 0, 0, 2024, 2025, 1, 0,
		0, 0, 2025, 2026, 1, 0, 0, 0, 2026, 2027, 3, 236, 118, 0, 2027, 215, 1,
		0, 0, 0, 2028, 2033, 3, 218, 109, 0, 2029, 2030, 5, 203, 0, 0, 2030, 2032,
		3, 218, 109, 0, 2031, 2029, 1, 0, 0, 0, 2032, 2035, 1, 0, 0, 0, 2033, 2031,
		1, 0, 0, 0, 2033, 2034, 1, 0, 0, 0, 2034, 217, 1, 0, 0, 0, 2035, 2033,
		1, 0, 0, 0, 2036, 2040, 3, 208, 104, 0, 2037, 2040, 3, 212, 106, 0, 2038,
		2040, 3, 226, 113, 0, 2039, 2036, 1, 0, 0, 0, 2039, 2037, 1, 0, 0, 0, 2039,
		2038, 1, 0, 0, 0, 2040, 219, 1, 0, 0, 0, 2041, 2042, 3, 236, 118, 0, 2042,
		221, 1, 0, 0, 0, 2043, 2052, 5, 193, 0, 0, 2044, 2045, 5, 206, 0, 0, 2045,
		2052, 7, 23, 0, 0, 2046, 2047, 5, 195, 0, 0, 2047, 2049, 5, 206, 0, 0,
		2048, 2050, 7, 23, 0, 0, 2049, 2048, 1, 0, 0, 0, 2049, 2050, 1, 0, 0, 0,
		2050, 2052, 1, 0, 0, 0, 2051, 2043, 1, 0, 0, 0, 2051, 2044, 1, 0, 0, 0,
		2051, 2046, 1, 0, 0, 0, 2052, 223, 1, 0, 0, 0, 2053, 2055, 7, 24, 0, 0,
		2054, 2053, 1, 0, 0, 0, 2054, 2055, 1, 0, 0, 0, 2055, 2062, 1, 0, 0, 0,
		2056, 2063, 3, 222, 111, 0, 2057, 2063, 5, 194, 0, 0, 2058, 2063, 5, 195,
		0, 0, 2059, 2063, 5, 196, 0, 0, 2060, 2063, 5, 81, 0, 0, 2061, 2063, 5,
		112, 0, 0, 2062, 2056, 1, 0, 0, 0, 2062, 2057, 1, 0, 0, 0, 2062, 2058,
		1, 0, 0, 0, 2062, 2059, 1, 0, 0, 0, 2062, 2060, 1, 0, 0, 0, 2062, 2061,
		1, 0, 0, 0, 2063, 225, 1, 0, 0, 0, 2064, 2068, 3, 224, 112, 0, 2065, 2068,
		5, 197, 0, 0, 2066, 2068, 5, 115, 0, 0, 2067, 2064, 1, 0, 0, 0, 2067, 2065,
		1, 0, 0, 0, 2067, 2066, 1, 0, 0, 0, 2068, 227, 1, 0, 0, 0, 2069, 2070,
		7, 25, 0, 0, 2070, 229, 1, 0, 0, 0, 2071, 2072, 7, 26, 0, 0, 2072, 231,
		1, 0, 0, 0, 2073, 2074, 7, 27, 0, 0, 2074, 233, 1, 0, 0, 0, 2075, 2078,
		5, 192, 0, 0, 2076, 2078, 3, 232, 116, 0, 2077, 2075, 1, 0, 0, 0, 2077,
		2076, 1, 0, 0, 0, 2078, 235, 1, 0, 0, 0, 2079, 2083, 5, 192, 0, 0, 2080,
		2083, 3, 228, 114, 0, 2081, 2083, 3, 230, 115, 0, 2082, 2079, 1, 0, 0,
		0, 2082, 2080, 1, 0, 0, 0, 2082, 2081, 1, 0, 0, 0, 2083, 237, 1, 0, 0,
		0, 2084, 2087, 3, 236, 118, 0, 2085, 2087, 5, 115, 0, 0, 2086, 2084, 1,
		0, 0, 0, 2086, 2085, 1, 0, 0, 0, 2087, 239, 1, 0, 0, 0, 2088, 2089, 5,
		197, 0, 0, 2089, 2090, 5, 208, 0, 0, 2090, 2091, 3, 224, 112, 0, 2091,
		241, 1, 0, 0, 0, 276, 246, 250, 253, 256, 279, 282, 290, 295, 308, 317,
		324, 332, 337, 344, 349, 356, 361, 367, 373, 378, 384, 389, 395, 400, 406,
		420, 427, 434, 441, 447, 452, 458, 463, 469, 478, 488, 498, 518, 526, 541,
		548, 562, 568, 574, 581, 585, 588, 594, 597, 603, 607, 610, 621, 625, 628,
		633, 635, 638, 641, 651, 655, 658, 661, 666, 668, 676, 679, 682, 688, 692,
		695, 698, 701, 704, 709, 715, 719, 722, 725, 729, 737, 764, 766, 771, 793,
		795, 806, 809, 818, 835, 846, 864, 877, 894, 903, 931, 933, 954, 959, 964,
		967, 979, 984, 988, 991, 995, 999, 1004, 1007, 1011, 1013, 1035, 1043,
		1046, 1056, 1060, 1068, 1072, 1077, 1081, 1085, 1089, 1093, 1095, 1103,
		1107, 1110, 1118, 1123, 1128, 1131, 1141, 1154, 1159, 1163, 1171, 1178,
		1185, 1189, 1195, 1198, 1201, 1204, 1218, 1222, 1226, 1231, 1234, 1244,
		1252, 1255, 1259, 1262, 1266, 1269, 1272, 1275, 1278, 1281, 1285, 1289,
		1292, 1295, 1298, 1301, 1304, 1313, 1319, 1346, 1368, 1376, 1379, 1385,
		1393, 1396, 1402, 1404, 1408, 1413, 1416, 1419, 1423, 1427, 1430, 1432,
		1435, 1439, 1443, 1446, 1448, 1450, 1453, 1458, 1469, 1475, 1480, 1487,
		1492, 1496, 1500, 1505, 1512, 1520, 1523, 1526, 1545, 1559, 1575, 1578,
		1587, 1591, 1596, 1601, 1604, 1606, 1628, 1631, 1642, 1646, 1649, 1653,
		1657, 1665, 1669, 1682, 1694, 1706, 1714, 1718, 1725, 1731, 1739, 1744,
		1753, 1757, 1788, 1805, 1817, 1827, 1830, 1834, 1837, 1849, 1866, 1870,
		1887, 1890, 1894, 1897, 1908, 1932, 1939, 1941, 1943, 1951, 1956, 1964,
		1974, 1977, 1985, 1992, 2001, 2007, 2011, 2017, 2024, 2033, 2039, 2049,
		2051, 2054, 2062, 2067, 2077, 2082, 2086,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ClickHouseParserInit initializes any static state used to implement ClickHouseParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewClickHouseParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func ClickHouseParserInit() {
	staticData := &ClickHouseParserParserStaticData
	staticData.once.Do(clickhouseparserParserInit)
}

// NewClickHouseParser produces a new parser instance for the optional input antlr.TokenStream.
func NewClickHouseParser(input antlr.TokenStream) *ClickHouseParser {
	ClickHouseParserInit()
	this := new(ClickHouseParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &ClickHouseParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "ClickHouseParser.g4"

	return this
}

// ClickHouseParser tokens.
const (
	ClickHouseParserEOF                 = antlr.TokenEOF
	ClickHouseParserADD                 = 1
	ClickHouseParserAFTER               = 2
	ClickHouseParserALIAS               = 3
	ClickHouseParserALL                 = 4
	ClickHouseParserALTER               = 5
	ClickHouseParserAND                 = 6
	ClickHouseParserANTI                = 7
	ClickHouseParserANY                 = 8
	ClickHouseParserARRAY               = 9
	ClickHouseParserAS                  = 10
	ClickHouseParserASCENDING           = 11
	ClickHouseParserASOF                = 12
	ClickHouseParserAST                 = 13
	ClickHouseParserASYNC               = 14
	ClickHouseParserATTACH              = 15
	ClickHouseParserBETWEEN             = 16
	ClickHouseParserBOTH                = 17
	ClickHouseParserBY                  = 18
	ClickHouseParserCASE                = 19
	ClickHouseParserCAST                = 20
	ClickHouseParserCHECK               = 21
	ClickHouseParserCLEAR               = 22
	ClickHouseParserCLUSTER             = 23
	ClickHouseParserCODEC               = 24
	ClickHouseParserCOLLATE             = 25
	ClickHouseParserCOLUMN              = 26
	ClickHouseParserCOMMENT             = 27
	ClickHouseParserCONSTRAINT          = 28
	ClickHouseParserCREATE              = 29
	ClickHouseParserCROSS               = 30
	ClickHouseParserCUBE                = 31
	ClickHouseParserCURRENT             = 32
	ClickHouseParserDATABASE            = 33
	ClickHouseParserDATABASES           = 34
	ClickHouseParserDATE                = 35
	ClickHouseParserDAY                 = 36
	ClickHouseParserDEDUPLICATE         = 37
	ClickHouseParserDEFAULT             = 38
	ClickHouseParserDELAY               = 39
	ClickHouseParserDELETE              = 40
	ClickHouseParserDESC                = 41
	ClickHouseParserDESCENDING          = 42
	ClickHouseParserDESCRIBE            = 43
	ClickHouseParserDETACH              = 44
	ClickHouseParserDICTIONARIES        = 45
	ClickHouseParserDICTIONARY          = 46
	ClickHouseParserDISK                = 47
	ClickHouseParserDISTINCT            = 48
	ClickHouseParserDISTRIBUTED         = 49
	ClickHouseParserDROP                = 50
	ClickHouseParserELSE                = 51
	ClickHouseParserEND                 = 52
	ClickHouseParserENGINE              = 53
	ClickHouseParserEVENTS              = 54
	ClickHouseParserEXISTS              = 55
	ClickHouseParserEXPLAIN             = 56
	ClickHouseParserEXPRESSION          = 57
	ClickHouseParserEXTRACT             = 58
	ClickHouseParserFETCHES             = 59
	ClickHouseParserFINAL               = 60
	ClickHouseParserFIRST               = 61
	ClickHouseParserFLUSH               = 62
	ClickHouseParserFOLLOWING           = 63
	ClickHouseParserFOR                 = 64
	ClickHouseParserFORMAT              = 65
	ClickHouseParserFREEZE              = 66
	ClickHouseParserFROM                = 67
	ClickHouseParserFULL                = 68
	ClickHouseParserFUNCTION            = 69
	ClickHouseParserGLOBAL              = 70
	ClickHouseParserGRANULARITY         = 71
	ClickHouseParserGROUP               = 72
	ClickHouseParserHAVING              = 73
	ClickHouseParserHIERARCHICAL        = 74
	ClickHouseParserHOUR                = 75
	ClickHouseParserID                  = 76
	ClickHouseParserIF                  = 77
	ClickHouseParserILIKE               = 78
	ClickHouseParserIN                  = 79
	ClickHouseParserINDEX               = 80
	ClickHouseParserINF                 = 81
	ClickHouseParserINJECTIVE           = 82
	ClickHouseParserINNER               = 83
	ClickHouseParserINSERT              = 84
	ClickHouseParserINTERVAL            = 85
	ClickHouseParserINTO                = 86
	ClickHouseParserIS                  = 87
	ClickHouseParserIS_OBJECT_ID        = 88
	ClickHouseParserJOIN                = 89
	ClickHouseParserKEY                 = 90
	ClickHouseParserKILL                = 91
	ClickHouseParserLAST                = 92
	ClickHouseParserLAYOUT              = 93
	ClickHouseParserLEADING             = 94
	ClickHouseParserLEFT                = 95
	ClickHouseParserLIFETIME            = 96
	ClickHouseParserLIKE                = 97
	ClickHouseParserLIMIT               = 98
	ClickHouseParserLIVE                = 99
	ClickHouseParserLOCAL               = 100
	ClickHouseParserLOGS                = 101
	ClickHouseParserMATERIALIZE         = 102
	ClickHouseParserMATERIALIZED        = 103
	ClickHouseParserMAX                 = 104
	ClickHouseParserMERGES              = 105
	ClickHouseParserMIN                 = 106
	ClickHouseParserMINUTE              = 107
	ClickHouseParserMODIFY              = 108
	ClickHouseParserMONTH               = 109
	ClickHouseParserMOVE                = 110
	ClickHouseParserMUTATION            = 111
	ClickHouseParserNAN_SQL             = 112
	ClickHouseParserNO                  = 113
	ClickHouseParserNOT                 = 114
	ClickHouseParserNULL_SQL            = 115
	ClickHouseParserNULLS               = 116
	ClickHouseParserOFFSET              = 117
	ClickHouseParserON                  = 118
	ClickHouseParserOPTIMIZE            = 119
	ClickHouseParserOR                  = 120
	ClickHouseParserORDER               = 121
	ClickHouseParserOUTER               = 122
	ClickHouseParserOUTFILE             = 123
	ClickHouseParserOVER                = 124
	ClickHouseParserPARTITION           = 125
	ClickHouseParserPOPULATE            = 126
	ClickHouseParserPRECEDING           = 127
	ClickHouseParserPREWHERE            = 128
	ClickHouseParserPRIMARY             = 129
	ClickHouseParserPROJECTION          = 130
	ClickHouseParserQUARTER             = 131
	ClickHouseParserRANGE               = 132
	ClickHouseParserRELOAD              = 133
	ClickHouseParserREMOVE              = 134
	ClickHouseParserRENAME              = 135
	ClickHouseParserREPLACE             = 136
	ClickHouseParserREPLICA             = 137
	ClickHouseParserREPLICATED          = 138
	ClickHouseParserRIGHT               = 139
	ClickHouseParserROLLUP              = 140
	ClickHouseParserROW                 = 141
	ClickHouseParserROWS                = 142
	ClickHouseParserSAMPLE              = 143
	ClickHouseParserSECOND              = 144
	ClickHouseParserSELECT              = 145
	ClickHouseParserSEMI                = 146
	ClickHouseParserSENDS               = 147
	ClickHouseParserSET                 = 148
	ClickHouseParserSETTINGS            = 149
	ClickHouseParserSHOW                = 150
	ClickHouseParserSOURCE              = 151
	ClickHouseParserSTART               = 152
	ClickHouseParserSTOP                = 153
	ClickHouseParserSUBSTRING           = 154
	ClickHouseParserSYNC                = 155
	ClickHouseParserSYNTAX              = 156
	ClickHouseParserSYSTEM              = 157
	ClickHouseParserTABLE               = 158
	ClickHouseParserTABLES              = 159
	ClickHouseParserTEMPORARY           = 160
	ClickHouseParserTEST                = 161
	ClickHouseParserTHEN                = 162
	ClickHouseParserTIES                = 163
	ClickHouseParserTIMEOUT             = 164
	ClickHouseParserTIMESTAMP           = 165
	ClickHouseParserTO                  = 166
	ClickHouseParserTOP                 = 167
	ClickHouseParserTOTALS              = 168
	ClickHouseParserTRAILING            = 169
	ClickHouseParserTRIM                = 170
	ClickHouseParserTRUNCATE            = 171
	ClickHouseParserTTL                 = 172
	ClickHouseParserTYPE                = 173
	ClickHouseParserUNBOUNDED           = 174
	ClickHouseParserUNION               = 175
	ClickHouseParserUPDATE              = 176
	ClickHouseParserUSE                 = 177
	ClickHouseParserUSING               = 178
	ClickHouseParserUUID                = 179
	ClickHouseParserVALUES              = 180
	ClickHouseParserVIEW                = 181
	ClickHouseParserVOLUME              = 182
	ClickHouseParserWATCH               = 183
	ClickHouseParserWEEK                = 184
	ClickHouseParserWHEN                = 185
	ClickHouseParserWHERE               = 186
	ClickHouseParserWINDOW              = 187
	ClickHouseParserWITH                = 188
	ClickHouseParserYEAR                = 189
	ClickHouseParserJSON_FALSE          = 190
	ClickHouseParserJSON_TRUE           = 191
	ClickHouseParserIDENTIFIER          = 192
	ClickHouseParserFLOATING_LITERAL    = 193
	ClickHouseParserOCTAL_LITERAL       = 194
	ClickHouseParserDECIMAL_LITERAL     = 195
	ClickHouseParserHEXADECIMAL_LITERAL = 196
	ClickHouseParserSTRING_LITERAL      = 197
	ClickHouseParserARROW               = 198
	ClickHouseParserASTERISK            = 199
	ClickHouseParserBACKQUOTE           = 200
	ClickHouseParserBACKSLASH           = 201
	ClickHouseParserCOLON               = 202
	ClickHouseParserCOMMA               = 203
	ClickHouseParserCONCAT              = 204
	ClickHouseParserDASH                = 205
	ClickHouseParserDOT                 = 206
	ClickHouseParserEQ_DOUBLE           = 207
	ClickHouseParserEQ_SINGLE           = 208
	ClickHouseParserGE                  = 209
	ClickHouseParserGT                  = 210
	ClickHouseParserLBRACE              = 211
	ClickHouseParserLBRACKET            = 212
	ClickHouseParserLE                  = 213
	ClickHouseParserLPAREN              = 214
	ClickHouseParserLT                  = 215
	ClickHouseParserNOT_EQ              = 216
	ClickHouseParserPERCENT             = 217
	ClickHouseParserPLUS                = 218
	ClickHouseParserQUERY               = 219
	ClickHouseParserQUOTE_DOUBLE        = 220
	ClickHouseParserQUOTE_SINGLE        = 221
	ClickHouseParserRBRACE              = 222
	ClickHouseParserRBRACKET            = 223
	ClickHouseParserRPAREN              = 224
	ClickHouseParserSEMICOLON           = 225
	ClickHouseParserSLASH               = 226
	ClickHouseParserUNDERSCORE          = 227
	ClickHouseParserMULTI_LINE_COMMENT  = 228
	ClickHouseParserSINGLE_LINE_COMMENT = 229
	ClickHouseParserWHITESPACE          = 230
)

// ClickHouseParser rules.
const (
	ClickHouseParserRULE_queryStmt                  = 0
	ClickHouseParserRULE_query                      = 1
	ClickHouseParserRULE_ctes                       = 2
	ClickHouseParserRULE_namedQuery                 = 3
	ClickHouseParserRULE_columnAliases              = 4
	ClickHouseParserRULE_alterStmt                  = 5
	ClickHouseParserRULE_alterTableClause           = 6
	ClickHouseParserRULE_assignmentExprList         = 7
	ClickHouseParserRULE_assignmentExpr             = 8
	ClickHouseParserRULE_tableColumnPropertyType    = 9
	ClickHouseParserRULE_partitionClause            = 10
	ClickHouseParserRULE_attachStmt                 = 11
	ClickHouseParserRULE_checkStmt                  = 12
	ClickHouseParserRULE_createStmt                 = 13
	ClickHouseParserRULE_dictionarySchemaClause     = 14
	ClickHouseParserRULE_dictionaryAttrDfnt         = 15
	ClickHouseParserRULE_dictionaryEngineClause     = 16
	ClickHouseParserRULE_dictionaryPrimaryKeyClause = 17
	ClickHouseParserRULE_dictionaryArgExpr          = 18
	ClickHouseParserRULE_sourceClause               = 19
	ClickHouseParserRULE_lifetimeClause             = 20
	ClickHouseParserRULE_layoutClause               = 21
	ClickHouseParserRULE_rangeClause                = 22
	ClickHouseParserRULE_dictionarySettingsClause   = 23
	ClickHouseParserRULE_clusterClause              = 24
	ClickHouseParserRULE_uuidClause                 = 25
	ClickHouseParserRULE_destinationClause          = 26
	ClickHouseParserRULE_subqueryClause             = 27
	ClickHouseParserRULE_tableSchemaClause          = 28
	ClickHouseParserRULE_engineClause               = 29
	ClickHouseParserRULE_partitionByClause          = 30
	ClickHouseParserRULE_primaryKeyClause           = 31
	ClickHouseParserRULE_sampleByClause             = 32
	ClickHouseParserRULE_ttlClause                  = 33
	ClickHouseParserRULE_engineExpr                 = 34
	ClickHouseParserRULE_tableElementExpr           = 35
	ClickHouseParserRULE_tableColumnDfnt            = 36
	ClickHouseParserRULE_tableColumnPropertyExpr    = 37
	ClickHouseParserRULE_tableIndexDfnt             = 38
	ClickHouseParserRULE_tableProjectionDfnt        = 39
	ClickHouseParserRULE_codecExpr                  = 40
	ClickHouseParserRULE_codecArgExpr               = 41
	ClickHouseParserRULE_ttlExpr                    = 42
	ClickHouseParserRULE_describeStmt               = 43
	ClickHouseParserRULE_dropStmt                   = 44
	ClickHouseParserRULE_existsStmt                 = 45
	ClickHouseParserRULE_explainStmt                = 46
	ClickHouseParserRULE_insertStmt                 = 47
	ClickHouseParserRULE_columnsClause              = 48
	ClickHouseParserRULE_dataClause                 = 49
	ClickHouseParserRULE_assignmentValues           = 50
	ClickHouseParserRULE_assignmentValue            = 51
	ClickHouseParserRULE_killStmt                   = 52
	ClickHouseParserRULE_optimizeStmt               = 53
	ClickHouseParserRULE_renameStmt                 = 54
	ClickHouseParserRULE_projectionSelectStmt       = 55
	ClickHouseParserRULE_selectUnionStmt            = 56
	ClickHouseParserRULE_selectStmtWithParens       = 57
	ClickHouseParserRULE_selectStmt                 = 58
	ClickHouseParserRULE_withClause                 = 59
	ClickHouseParserRULE_topClause                  = 60
	ClickHouseParserRULE_fromClause                 = 61
	ClickHouseParserRULE_arrayJoinClause            = 62
	ClickHouseParserRULE_windowClause               = 63
	ClickHouseParserRULE_prewhereClause             = 64
	ClickHouseParserRULE_whereClause                = 65
	ClickHouseParserRULE_groupByClause              = 66
	ClickHouseParserRULE_havingClause               = 67
	ClickHouseParserRULE_orderByClause              = 68
	ClickHouseParserRULE_projectionOrderByClause    = 69
	ClickHouseParserRULE_limitByClause              = 70
	ClickHouseParserRULE_limitClause                = 71
	ClickHouseParserRULE_settingsClause             = 72
	ClickHouseParserRULE_joinExpr                   = 73
	ClickHouseParserRULE_joinOp                     = 74
	ClickHouseParserRULE_joinOpCross                = 75
	ClickHouseParserRULE_joinConstraintClause       = 76
	ClickHouseParserRULE_sampleClause               = 77
	ClickHouseParserRULE_limitExpr                  = 78
	ClickHouseParserRULE_orderExprList              = 79
	ClickHouseParserRULE_orderExpr                  = 80
	ClickHouseParserRULE_ratioExpr                  = 81
	ClickHouseParserRULE_settingExprList            = 82
	ClickHouseParserRULE_settingExpr                = 83
	ClickHouseParserRULE_windowExpr                 = 84
	ClickHouseParserRULE_winPartitionByClause       = 85
	ClickHouseParserRULE_winOrderByClause           = 86
	ClickHouseParserRULE_winFrameClause             = 87
	ClickHouseParserRULE_winFrameExtend             = 88
	ClickHouseParserRULE_winFrameBound              = 89
	ClickHouseParserRULE_setStmt                    = 90
	ClickHouseParserRULE_showStmt                   = 91
	ClickHouseParserRULE_systemStmt                 = 92
	ClickHouseParserRULE_truncateStmt               = 93
	ClickHouseParserRULE_useStmt                    = 94
	ClickHouseParserRULE_watchStmt                  = 95
	ClickHouseParserRULE_columnTypeExpr             = 96
	ClickHouseParserRULE_columnExprList             = 97
	ClickHouseParserRULE_columnsExpr                = 98
	ClickHouseParserRULE_columnExpr                 = 99
	ClickHouseParserRULE_columnArgList              = 100
	ClickHouseParserRULE_columnArgExpr              = 101
	ClickHouseParserRULE_columnLambdaExpr           = 102
	ClickHouseParserRULE_columnIdentifier           = 103
	ClickHouseParserRULE_nestedIdentifier           = 104
	ClickHouseParserRULE_tableExpr                  = 105
	ClickHouseParserRULE_tableFunctionExpr          = 106
	ClickHouseParserRULE_tableIdentifier            = 107
	ClickHouseParserRULE_tableArgList               = 108
	ClickHouseParserRULE_tableArgExpr               = 109
	ClickHouseParserRULE_databaseIdentifier         = 110
	ClickHouseParserRULE_floatingLiteral            = 111
	ClickHouseParserRULE_numberLiteral              = 112
	ClickHouseParserRULE_literal                    = 113
	ClickHouseParserRULE_interval                   = 114
	ClickHouseParserRULE_keyword                    = 115
	ClickHouseParserRULE_keywordForAlias            = 116
	ClickHouseParserRULE_alias                      = 117
	ClickHouseParserRULE_identifier                 = 118
	ClickHouseParserRULE_identifierOrNull           = 119
	ClickHouseParserRULE_enumValue                  = 120
)

// IQueryStmtContext is an interface to support dynamic dispatch.
type IQueryStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	Query() IQueryContext
	InsertStmt() IInsertStmtContext
	INTO() antlr.TerminalNode
	OUTFILE() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	FORMAT() antlr.TerminalNode
	IdentifierOrNull() IIdentifierOrNullContext
	SEMICOLON() antlr.TerminalNode

	// IsQueryStmtContext differentiates from other interfaces.
	IsQueryStmtContext()
}

type QueryStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryStmtContext() *QueryStmtContext {
	var p = new(QueryStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_queryStmt
	return p
}

func InitEmptyQueryStmtContext(p *QueryStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_queryStmt
}

func (*QueryStmtContext) IsQueryStmtContext() {}

func NewQueryStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryStmtContext {
	var p = new(QueryStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_queryStmt

	return p
}

func (s *QueryStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryStmtContext) EOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEOF, 0)
}

func (s *QueryStmtContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *QueryStmtContext) InsertStmt() IInsertStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsertStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsertStmtContext)
}

func (s *QueryStmtContext) INTO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTO, 0)
}

func (s *QueryStmtContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTFILE, 0)
}

func (s *QueryStmtContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *QueryStmtContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFORMAT, 0)
}

func (s *QueryStmtContext) IdentifierOrNull() IIdentifierOrNullContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierOrNullContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrNullContext)
}

func (s *QueryStmtContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMICOLON, 0)
}

func (s *QueryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitQueryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) QueryStmt() (localctx IQueryStmtContext) {
	localctx = NewQueryStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ClickHouseParserRULE_queryStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(256)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserALTER, ClickHouseParserATTACH, ClickHouseParserCHECK, ClickHouseParserCREATE, ClickHouseParserDESC, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDROP, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserKILL, ClickHouseParserOPTIMIZE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserSELECT, ClickHouseParserSET, ClickHouseParserSHOW, ClickHouseParserSYSTEM, ClickHouseParserTRUNCATE, ClickHouseParserUSE, ClickHouseParserWATCH, ClickHouseParserWITH, ClickHouseParserLPAREN:
		{
			p.SetState(242)
			p.Query()
		}
		p.SetState(246)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserINTO {
			{
				p.SetState(243)
				p.Match(ClickHouseParserINTO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(244)
				p.Match(ClickHouseParserOUTFILE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(245)
				p.Match(ClickHouseParserSTRING_LITERAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(250)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFORMAT {
			{
				p.SetState(248)
				p.Match(ClickHouseParserFORMAT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(249)
				p.IdentifierOrNull()
			}

		}
		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserSEMICOLON {
			{
				p.SetState(252)
				p.Match(ClickHouseParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case ClickHouseParserINSERT:
		{
			p.SetState(255)
			p.InsertStmt()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(258)
		p.Match(ClickHouseParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AlterStmt() IAlterStmtContext
	AttachStmt() IAttachStmtContext
	CheckStmt() ICheckStmtContext
	CreateStmt() ICreateStmtContext
	DescribeStmt() IDescribeStmtContext
	DropStmt() IDropStmtContext
	ExistsStmt() IExistsStmtContext
	ExplainStmt() IExplainStmtContext
	KillStmt() IKillStmtContext
	OptimizeStmt() IOptimizeStmtContext
	RenameStmt() IRenameStmtContext
	SelectUnionStmt() ISelectUnionStmtContext
	SetStmt() ISetStmtContext
	ShowStmt() IShowStmtContext
	SystemStmt() ISystemStmtContext
	TruncateStmt() ITruncateStmtContext
	UseStmt() IUseStmtContext
	WatchStmt() IWatchStmtContext
	SelectStmt() ISelectStmtContext
	Ctes() ICtesContext

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_query
	return p
}

func InitEmptyQueryContext(p *QueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_query
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) AlterStmt() IAlterStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlterStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlterStmtContext)
}

func (s *QueryContext) AttachStmt() IAttachStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttachStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttachStmtContext)
}

func (s *QueryContext) CheckStmt() ICheckStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICheckStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICheckStmtContext)
}

func (s *QueryContext) CreateStmt() ICreateStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreateStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreateStmtContext)
}

func (s *QueryContext) DescribeStmt() IDescribeStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribeStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribeStmtContext)
}

func (s *QueryContext) DropStmt() IDropStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDropStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDropStmtContext)
}

func (s *QueryContext) ExistsStmt() IExistsStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExistsStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExistsStmtContext)
}

func (s *QueryContext) ExplainStmt() IExplainStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplainStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplainStmtContext)
}

func (s *QueryContext) KillStmt() IKillStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKillStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKillStmtContext)
}

func (s *QueryContext) OptimizeStmt() IOptimizeStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptimizeStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptimizeStmtContext)
}

func (s *QueryContext) RenameStmt() IRenameStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRenameStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRenameStmtContext)
}

func (s *QueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *QueryContext) SetStmt() ISetStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetStmtContext)
}

func (s *QueryContext) ShowStmt() IShowStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShowStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShowStmtContext)
}

func (s *QueryContext) SystemStmt() ISystemStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystemStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystemStmtContext)
}

func (s *QueryContext) TruncateStmt() ITruncateStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITruncateStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITruncateStmtContext)
}

func (s *QueryContext) UseStmt() IUseStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseStmtContext)
}

func (s *QueryContext) WatchStmt() IWatchStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWatchStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWatchStmtContext)
}

func (s *QueryContext) SelectStmt() ISelectStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *QueryContext) Ctes() ICtesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICtesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICtesContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ClickHouseParserRULE_query)
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(260)
			p.AlterStmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(261)
			p.AttachStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(262)
			p.CheckStmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(263)
			p.CreateStmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(264)
			p.DescribeStmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(265)
			p.DropStmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(266)
			p.ExistsStmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(267)
			p.ExplainStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(268)
			p.KillStmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(269)
			p.OptimizeStmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(270)
			p.RenameStmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(271)
			p.SelectUnionStmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(272)
			p.SetStmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(273)
			p.ShowStmt()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(274)
			p.SystemStmt()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(275)
			p.TruncateStmt()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(276)
			p.UseStmt()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(277)
			p.WatchStmt()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		p.SetState(279)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(278)
				p.Ctes()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(281)
			p.SelectStmt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICtesContext is an interface to support dynamic dispatch.
type ICtesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH() antlr.TerminalNode
	AllNamedQuery() []INamedQueryContext
	NamedQuery(i int) INamedQueryContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCtesContext differentiates from other interfaces.
	IsCtesContext()
}

type CtesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCtesContext() *CtesContext {
	var p = new(CtesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ctes
	return p
}

func InitEmptyCtesContext(p *CtesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ctes
}

func (*CtesContext) IsCtesContext() {}

func NewCtesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CtesContext {
	var p = new(CtesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_ctes

	return p
}

func (s *CtesContext) GetParser() antlr.Parser { return s.parser }

func (s *CtesContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *CtesContext) AllNamedQuery() []INamedQueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INamedQueryContext); ok {
			len++
		}
	}

	tst := make([]INamedQueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INamedQueryContext); ok {
			tst[i] = t.(INamedQueryContext)
			i++
		}
	}

	return tst
}

func (s *CtesContext) NamedQuery(i int) INamedQueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamedQueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamedQueryContext)
}

func (s *CtesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *CtesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *CtesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CtesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CtesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCtes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Ctes() (localctx ICtesContext) {
	localctx = NewCtesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ClickHouseParserRULE_ctes)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(284)
		p.Match(ClickHouseParserWITH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(285)
		p.NamedQuery()
	}
	p.SetState(290)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(286)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(287)
			p.NamedQuery()
		}

		p.SetState(292)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamedQueryContext is an interface to support dynamic dispatch.
type INamedQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Getter signatures
	AS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Query() IQueryContext
	RPAREN() antlr.TerminalNode
	Identifier() IIdentifierContext
	ColumnAliases() IColumnAliasesContext

	// IsNamedQueryContext differentiates from other interfaces.
	IsNamedQueryContext()
}

type NamedQueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyNamedQueryContext() *NamedQueryContext {
	var p = new(NamedQueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_namedQuery
	return p
}

func InitEmptyNamedQueryContext(p *NamedQueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_namedQuery
}

func (*NamedQueryContext) IsNamedQueryContext() {}

func NewNamedQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedQueryContext {
	var p = new(NamedQueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_namedQuery

	return p
}

func (s *NamedQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedQueryContext) GetName() IIdentifierContext { return s.name }

func (s *NamedQueryContext) SetName(v IIdentifierContext) { s.name = v }

func (s *NamedQueryContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *NamedQueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *NamedQueryContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *NamedQueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *NamedQueryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedQueryContext) ColumnAliases() IColumnAliasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnAliasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *NamedQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedQueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitNamedQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) NamedQuery() (localctx INamedQueryContext) {
	localctx = NewNamedQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ClickHouseParserRULE_namedQuery)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(293)

		var _x = p.Identifier()

		localctx.(*NamedQueryContext).name = _x
	}
	p.SetState(295)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserLPAREN {
		{
			p.SetState(294)
			p.ColumnAliases()
		}

	}
	{
		p.SetState(297)
		p.Match(ClickHouseParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(298)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(299)
		p.Query()
	}
	{
		p.SetState(300)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnAliasesContext is an interface to support dynamic dispatch.
type IColumnAliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnAliasesContext differentiates from other interfaces.
	IsColumnAliasesContext()
}

type ColumnAliasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnAliasesContext() *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnAliases
	return p
}

func InitEmptyColumnAliasesContext(p *ColumnAliasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnAliases
}

func (*ColumnAliasesContext) IsColumnAliasesContext() {}

func NewColumnAliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnAliases

	return p
}

func (s *ColumnAliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnAliasesContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnAliasesContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnAliasesContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnAliasesContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnAliasesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnAliasesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnAliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnAliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnAliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnAliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnAliases() (localctx IColumnAliasesContext) {
	localctx = NewColumnAliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ClickHouseParserRULE_columnAliases)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(302)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(303)
		p.Identifier()
	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(304)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(305)
			p.Identifier()
		}

		p.SetState(310)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(311)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlterStmtContext is an interface to support dynamic dispatch.
type IAlterStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAlterStmtContext differentiates from other interfaces.
	IsAlterStmtContext()
}

type AlterStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterStmtContext() *AlterStmtContext {
	var p = new(AlterStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alterStmt
	return p
}

func InitEmptyAlterStmtContext(p *AlterStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alterStmt
}

func (*AlterStmtContext) IsAlterStmtContext() {}

func NewAlterStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStmtContext {
	var p = new(AlterStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_alterStmt

	return p
}

func (s *AlterStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStmtContext) CopyAll(ctx *AlterStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *AlterStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterTableStmtContext struct {
	AlterStmtContext
}

func NewAlterTableStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableStmtContext {
	var p = new(AlterTableStmtContext)

	InitEmptyAlterStmtContext(&p.AlterStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterStmtContext))

	return p
}

func (s *AlterTableStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableStmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALTER, 0)
}

func (s *AlterTableStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *AlterTableStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *AlterTableStmtContext) AllAlterTableClause() []IAlterTableClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlterTableClauseContext); ok {
			len++
		}
	}

	tst := make([]IAlterTableClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlterTableClauseContext); ok {
			tst[i] = t.(IAlterTableClauseContext)
			i++
		}
	}

	return tst
}

func (s *AlterTableStmtContext) AlterTableClause(i int) IAlterTableClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlterTableClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlterTableClauseContext)
}

func (s *AlterTableStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *AlterTableStmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *AlterTableStmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *AlterTableStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AlterStmt() (localctx IAlterStmtContext) {
	localctx = NewAlterStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ClickHouseParserRULE_alterStmt)
	var _la int

	localctx = NewAlterTableStmtContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(313)
		p.Match(ClickHouseParserALTER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(314)
		p.Match(ClickHouseParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(315)
		p.TableIdentifier()
	}
	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserON {
		{
			p.SetState(316)
			p.ClusterClause()
		}

	}
	{
		p.SetState(319)
		p.AlterTableClause()
	}
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(320)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(321)
			p.AlterTableClause()
		}

		p.SetState(326)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlterTableClauseContext is an interface to support dynamic dispatch.
type IAlterTableClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAlterTableClauseContext differentiates from other interfaces.
	IsAlterTableClauseContext()
}

type AlterTableClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterTableClauseContext() *AlterTableClauseContext {
	var p = new(AlterTableClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alterTableClause
	return p
}

func InitEmptyAlterTableClauseContext(p *AlterTableClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alterTableClause
}

func (*AlterTableClauseContext) IsAlterTableClauseContext() {}

func NewAlterTableClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTableClauseContext {
	var p = new(AlterTableClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_alterTableClause

	return p
}

func (s *AlterTableClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTableClauseContext) CopyAll(ctx *AlterTableClauseContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *AlterTableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterTableClauseReplaceContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseReplaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseReplaceContext {
	var p = new(AlterTableClauseReplaceContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseReplaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseReplaceContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *AlterTableClauseReplaceContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseReplaceContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *AlterTableClauseReplaceContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *AlterTableClauseReplaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseReplace(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseModifyOrderByContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseModifyOrderByContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseModifyOrderByContext {
	var p = new(AlterTableClauseModifyOrderByContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseModifyOrderByContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseModifyOrderByContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *AlterTableClauseModifyOrderByContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *AlterTableClauseModifyOrderByContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *AlterTableClauseModifyOrderByContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *AlterTableClauseModifyOrderByContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseModifyOrderBy(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseUpdateContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseUpdateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseUpdateContext {
	var p = new(AlterTableClauseUpdateContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseUpdateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseUpdateContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUPDATE, 0)
}

func (s *AlterTableClauseUpdateContext) AssignmentExprList() IAssignmentExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExprListContext)
}

func (s *AlterTableClauseUpdateContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *AlterTableClauseUpdateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseUpdate(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseClearProjectionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseClearProjectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseClearProjectionContext {
	var p = new(AlterTableClauseClearProjectionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseClearProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseClearProjectionContext) CLEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLEAR, 0)
}

func (s *AlterTableClauseClearProjectionContext) PROJECTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPROJECTION, 0)
}

func (s *AlterTableClauseClearProjectionContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseClearProjectionContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseClearProjectionContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseClearProjectionContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *AlterTableClauseClearProjectionContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseClearProjectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseClearProjection(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseModifyRemoveContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseModifyRemoveContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseModifyRemoveContext {
	var p = new(AlterTableClauseModifyRemoveContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseModifyRemoveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseModifyRemoveContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *AlterTableClauseModifyRemoveContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseModifyRemoveContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseModifyRemoveContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREMOVE, 0)
}

func (s *AlterTableClauseModifyRemoveContext) TableColumnPropertyType() ITableColumnPropertyTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableColumnPropertyTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableColumnPropertyTypeContext)
}

func (s *AlterTableClauseModifyRemoveContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseModifyRemoveContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseModifyRemoveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseModifyRemove(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseDeleteContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseDeleteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseDeleteContext {
	var p = new(AlterTableClauseDeleteContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseDeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseDeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELETE, 0)
}

func (s *AlterTableClauseDeleteContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHERE, 0)
}

func (s *AlterTableClauseDeleteContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *AlterTableClauseDeleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseDelete(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseCommentContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseCommentContext {
	var p = new(AlterTableClauseCommentContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *AlterTableClauseCommentContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseCommentContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *AlterTableClauseCommentContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseCommentContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseDropColumnContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseDropColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseDropColumnContext {
	var p = new(AlterTableClauseDropColumnContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseDropColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseDropColumnContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *AlterTableClauseDropColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseDropColumnContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseDropColumnContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseDropColumnContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseDropColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseDropColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseDetachContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseDetachContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseDetachContext {
	var p = new(AlterTableClauseDetachContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseDetachContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseDetachContext) DETACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDETACH, 0)
}

func (s *AlterTableClauseDetachContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseDetachContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseDetach(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseAddIndexContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseAddIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseAddIndexContext {
	var p = new(AlterTableClauseAddIndexContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseAddIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseAddIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserADD, 0)
}

func (s *AlterTableClauseAddIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *AlterTableClauseAddIndexContext) TableIndexDfnt() ITableIndexDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIndexDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIndexDfntContext)
}

func (s *AlterTableClauseAddIndexContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseAddIndexContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *AlterTableClauseAddIndexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseAddIndexContext) AFTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAFTER, 0)
}

func (s *AlterTableClauseAddIndexContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseAddIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseAddIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseDropPartitionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseDropPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseDropPartitionContext {
	var p = new(AlterTableClauseDropPartitionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseDropPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseDropPartitionContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *AlterTableClauseDropPartitionContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseDropPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseDropPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseMaterializeIndexContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseMaterializeIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseMaterializeIndexContext {
	var p = new(AlterTableClauseMaterializeIndexContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseMaterializeIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseMaterializeIndexContext) MATERIALIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZE, 0)
}

func (s *AlterTableClauseMaterializeIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *AlterTableClauseMaterializeIndexContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseMaterializeIndexContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseMaterializeIndexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseMaterializeIndexContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *AlterTableClauseMaterializeIndexContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseMaterializeIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseMaterializeIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseMaterializeProjectionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseMaterializeProjectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseMaterializeProjectionContext {
	var p = new(AlterTableClauseMaterializeProjectionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseMaterializeProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseMaterializeProjectionContext) MATERIALIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZE, 0)
}

func (s *AlterTableClauseMaterializeProjectionContext) PROJECTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPROJECTION, 0)
}

func (s *AlterTableClauseMaterializeProjectionContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseMaterializeProjectionContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseMaterializeProjectionContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseMaterializeProjectionContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *AlterTableClauseMaterializeProjectionContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseMaterializeProjectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseMaterializeProjection(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseMovePartitionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseMovePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseMovePartitionContext {
	var p = new(AlterTableClauseMovePartitionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseMovePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseMovePartitionContext) MOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMOVE, 0)
}

func (s *AlterTableClauseMovePartitionContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseMovePartitionContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *AlterTableClauseMovePartitionContext) DISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISK, 0)
}

func (s *AlterTableClauseMovePartitionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *AlterTableClauseMovePartitionContext) VOLUME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVOLUME, 0)
}

func (s *AlterTableClauseMovePartitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *AlterTableClauseMovePartitionContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *AlterTableClauseMovePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseMovePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseRenameContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseRenameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseRenameContext {
	var p = new(AlterTableClauseRenameContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseRenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseRenameContext) RENAME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRENAME, 0)
}

func (s *AlterTableClauseRenameContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseRenameContext) AllNestedIdentifier() []INestedIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			len++
		}
	}

	tst := make([]INestedIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INestedIdentifierContext); ok {
			tst[i] = t.(INestedIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *AlterTableClauseRenameContext) NestedIdentifier(i int) INestedIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseRenameContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *AlterTableClauseRenameContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseRenameContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseRenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseRename(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseFreezePartitionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseFreezePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseFreezePartitionContext {
	var p = new(AlterTableClauseFreezePartitionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseFreezePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseFreezePartitionContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFREEZE, 0)
}

func (s *AlterTableClauseFreezePartitionContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseFreezePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseFreezePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseClearColumnContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseClearColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseClearColumnContext {
	var p = new(AlterTableClauseClearColumnContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseClearColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseClearColumnContext) CLEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLEAR, 0)
}

func (s *AlterTableClauseClearColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseClearColumnContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseClearColumnContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseClearColumnContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseClearColumnContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *AlterTableClauseClearColumnContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseClearColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseClearColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseModifyContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseModifyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseModifyContext {
	var p = new(AlterTableClauseModifyContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseModifyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseModifyContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *AlterTableClauseModifyContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseModifyContext) TableColumnDfnt() ITableColumnDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableColumnDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableColumnDfntContext)
}

func (s *AlterTableClauseModifyContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseModifyContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseModifyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseModify(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseClearIndexContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseClearIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseClearIndexContext {
	var p = new(AlterTableClauseClearIndexContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseClearIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseClearIndexContext) CLEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLEAR, 0)
}

func (s *AlterTableClauseClearIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *AlterTableClauseClearIndexContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseClearIndexContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseClearIndexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseClearIndexContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *AlterTableClauseClearIndexContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseClearIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseClearIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseRemoveTTLContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseRemoveTTLContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseRemoveTTLContext {
	var p = new(AlterTableClauseRemoveTTLContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseRemoveTTLContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseRemoveTTLContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREMOVE, 0)
}

func (s *AlterTableClauseRemoveTTLContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *AlterTableClauseRemoveTTLContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseRemoveTTL(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseModifyCodecContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseModifyCodecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseModifyCodecContext {
	var p = new(AlterTableClauseModifyCodecContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseModifyCodecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseModifyCodecContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *AlterTableClauseModifyCodecContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseModifyCodecContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseModifyCodecContext) CodecExpr() ICodecExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodecExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodecExprContext)
}

func (s *AlterTableClauseModifyCodecContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseModifyCodecContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseModifyCodecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseModifyCodec(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseAttachContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseAttachContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseAttachContext {
	var p = new(AlterTableClauseAttachContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseAttachContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseAttachContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *AlterTableClauseAttachContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *AlterTableClauseAttachContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *AlterTableClauseAttachContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *AlterTableClauseAttachContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseAttach(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseDropProjectionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseDropProjectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseDropProjectionContext {
	var p = new(AlterTableClauseDropProjectionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseDropProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseDropProjectionContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *AlterTableClauseDropProjectionContext) PROJECTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPROJECTION, 0)
}

func (s *AlterTableClauseDropProjectionContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseDropProjectionContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseDropProjectionContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseDropProjectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseDropProjection(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseDropIndexContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseDropIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseDropIndexContext {
	var p = new(AlterTableClauseDropIndexContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseDropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseDropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *AlterTableClauseDropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *AlterTableClauseDropIndexContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseDropIndexContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseDropIndexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseDropIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseDropIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseModifyCommentContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseModifyCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseModifyCommentContext {
	var p = new(AlterTableClauseModifyCommentContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseModifyCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseModifyCommentContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *AlterTableClauseModifyCommentContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseModifyCommentContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseModifyCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *AlterTableClauseModifyCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *AlterTableClauseModifyCommentContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseModifyCommentContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseModifyCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseModifyComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseModifyTTLContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseModifyTTLContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseModifyTTLContext {
	var p = new(AlterTableClauseModifyTTLContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseModifyTTLContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseModifyTTLContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *AlterTableClauseModifyTTLContext) TtlClause() ITtlClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITtlClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITtlClauseContext)
}

func (s *AlterTableClauseModifyTTLContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseModifyTTL(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseAddProjectionContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseAddProjectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseAddProjectionContext {
	var p = new(AlterTableClauseAddProjectionContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseAddProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseAddProjectionContext) ADD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserADD, 0)
}

func (s *AlterTableClauseAddProjectionContext) PROJECTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPROJECTION, 0)
}

func (s *AlterTableClauseAddProjectionContext) TableProjectionDfnt() ITableProjectionDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableProjectionDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableProjectionDfntContext)
}

func (s *AlterTableClauseAddProjectionContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseAddProjectionContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *AlterTableClauseAddProjectionContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseAddProjectionContext) AFTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAFTER, 0)
}

func (s *AlterTableClauseAddProjectionContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseAddProjectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseAddProjection(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterTableClauseAddColumnContext struct {
	AlterTableClauseContext
}

func NewAlterTableClauseAddColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterTableClauseAddColumnContext {
	var p = new(AlterTableClauseAddColumnContext)

	InitEmptyAlterTableClauseContext(&p.AlterTableClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*AlterTableClauseContext))

	return p
}

func (s *AlterTableClauseAddColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableClauseAddColumnContext) ADD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserADD, 0)
}

func (s *AlterTableClauseAddColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *AlterTableClauseAddColumnContext) TableColumnDfnt() ITableColumnDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableColumnDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableColumnDfntContext)
}

func (s *AlterTableClauseAddColumnContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *AlterTableClauseAddColumnContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *AlterTableClauseAddColumnContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *AlterTableClauseAddColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAFTER, 0)
}

func (s *AlterTableClauseAddColumnContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AlterTableClauseAddColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlterTableClauseAddColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AlterTableClause() (localctx IAlterTableClauseContext) {
	localctx = NewAlterTableClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ClickHouseParserRULE_alterTableClause)
	var _la int

	p.SetState(541)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterTableClauseAddColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(327)
			p.Match(ClickHouseParserADD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(328)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(332)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(329)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(330)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(331)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(334)
			p.TableColumnDfnt()
		}
		p.SetState(337)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserAFTER {
			{
				p.SetState(335)
				p.Match(ClickHouseParserAFTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(336)
				p.NestedIdentifier()
			}

		}

	case 2:
		localctx = NewAlterTableClauseAddIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(339)
			p.Match(ClickHouseParserADD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(340)
			p.Match(ClickHouseParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(344)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(341)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(342)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(343)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(346)
			p.TableIndexDfnt()
		}
		p.SetState(349)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserAFTER {
			{
				p.SetState(347)
				p.Match(ClickHouseParserAFTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(348)
				p.NestedIdentifier()
			}

		}

	case 3:
		localctx = NewAlterTableClauseAddProjectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(351)
			p.Match(ClickHouseParserADD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(352)
			p.Match(ClickHouseParserPROJECTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(356)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(353)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(354)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(355)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(358)
			p.TableProjectionDfnt()
		}
		p.SetState(361)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserAFTER {
			{
				p.SetState(359)
				p.Match(ClickHouseParserAFTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(360)
				p.NestedIdentifier()
			}

		}

	case 4:
		localctx = NewAlterTableClauseAttachContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(363)
			p.Match(ClickHouseParserATTACH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(364)
			p.PartitionClause()
		}
		p.SetState(367)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFROM {
			{
				p.SetState(365)
				p.Match(ClickHouseParserFROM)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(366)
				p.TableIdentifier()
			}

		}

	case 5:
		localctx = NewAlterTableClauseClearColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(369)
			p.Match(ClickHouseParserCLEAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(370)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(373)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(371)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(372)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(375)
			p.NestedIdentifier()
		}
		p.SetState(378)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserIN {
			{
				p.SetState(376)
				p.Match(ClickHouseParserIN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(377)
				p.PartitionClause()
			}

		}

	case 6:
		localctx = NewAlterTableClauseClearIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(380)
			p.Match(ClickHouseParserCLEAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(381)
			p.Match(ClickHouseParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(384)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(382)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(383)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(386)
			p.NestedIdentifier()
		}
		p.SetState(389)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserIN {
			{
				p.SetState(387)
				p.Match(ClickHouseParserIN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(388)
				p.PartitionClause()
			}

		}

	case 7:
		localctx = NewAlterTableClauseClearProjectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(391)
			p.Match(ClickHouseParserCLEAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(392)
			p.Match(ClickHouseParserPROJECTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(395)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(393)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(394)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(397)
			p.NestedIdentifier()
		}
		p.SetState(400)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserIN {
			{
				p.SetState(398)
				p.Match(ClickHouseParserIN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(399)
				p.PartitionClause()
			}

		}

	case 8:
		localctx = NewAlterTableClauseCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(402)
			p.Match(ClickHouseParserCOMMENT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(403)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(406)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(404)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(405)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(408)
			p.NestedIdentifier()
		}
		{
			p.SetState(409)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewAlterTableClauseDeleteContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(411)
			p.Match(ClickHouseParserDELETE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(412)
			p.Match(ClickHouseParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(413)
			p.columnExpr(0)
		}

	case 10:
		localctx = NewAlterTableClauseDetachContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(414)
			p.Match(ClickHouseParserDETACH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(415)
			p.PartitionClause()
		}

	case 11:
		localctx = NewAlterTableClauseDropColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(416)
			p.Match(ClickHouseParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(417)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(420)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(418)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(419)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(422)
			p.NestedIdentifier()
		}

	case 12:
		localctx = NewAlterTableClauseDropIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(423)
			p.Match(ClickHouseParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(424)
			p.Match(ClickHouseParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(425)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(426)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(429)
			p.NestedIdentifier()
		}

	case 13:
		localctx = NewAlterTableClauseDropProjectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(430)
			p.Match(ClickHouseParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(431)
			p.Match(ClickHouseParserPROJECTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(434)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(432)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(433)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(436)
			p.NestedIdentifier()
		}

	case 14:
		localctx = NewAlterTableClauseDropPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(437)
			p.Match(ClickHouseParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(438)
			p.PartitionClause()
		}

	case 15:
		localctx = NewAlterTableClauseFreezePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(439)
			p.Match(ClickHouseParserFREEZE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(441)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserPARTITION {
			{
				p.SetState(440)
				p.PartitionClause()
			}

		}

	case 16:
		localctx = NewAlterTableClauseMaterializeIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(443)
			p.Match(ClickHouseParserMATERIALIZE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(444)
			p.Match(ClickHouseParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(447)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(445)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(446)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(449)
			p.NestedIdentifier()
		}
		p.SetState(452)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserIN {
			{
				p.SetState(450)
				p.Match(ClickHouseParserIN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(451)
				p.PartitionClause()
			}

		}

	case 17:
		localctx = NewAlterTableClauseMaterializeProjectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(454)
			p.Match(ClickHouseParserMATERIALIZE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(455)
			p.Match(ClickHouseParserPROJECTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(458)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(456)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(457)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(460)
			p.NestedIdentifier()
		}
		p.SetState(463)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserIN {
			{
				p.SetState(461)
				p.Match(ClickHouseParserIN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(462)
				p.PartitionClause()
			}

		}

	case 18:
		localctx = NewAlterTableClauseModifyCodecContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(465)
			p.Match(ClickHouseParserMODIFY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(466)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(469)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(467)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(468)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(471)
			p.NestedIdentifier()
		}
		{
			p.SetState(472)
			p.CodecExpr()
		}

	case 19:
		localctx = NewAlterTableClauseModifyCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(474)
			p.Match(ClickHouseParserMODIFY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(475)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(476)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(477)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(480)
			p.NestedIdentifier()
		}
		{
			p.SetState(481)
			p.Match(ClickHouseParserCOMMENT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(482)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 20:
		localctx = NewAlterTableClauseModifyRemoveContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(484)
			p.Match(ClickHouseParserMODIFY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(485)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(488)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(486)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(487)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(490)
			p.NestedIdentifier()
		}
		{
			p.SetState(491)
			p.Match(ClickHouseParserREMOVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(492)
			p.TableColumnPropertyType()
		}

	case 21:
		localctx = NewAlterTableClauseModifyContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(494)
			p.Match(ClickHouseParserMODIFY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(495)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(498)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(496)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(497)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(500)
			p.TableColumnDfnt()
		}

	case 22:
		localctx = NewAlterTableClauseModifyOrderByContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(501)
			p.Match(ClickHouseParserMODIFY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(502)
			p.Match(ClickHouseParserORDER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(503)
			p.Match(ClickHouseParserBY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(504)
			p.columnExpr(0)
		}

	case 23:
		localctx = NewAlterTableClauseModifyTTLContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(505)
			p.Match(ClickHouseParserMODIFY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(506)
			p.TtlClause()
		}

	case 24:
		localctx = NewAlterTableClauseMovePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(507)
			p.Match(ClickHouseParserMOVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(508)
			p.PartitionClause()
		}
		p.SetState(518)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(509)
				p.Match(ClickHouseParserTO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(510)
				p.Match(ClickHouseParserDISK)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(511)
				p.Match(ClickHouseParserSTRING_LITERAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 2:
			{
				p.SetState(512)
				p.Match(ClickHouseParserTO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(513)
				p.Match(ClickHouseParserVOLUME)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(514)
				p.Match(ClickHouseParserSTRING_LITERAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 3:
			{
				p.SetState(515)
				p.Match(ClickHouseParserTO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(516)
				p.Match(ClickHouseParserTABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(517)
				p.TableIdentifier()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 25:
		localctx = NewAlterTableClauseRemoveTTLContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(520)
			p.Match(ClickHouseParserREMOVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(521)
			p.Match(ClickHouseParserTTL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 26:
		localctx = NewAlterTableClauseRenameContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(522)
			p.Match(ClickHouseParserRENAME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(523)
			p.Match(ClickHouseParserCOLUMN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(526)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(524)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(525)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(528)
			p.NestedIdentifier()
		}
		{
			p.SetState(529)
			p.Match(ClickHouseParserTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(530)
			p.NestedIdentifier()
		}

	case 27:
		localctx = NewAlterTableClauseReplaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(532)
			p.Match(ClickHouseParserREPLACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(533)
			p.PartitionClause()
		}
		{
			p.SetState(534)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(535)
			p.TableIdentifier()
		}

	case 28:
		localctx = NewAlterTableClauseUpdateContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(537)
			p.Match(ClickHouseParserUPDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(538)
			p.AssignmentExprList()
		}
		{
			p.SetState(539)
			p.WhereClause()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentExprListContext is an interface to support dynamic dispatch.
type IAssignmentExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAssignmentExpr() []IAssignmentExprContext
	AssignmentExpr(i int) IAssignmentExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsAssignmentExprListContext differentiates from other interfaces.
	IsAssignmentExprListContext()
}

type AssignmentExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExprListContext() *AssignmentExprListContext {
	var p = new(AssignmentExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentExprList
	return p
}

func InitEmptyAssignmentExprListContext(p *AssignmentExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentExprList
}

func (*AssignmentExprListContext) IsAssignmentExprListContext() {}

func NewAssignmentExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExprListContext {
	var p = new(AssignmentExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_assignmentExprList

	return p
}

func (s *AssignmentExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExprListContext) AllAssignmentExpr() []IAssignmentExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAssignmentExprContext); ok {
			len++
		}
	}

	tst := make([]IAssignmentExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAssignmentExprContext); ok {
			tst[i] = t.(IAssignmentExprContext)
			i++
		}
	}

	return tst
}

func (s *AssignmentExprListContext) AssignmentExpr(i int) IAssignmentExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExprContext)
}

func (s *AssignmentExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *AssignmentExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *AssignmentExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAssignmentExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AssignmentExprList() (localctx IAssignmentExprListContext) {
	localctx = NewAssignmentExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ClickHouseParserRULE_assignmentExprList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.AssignmentExpr()
	}
	p.SetState(548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(544)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(545)
			p.AssignmentExpr()
		}

		p.SetState(550)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentExprContext is an interface to support dynamic dispatch.
type IAssignmentExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	EQ_SINGLE() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsAssignmentExprContext differentiates from other interfaces.
	IsAssignmentExprContext()
}

type AssignmentExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExprContext() *AssignmentExprContext {
	var p = new(AssignmentExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentExpr
	return p
}

func InitEmptyAssignmentExprContext(p *AssignmentExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentExpr
}

func (*AssignmentExprContext) IsAssignmentExprContext() {}

func NewAssignmentExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExprContext {
	var p = new(AssignmentExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_assignmentExpr

	return p
}

func (s *AssignmentExprContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExprContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *AssignmentExprContext) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *AssignmentExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *AssignmentExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAssignmentExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AssignmentExpr() (localctx IAssignmentExprContext) {
	localctx = NewAssignmentExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ClickHouseParserRULE_assignmentExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(551)
		p.NestedIdentifier()
	}
	{
		p.SetState(552)
		p.Match(ClickHouseParserEQ_SINGLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(553)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableColumnPropertyTypeContext is an interface to support dynamic dispatch.
type ITableColumnPropertyTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALIAS() antlr.TerminalNode
	CODEC() antlr.TerminalNode
	COMMENT() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	MATERIALIZED() antlr.TerminalNode
	TTL() antlr.TerminalNode

	// IsTableColumnPropertyTypeContext differentiates from other interfaces.
	IsTableColumnPropertyTypeContext()
}

type TableColumnPropertyTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableColumnPropertyTypeContext() *TableColumnPropertyTypeContext {
	var p = new(TableColumnPropertyTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableColumnPropertyType
	return p
}

func InitEmptyTableColumnPropertyTypeContext(p *TableColumnPropertyTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableColumnPropertyType
}

func (*TableColumnPropertyTypeContext) IsTableColumnPropertyTypeContext() {}

func NewTableColumnPropertyTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableColumnPropertyTypeContext {
	var p = new(TableColumnPropertyTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableColumnPropertyType

	return p
}

func (s *TableColumnPropertyTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TableColumnPropertyTypeContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALIAS, 0)
}

func (s *TableColumnPropertyTypeContext) CODEC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCODEC, 0)
}

func (s *TableColumnPropertyTypeContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *TableColumnPropertyTypeContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEFAULT, 0)
}

func (s *TableColumnPropertyTypeContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZED, 0)
}

func (s *TableColumnPropertyTypeContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *TableColumnPropertyTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableColumnPropertyTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableColumnPropertyTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableColumnPropertyType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableColumnPropertyType() (localctx ITableColumnPropertyTypeContext) {
	localctx = NewTableColumnPropertyTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ClickHouseParserRULE_tableColumnPropertyType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(555)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&275028901896) != 0) || _la == ClickHouseParserMATERIALIZED || _la == ClickHouseParserTTL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartitionClauseContext is an interface to support dynamic dispatch.
type IPartitionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION() antlr.TerminalNode
	ColumnExpr() IColumnExprContext
	ID() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode

	// IsPartitionClauseContext differentiates from other interfaces.
	IsPartitionClauseContext()
}

type PartitionClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionClauseContext() *PartitionClauseContext {
	var p = new(PartitionClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_partitionClause
	return p
}

func InitEmptyPartitionClauseContext(p *PartitionClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_partitionClause
}

func (*PartitionClauseContext) IsPartitionClauseContext() {}

func NewPartitionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionClauseContext {
	var p = new(PartitionClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_partitionClause

	return p
}

func (s *PartitionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionClauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *PartitionClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *PartitionClauseContext) ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserID, 0)
}

func (s *PartitionClauseContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *PartitionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitPartitionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) PartitionClause() (localctx IPartitionClauseContext) {
	localctx = NewPartitionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ClickHouseParserRULE_partitionClause)
	p.SetState(562)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(557)
			p.Match(ClickHouseParserPARTITION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(558)
			p.columnExpr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(559)
			p.Match(ClickHouseParserPARTITION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(560)
			p.Match(ClickHouseParserID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(561)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttachStmtContext is an interface to support dynamic dispatch.
type IAttachStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAttachStmtContext differentiates from other interfaces.
	IsAttachStmtContext()
}

type AttachStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttachStmtContext() *AttachStmtContext {
	var p = new(AttachStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_attachStmt
	return p
}

func InitEmptyAttachStmtContext(p *AttachStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_attachStmt
}

func (*AttachStmtContext) IsAttachStmtContext() {}

func NewAttachStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttachStmtContext {
	var p = new(AttachStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_attachStmt

	return p
}

func (s *AttachStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *AttachStmtContext) CopyAll(ctx *AttachStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *AttachStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttachStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AttachDictionaryStmtContext struct {
	AttachStmtContext
}

func NewAttachDictionaryStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AttachDictionaryStmtContext {
	var p = new(AttachDictionaryStmtContext)

	InitEmptyAttachStmtContext(&p.AttachStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*AttachStmtContext))

	return p
}

func (s *AttachDictionaryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttachDictionaryStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *AttachDictionaryStmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *AttachDictionaryStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *AttachDictionaryStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *AttachDictionaryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAttachDictionaryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AttachStmt() (localctx IAttachStmtContext) {
	localctx = NewAttachStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ClickHouseParserRULE_attachStmt)
	var _la int

	localctx = NewAttachDictionaryStmtContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)
		p.Match(ClickHouseParserATTACH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(565)
		p.Match(ClickHouseParserDICTIONARY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(566)
		p.TableIdentifier()
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserON {
		{
			p.SetState(567)
			p.ClusterClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICheckStmtContext is an interface to support dynamic dispatch.
type ICheckStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CHECK() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	TableIdentifier() ITableIdentifierContext
	PartitionClause() IPartitionClauseContext

	// IsCheckStmtContext differentiates from other interfaces.
	IsCheckStmtContext()
}

type CheckStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckStmtContext() *CheckStmtContext {
	var p = new(CheckStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_checkStmt
	return p
}

func InitEmptyCheckStmtContext(p *CheckStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_checkStmt
}

func (*CheckStmtContext) IsCheckStmtContext() {}

func NewCheckStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckStmtContext {
	var p = new(CheckStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_checkStmt

	return p
}

func (s *CheckStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckStmtContext) CHECK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCHECK, 0)
}

func (s *CheckStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *CheckStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *CheckStmtContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *CheckStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCheckStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) CheckStmt() (localctx ICheckStmtContext) {
	localctx = NewCheckStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ClickHouseParserRULE_checkStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(570)
		p.Match(ClickHouseParserCHECK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(571)
		p.Match(ClickHouseParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(572)
		p.TableIdentifier()
	}
	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserPARTITION {
		{
			p.SetState(573)
			p.PartitionClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreateStmtContext is an interface to support dynamic dispatch.
type ICreateStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsCreateStmtContext differentiates from other interfaces.
	IsCreateStmtContext()
}

type CreateStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateStmtContext() *CreateStmtContext {
	var p = new(CreateStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_createStmt
	return p
}

func InitEmptyCreateStmtContext(p *CreateStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_createStmt
}

func (*CreateStmtContext) IsCreateStmtContext() {}

func NewCreateStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateStmtContext {
	var p = new(CreateStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_createStmt

	return p
}

func (s *CreateStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateStmtContext) CopyAll(ctx *CreateStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *CreateStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CreateViewStmtContext struct {
	CreateStmtContext
}

func NewCreateViewStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateViewStmtContext {
	var p = new(CreateViewStmtContext)

	InitEmptyCreateStmtContext(&p.CreateStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateStmtContext))

	return p
}

func (s *CreateViewStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateViewStmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *CreateViewStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *CreateViewStmtContext) SubqueryClause() ISubqueryClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryClauseContext)
}

func (s *CreateViewStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *CreateViewStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *CreateViewStmtContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *CreateViewStmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *CreateViewStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *CreateViewStmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *CreateViewStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *CreateViewStmtContext) UuidClause() IUuidClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUuidClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUuidClauseContext)
}

func (s *CreateViewStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *CreateViewStmtContext) TableSchemaClause() ITableSchemaClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableSchemaClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableSchemaClauseContext)
}

func (s *CreateViewStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCreateViewStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateDictionaryStmtContext struct {
	CreateStmtContext
}

func NewCreateDictionaryStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateDictionaryStmtContext {
	var p = new(CreateDictionaryStmtContext)

	InitEmptyCreateStmtContext(&p.CreateStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateStmtContext))

	return p
}

func (s *CreateDictionaryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDictionaryStmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *CreateDictionaryStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *CreateDictionaryStmtContext) DictionarySchemaClause() IDictionarySchemaClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionarySchemaClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionarySchemaClauseContext)
}

func (s *CreateDictionaryStmtContext) DictionaryEngineClause() IDictionaryEngineClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionaryEngineClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionaryEngineClauseContext)
}

func (s *CreateDictionaryStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *CreateDictionaryStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *CreateDictionaryStmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *CreateDictionaryStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *CreateDictionaryStmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *CreateDictionaryStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *CreateDictionaryStmtContext) UuidClause() IUuidClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUuidClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUuidClauseContext)
}

func (s *CreateDictionaryStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *CreateDictionaryStmtContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *CreateDictionaryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCreateDictionaryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateDatabaseStmtContext struct {
	CreateStmtContext
}

func NewCreateDatabaseStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateDatabaseStmtContext {
	var p = new(CreateDatabaseStmtContext)

	InitEmptyCreateStmtContext(&p.CreateStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateStmtContext))

	return p
}

func (s *CreateDatabaseStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseStmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *CreateDatabaseStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *CreateDatabaseStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *CreateDatabaseStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *CreateDatabaseStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *CreateDatabaseStmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *CreateDatabaseStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *CreateDatabaseStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *CreateDatabaseStmtContext) EngineExpr() IEngineExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEngineExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEngineExprContext)
}

func (s *CreateDatabaseStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCreateDatabaseStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateLiveViewStmtContext struct {
	CreateStmtContext
}

func NewCreateLiveViewStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateLiveViewStmtContext {
	var p = new(CreateLiveViewStmtContext)

	InitEmptyCreateStmtContext(&p.CreateStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateStmtContext))

	return p
}

func (s *CreateLiveViewStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateLiveViewStmtContext) LIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIVE, 0)
}

func (s *CreateLiveViewStmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *CreateLiveViewStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *CreateLiveViewStmtContext) SubqueryClause() ISubqueryClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryClauseContext)
}

func (s *CreateLiveViewStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *CreateLiveViewStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *CreateLiveViewStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *CreateLiveViewStmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *CreateLiveViewStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *CreateLiveViewStmtContext) UuidClause() IUuidClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUuidClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUuidClauseContext)
}

func (s *CreateLiveViewStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *CreateLiveViewStmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *CreateLiveViewStmtContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMEOUT, 0)
}

func (s *CreateLiveViewStmtContext) DestinationClause() IDestinationClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDestinationClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDestinationClauseContext)
}

func (s *CreateLiveViewStmtContext) TableSchemaClause() ITableSchemaClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableSchemaClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableSchemaClauseContext)
}

func (s *CreateLiveViewStmtContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *CreateLiveViewStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCreateLiveViewStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateMaterializedViewStmtContext struct {
	CreateStmtContext
}

func NewCreateMaterializedViewStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateMaterializedViewStmtContext {
	var p = new(CreateMaterializedViewStmtContext)

	InitEmptyCreateStmtContext(&p.CreateStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateStmtContext))

	return p
}

func (s *CreateMaterializedViewStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateMaterializedViewStmtContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZED, 0)
}

func (s *CreateMaterializedViewStmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *CreateMaterializedViewStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *CreateMaterializedViewStmtContext) SubqueryClause() ISubqueryClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryClauseContext)
}

func (s *CreateMaterializedViewStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *CreateMaterializedViewStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *CreateMaterializedViewStmtContext) DestinationClause() IDestinationClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDestinationClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDestinationClauseContext)
}

func (s *CreateMaterializedViewStmtContext) EngineClause() IEngineClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEngineClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEngineClauseContext)
}

func (s *CreateMaterializedViewStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *CreateMaterializedViewStmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *CreateMaterializedViewStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *CreateMaterializedViewStmtContext) UuidClause() IUuidClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUuidClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUuidClauseContext)
}

func (s *CreateMaterializedViewStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *CreateMaterializedViewStmtContext) TableSchemaClause() ITableSchemaClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableSchemaClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableSchemaClauseContext)
}

func (s *CreateMaterializedViewStmtContext) POPULATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPOPULATE, 0)
}

func (s *CreateMaterializedViewStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCreateMaterializedViewStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateTableStmtContext struct {
	CreateStmtContext
}

func NewCreateTableStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateTableStmtContext {
	var p = new(CreateTableStmtContext)

	InitEmptyCreateStmtContext(&p.CreateStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateStmtContext))

	return p
}

func (s *CreateTableStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *CreateTableStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *CreateTableStmtContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *CreateTableStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *CreateTableStmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *CreateTableStmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *CreateTableStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *CreateTableStmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *CreateTableStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *CreateTableStmtContext) UuidClause() IUuidClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUuidClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUuidClauseContext)
}

func (s *CreateTableStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *CreateTableStmtContext) TableSchemaClause() ITableSchemaClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableSchemaClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableSchemaClauseContext)
}

func (s *CreateTableStmtContext) EngineClause() IEngineClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEngineClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEngineClauseContext)
}

func (s *CreateTableStmtContext) SubqueryClause() ISubqueryClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubqueryClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubqueryClauseContext)
}

func (s *CreateTableStmtContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *CreateTableStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCreateTableStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) CreateStmt() (localctx ICreateStmtContext) {
	localctx = NewCreateStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ClickHouseParserRULE_createStmt)
	var _la int

	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCreateDatabaseStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(576)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserATTACH || _la == ClickHouseParserCREATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(577)
			p.Match(ClickHouseParserDATABASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(581)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(578)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(579)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(580)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(583)
			p.DatabaseIdentifier()
		}
		p.SetState(585)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(584)
				p.ClusterClause()
			}

		}
		p.SetState(588)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserENGINE {
			{
				p.SetState(587)
				p.EngineExpr()
			}

		}

	case 2:
		localctx = NewCreateDictionaryStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(597)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ClickHouseParserATTACH:
			{
				p.SetState(590)
				p.Match(ClickHouseParserATTACH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserCREATE:
			{
				p.SetState(591)
				p.Match(ClickHouseParserCREATE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(594)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOR {
				{
					p.SetState(592)
					p.Match(ClickHouseParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(593)
					p.Match(ClickHouseParserREPLACE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ClickHouseParserREPLACE:
			{
				p.SetState(596)
				p.Match(ClickHouseParserREPLACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(599)
			p.Match(ClickHouseParserDICTIONARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(603)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(600)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(601)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(602)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(605)
			p.TableIdentifier()
		}
		p.SetState(607)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserUUID {
			{
				p.SetState(606)
				p.UuidClause()
			}

		}
		p.SetState(610)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(609)
				p.ClusterClause()
			}

		}
		{
			p.SetState(612)
			p.DictionarySchemaClause()
		}
		{
			p.SetState(613)
			p.DictionaryEngineClause()
		}

	case 3:
		localctx = NewCreateLiveViewStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(615)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserATTACH || _la == ClickHouseParserCREATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(616)
			p.Match(ClickHouseParserLIVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(617)
			p.Match(ClickHouseParserVIEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(621)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(618)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(619)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(620)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(623)
			p.TableIdentifier()
		}
		p.SetState(625)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserUUID {
			{
				p.SetState(624)
				p.UuidClause()
			}

		}
		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(627)
				p.ClusterClause()
			}

		}
		p.SetState(635)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserWITH {
			{
				p.SetState(630)
				p.Match(ClickHouseParserWITH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(631)
				p.Match(ClickHouseParserTIMEOUT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(633)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserDECIMAL_LITERAL {
				{
					p.SetState(632)
					p.Match(ClickHouseParserDECIMAL_LITERAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(638)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserTO {
			{
				p.SetState(637)
				p.DestinationClause()
			}

		}
		p.SetState(641)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(640)
				p.TableSchemaClause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(643)
			p.SubqueryClause()
		}

	case 4:
		localctx = NewCreateMaterializedViewStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(645)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserATTACH || _la == ClickHouseParserCREATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(646)
			p.Match(ClickHouseParserMATERIALIZED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(647)
			p.Match(ClickHouseParserVIEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(651)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(648)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(649)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(650)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(653)
			p.TableIdentifier()
		}
		p.SetState(655)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserUUID {
			{
				p.SetState(654)
				p.UuidClause()
			}

		}
		p.SetState(658)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(657)
				p.ClusterClause()
			}

		}
		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserAS || _la == ClickHouseParserLPAREN {
			{
				p.SetState(660)
				p.TableSchemaClause()
			}

		}
		p.SetState(668)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ClickHouseParserTO:
			{
				p.SetState(663)
				p.DestinationClause()
			}

		case ClickHouseParserENGINE:
			{
				p.SetState(664)
				p.EngineClause()
			}
			p.SetState(666)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserPOPULATE {
				{
					p.SetState(665)
					p.Match(ClickHouseParserPOPULATE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(670)
			p.SubqueryClause()
		}

	case 5:
		localctx = NewCreateTableStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ClickHouseParserATTACH:
			{
				p.SetState(672)
				p.Match(ClickHouseParserATTACH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserCREATE:
			{
				p.SetState(673)
				p.Match(ClickHouseParserCREATE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(676)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOR {
				{
					p.SetState(674)
					p.Match(ClickHouseParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(675)
					p.Match(ClickHouseParserREPLACE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ClickHouseParserREPLACE:
			{
				p.SetState(678)
				p.Match(ClickHouseParserREPLACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(682)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserTEMPORARY {
			{
				p.SetState(681)
				p.Match(ClickHouseParserTEMPORARY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(684)
			p.Match(ClickHouseParserTABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(688)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(685)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(686)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(687)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(690)
			p.TableIdentifier()
		}
		p.SetState(692)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserUUID {
			{
				p.SetState(691)
				p.UuidClause()
			}

		}
		p.SetState(695)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(694)
				p.ClusterClause()
			}

		}
		p.SetState(698)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(697)
				p.TableSchemaClause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserENGINE {
			{
				p.SetState(700)
				p.EngineClause()
			}

		}
		p.SetState(704)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserAS {
			{
				p.SetState(703)
				p.SubqueryClause()
			}

		}

	case 6:
		localctx = NewCreateViewStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(706)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserATTACH || _la == ClickHouseParserCREATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserOR {
			{
				p.SetState(707)
				p.Match(ClickHouseParserOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(708)
				p.Match(ClickHouseParserREPLACE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(711)
			p.Match(ClickHouseParserVIEW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(715)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(712)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(713)
				p.Match(ClickHouseParserNOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(714)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(717)
			p.TableIdentifier()
		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserUUID {
			{
				p.SetState(718)
				p.UuidClause()
			}

		}
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(721)
				p.ClusterClause()
			}

		}
		p.SetState(725)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(724)
				p.TableSchemaClause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(727)
			p.SubqueryClause()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDictionarySchemaClauseContext is an interface to support dynamic dispatch.
type IDictionarySchemaClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllDictionaryAttrDfnt() []IDictionaryAttrDfntContext
	DictionaryAttrDfnt(i int) IDictionaryAttrDfntContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsDictionarySchemaClauseContext differentiates from other interfaces.
	IsDictionarySchemaClauseContext()
}

type DictionarySchemaClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionarySchemaClauseContext() *DictionarySchemaClauseContext {
	var p = new(DictionarySchemaClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionarySchemaClause
	return p
}

func InitEmptyDictionarySchemaClauseContext(p *DictionarySchemaClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionarySchemaClause
}

func (*DictionarySchemaClauseContext) IsDictionarySchemaClauseContext() {}

func NewDictionarySchemaClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionarySchemaClauseContext {
	var p = new(DictionarySchemaClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dictionarySchemaClause

	return p
}

func (s *DictionarySchemaClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionarySchemaClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *DictionarySchemaClauseContext) AllDictionaryAttrDfnt() []IDictionaryAttrDfntContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDictionaryAttrDfntContext); ok {
			len++
		}
	}

	tst := make([]IDictionaryAttrDfntContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDictionaryAttrDfntContext); ok {
			tst[i] = t.(IDictionaryAttrDfntContext)
			i++
		}
	}

	return tst
}

func (s *DictionarySchemaClauseContext) DictionaryAttrDfnt(i int) IDictionaryAttrDfntContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionaryAttrDfntContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionaryAttrDfntContext)
}

func (s *DictionarySchemaClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *DictionarySchemaClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *DictionarySchemaClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *DictionarySchemaClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionarySchemaClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionarySchemaClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDictionarySchemaClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DictionarySchemaClause() (localctx IDictionarySchemaClauseContext) {
	localctx = NewDictionarySchemaClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ClickHouseParserRULE_dictionarySchemaClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(732)
		p.DictionaryAttrDfnt()
	}
	p.SetState(737)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(733)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(734)
			p.DictionaryAttrDfnt()
		}

		p.SetState(739)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(740)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDictionaryAttrDfntContext is an interface to support dynamic dispatch.
type IDictionaryAttrDfntContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAttrs returns the attrs attribute.
	GetAttrs() map[string]bool

	// SetAttrs sets the attrs attribute.
	SetAttrs(map[string]bool)

	// Getter signatures
	Identifier() IIdentifierContext
	ColumnTypeExpr() IColumnTypeExprContext
	AllDEFAULT() []antlr.TerminalNode
	DEFAULT(i int) antlr.TerminalNode
	AllLiteral() []ILiteralContext
	Literal(i int) ILiteralContext
	AllEXPRESSION() []antlr.TerminalNode
	EXPRESSION(i int) antlr.TerminalNode
	AllColumnExpr() []IColumnExprContext
	ColumnExpr(i int) IColumnExprContext
	AllHIERARCHICAL() []antlr.TerminalNode
	HIERARCHICAL(i int) antlr.TerminalNode
	AllINJECTIVE() []antlr.TerminalNode
	INJECTIVE(i int) antlr.TerminalNode
	AllIS_OBJECT_ID() []antlr.TerminalNode
	IS_OBJECT_ID(i int) antlr.TerminalNode

	// IsDictionaryAttrDfntContext differentiates from other interfaces.
	IsDictionaryAttrDfntContext()
}

type DictionaryAttrDfntContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	attrs  map[string]bool
}

func NewEmptyDictionaryAttrDfntContext() *DictionaryAttrDfntContext {
	var p = new(DictionaryAttrDfntContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryAttrDfnt
	return p
}

func InitEmptyDictionaryAttrDfntContext(p *DictionaryAttrDfntContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryAttrDfnt
}

func (*DictionaryAttrDfntContext) IsDictionaryAttrDfntContext() {}

func NewDictionaryAttrDfntContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryAttrDfntContext {
	var p = new(DictionaryAttrDfntContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dictionaryAttrDfnt

	return p
}

func (s *DictionaryAttrDfntContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryAttrDfntContext) GetAttrs() map[string]bool { return s.attrs }

func (s *DictionaryAttrDfntContext) SetAttrs(v map[string]bool) { s.attrs = v }

func (s *DictionaryAttrDfntContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DictionaryAttrDfntContext) ColumnTypeExpr() IColumnTypeExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *DictionaryAttrDfntContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserDEFAULT)
}

func (s *DictionaryAttrDfntContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEFAULT, i)
}

func (s *DictionaryAttrDfntContext) AllLiteral() []ILiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILiteralContext); ok {
			len++
		}
	}

	tst := make([]ILiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILiteralContext); ok {
			tst[i] = t.(ILiteralContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryAttrDfntContext) Literal(i int) ILiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *DictionaryAttrDfntContext) AllEXPRESSION() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserEXPRESSION)
}

func (s *DictionaryAttrDfntContext) EXPRESSION(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPRESSION, i)
}

func (s *DictionaryAttrDfntContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryAttrDfntContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *DictionaryAttrDfntContext) AllHIERARCHICAL() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserHIERARCHICAL)
}

func (s *DictionaryAttrDfntContext) HIERARCHICAL(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHIERARCHICAL, i)
}

func (s *DictionaryAttrDfntContext) AllINJECTIVE() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserINJECTIVE)
}

func (s *DictionaryAttrDfntContext) INJECTIVE(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINJECTIVE, i)
}

func (s *DictionaryAttrDfntContext) AllIS_OBJECT_ID() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserIS_OBJECT_ID)
}

func (s *DictionaryAttrDfntContext) IS_OBJECT_ID(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS_OBJECT_ID, i)
}

func (s *DictionaryAttrDfntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryAttrDfntContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryAttrDfntContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDictionaryAttrDfnt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DictionaryAttrDfnt() (localctx IDictionaryAttrDfntContext) {
	localctx = NewDictionaryAttrDfntContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ClickHouseParserRULE_dictionaryAttrDfnt)
	var _alt int

	p.EnterOuterAlt(localctx, 1)

	localctx.(*DictionaryAttrDfntContext).attrs = make(map[string]bool)

	{
		p.SetState(743)
		p.Identifier()
	}
	{
		p.SetState(744)
		p.ColumnTypeExpr()
	}
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(764)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) {
			case 1:
				p.SetState(745)

				if !(!localctx.(*DictionaryAttrDfntContext).attrs["default"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$attrs[\"default\"]", ""))
					goto errorExit
				}
				{
					p.SetState(746)
					p.Match(ClickHouseParserDEFAULT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(747)
					p.Literal()
				}
				localctx.(*DictionaryAttrDfntContext).attrs["default"] = true

			case 2:
				p.SetState(750)

				if !(!localctx.(*DictionaryAttrDfntContext).attrs["expression"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$attrs[\"expression\"]", ""))
					goto errorExit
				}
				{
					p.SetState(751)
					p.Match(ClickHouseParserEXPRESSION)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(752)
					p.columnExpr(0)
				}
				localctx.(*DictionaryAttrDfntContext).attrs["expression"] = true

			case 3:
				p.SetState(755)

				if !(!localctx.(*DictionaryAttrDfntContext).attrs["hierarchical"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$attrs[\"hierarchical\"]", ""))
					goto errorExit
				}
				{
					p.SetState(756)
					p.Match(ClickHouseParserHIERARCHICAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				localctx.(*DictionaryAttrDfntContext).attrs["hierarchical"] = true

			case 4:
				p.SetState(758)

				if !(!localctx.(*DictionaryAttrDfntContext).attrs["injective"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$attrs[\"injective\"]", ""))
					goto errorExit
				}
				{
					p.SetState(759)
					p.Match(ClickHouseParserINJECTIVE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				localctx.(*DictionaryAttrDfntContext).attrs["injective"] = true

			case 5:
				p.SetState(761)

				if !(!localctx.(*DictionaryAttrDfntContext).attrs["is_object_id"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$attrs[\"is_object_id\"]", ""))
					goto errorExit
				}
				{
					p.SetState(762)
					p.Match(ClickHouseParserIS_OBJECT_ID)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				localctx.(*DictionaryAttrDfntContext).attrs["is_object_id"] = true

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(768)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDictionaryEngineClauseContext is an interface to support dynamic dispatch.
type IDictionaryEngineClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClauses returns the clauses attribute.
	GetClauses() map[string]bool

	// SetClauses sets the clauses attribute.
	SetClauses(map[string]bool)

	// Getter signatures
	DictionaryPrimaryKeyClause() IDictionaryPrimaryKeyClauseContext
	AllSourceClause() []ISourceClauseContext
	SourceClause(i int) ISourceClauseContext
	AllLifetimeClause() []ILifetimeClauseContext
	LifetimeClause(i int) ILifetimeClauseContext
	AllLayoutClause() []ILayoutClauseContext
	LayoutClause(i int) ILayoutClauseContext
	AllRangeClause() []IRangeClauseContext
	RangeClause(i int) IRangeClauseContext
	AllDictionarySettingsClause() []IDictionarySettingsClauseContext
	DictionarySettingsClause(i int) IDictionarySettingsClauseContext

	// IsDictionaryEngineClauseContext differentiates from other interfaces.
	IsDictionaryEngineClauseContext()
}

type DictionaryEngineClauseContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	clauses map[string]bool
}

func NewEmptyDictionaryEngineClauseContext() *DictionaryEngineClauseContext {
	var p = new(DictionaryEngineClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryEngineClause
	return p
}

func InitEmptyDictionaryEngineClauseContext(p *DictionaryEngineClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryEngineClause
}

func (*DictionaryEngineClauseContext) IsDictionaryEngineClauseContext() {}

func NewDictionaryEngineClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryEngineClauseContext {
	var p = new(DictionaryEngineClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dictionaryEngineClause

	return p
}

func (s *DictionaryEngineClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryEngineClauseContext) GetClauses() map[string]bool { return s.clauses }

func (s *DictionaryEngineClauseContext) SetClauses(v map[string]bool) { s.clauses = v }

func (s *DictionaryEngineClauseContext) DictionaryPrimaryKeyClause() IDictionaryPrimaryKeyClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionaryPrimaryKeyClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionaryPrimaryKeyClauseContext)
}

func (s *DictionaryEngineClauseContext) AllSourceClause() []ISourceClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISourceClauseContext); ok {
			len++
		}
	}

	tst := make([]ISourceClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISourceClauseContext); ok {
			tst[i] = t.(ISourceClauseContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryEngineClauseContext) SourceClause(i int) ISourceClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISourceClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISourceClauseContext)
}

func (s *DictionaryEngineClauseContext) AllLifetimeClause() []ILifetimeClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILifetimeClauseContext); ok {
			len++
		}
	}

	tst := make([]ILifetimeClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILifetimeClauseContext); ok {
			tst[i] = t.(ILifetimeClauseContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryEngineClauseContext) LifetimeClause(i int) ILifetimeClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILifetimeClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILifetimeClauseContext)
}

func (s *DictionaryEngineClauseContext) AllLayoutClause() []ILayoutClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILayoutClauseContext); ok {
			len++
		}
	}

	tst := make([]ILayoutClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILayoutClauseContext); ok {
			tst[i] = t.(ILayoutClauseContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryEngineClauseContext) LayoutClause(i int) ILayoutClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILayoutClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILayoutClauseContext)
}

func (s *DictionaryEngineClauseContext) AllRangeClause() []IRangeClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRangeClauseContext); ok {
			len++
		}
	}

	tst := make([]IRangeClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRangeClauseContext); ok {
			tst[i] = t.(IRangeClauseContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryEngineClauseContext) RangeClause(i int) IRangeClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeClauseContext)
}

func (s *DictionaryEngineClauseContext) AllDictionarySettingsClause() []IDictionarySettingsClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDictionarySettingsClauseContext); ok {
			len++
		}
	}

	tst := make([]IDictionarySettingsClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDictionarySettingsClauseContext); ok {
			tst[i] = t.(IDictionarySettingsClauseContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryEngineClauseContext) DictionarySettingsClause(i int) IDictionarySettingsClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionarySettingsClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionarySettingsClauseContext)
}

func (s *DictionaryEngineClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryEngineClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryEngineClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDictionaryEngineClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DictionaryEngineClause() (localctx IDictionaryEngineClauseContext) {
	localctx = NewDictionaryEngineClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ClickHouseParserRULE_dictionaryEngineClause)
	var _alt int

	p.EnterOuterAlt(localctx, 1)

	localctx.(*DictionaryEngineClauseContext).clauses = make(map[string]bool)

	p.SetState(771)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(770)
			p.DictionaryPrimaryKeyClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(795)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(793)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext()) {
			case 1:
				p.SetState(773)

				if !(!localctx.(*DictionaryEngineClauseContext).clauses["source"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"source\"]", ""))
					goto errorExit
				}
				{
					p.SetState(774)
					p.SourceClause()
				}
				localctx.(*DictionaryEngineClauseContext).clauses["source"] = true

			case 2:
				p.SetState(777)

				if !(!localctx.(*DictionaryEngineClauseContext).clauses["lifetime"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"lifetime\"]", ""))
					goto errorExit
				}
				{
					p.SetState(778)
					p.LifetimeClause()
				}
				localctx.(*DictionaryEngineClauseContext).clauses["lifetime"] = true

			case 3:
				p.SetState(781)

				if !(!localctx.(*DictionaryEngineClauseContext).clauses["layout"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"layout\"]", ""))
					goto errorExit
				}
				{
					p.SetState(782)
					p.LayoutClause()
				}
				localctx.(*DictionaryEngineClauseContext).clauses["layout"] = true

			case 4:
				p.SetState(785)

				if !(!localctx.(*DictionaryEngineClauseContext).clauses["range"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"range\"]", ""))
					goto errorExit
				}
				{
					p.SetState(786)
					p.RangeClause()
				}
				localctx.(*DictionaryEngineClauseContext).clauses["range"] = true

			case 5:
				p.SetState(789)

				if !(!localctx.(*DictionaryEngineClauseContext).clauses["settings"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"settings\"]", ""))
					goto errorExit
				}
				{
					p.SetState(790)
					p.DictionarySettingsClause()
				}
				localctx.(*DictionaryEngineClauseContext).clauses["settings"] = true

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(797)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDictionaryPrimaryKeyClauseContext is an interface to support dynamic dispatch.
type IDictionaryPrimaryKeyClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY() antlr.TerminalNode
	KEY() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsDictionaryPrimaryKeyClauseContext differentiates from other interfaces.
	IsDictionaryPrimaryKeyClauseContext()
}

type DictionaryPrimaryKeyClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryPrimaryKeyClauseContext() *DictionaryPrimaryKeyClauseContext {
	var p = new(DictionaryPrimaryKeyClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryPrimaryKeyClause
	return p
}

func InitEmptyDictionaryPrimaryKeyClauseContext(p *DictionaryPrimaryKeyClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryPrimaryKeyClause
}

func (*DictionaryPrimaryKeyClauseContext) IsDictionaryPrimaryKeyClauseContext() {}

func NewDictionaryPrimaryKeyClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryPrimaryKeyClauseContext {
	var p = new(DictionaryPrimaryKeyClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dictionaryPrimaryKeyClause

	return p
}

func (s *DictionaryPrimaryKeyClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryPrimaryKeyClauseContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRIMARY, 0)
}

func (s *DictionaryPrimaryKeyClauseContext) KEY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKEY, 0)
}

func (s *DictionaryPrimaryKeyClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *DictionaryPrimaryKeyClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryPrimaryKeyClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryPrimaryKeyClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDictionaryPrimaryKeyClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DictionaryPrimaryKeyClause() (localctx IDictionaryPrimaryKeyClauseContext) {
	localctx = NewDictionaryPrimaryKeyClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ClickHouseParserRULE_dictionaryPrimaryKeyClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(798)
		p.Match(ClickHouseParserPRIMARY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(799)
		p.Match(ClickHouseParserKEY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(800)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDictionaryArgExprContext is an interface to support dynamic dispatch.
type IDictionaryArgExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Literal() ILiteralContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode

	// IsDictionaryArgExprContext differentiates from other interfaces.
	IsDictionaryArgExprContext()
}

type DictionaryArgExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryArgExprContext() *DictionaryArgExprContext {
	var p = new(DictionaryArgExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryArgExpr
	return p
}

func InitEmptyDictionaryArgExprContext(p *DictionaryArgExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionaryArgExpr
}

func (*DictionaryArgExprContext) IsDictionaryArgExprContext() {}

func NewDictionaryArgExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryArgExprContext {
	var p = new(DictionaryArgExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dictionaryArgExpr

	return p
}

func (s *DictionaryArgExprContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryArgExprContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *DictionaryArgExprContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DictionaryArgExprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *DictionaryArgExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *DictionaryArgExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *DictionaryArgExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryArgExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryArgExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDictionaryArgExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DictionaryArgExpr() (localctx IDictionaryArgExprContext) {
	localctx = NewDictionaryArgExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ClickHouseParserRULE_dictionaryArgExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(802)
		p.Identifier()
	}
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDAY, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserHOUR, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMINUTE, ClickHouseParserMODIFY, ClickHouseParserMONTH, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserQUARTER, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSECOND, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWEEK, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserYEAR, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE, ClickHouseParserIDENTIFIER:
		{
			p.SetState(803)
			p.Identifier()
		}
		p.SetState(806)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserLPAREN {
			{
				p.SetState(804)
				p.Match(ClickHouseParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(805)
				p.Match(ClickHouseParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case ClickHouseParserINF, ClickHouseParserNAN_SQL, ClickHouseParserNULL_SQL, ClickHouseParserFLOATING_LITERAL, ClickHouseParserOCTAL_LITERAL, ClickHouseParserDECIMAL_LITERAL, ClickHouseParserHEXADECIMAL_LITERAL, ClickHouseParserSTRING_LITERAL, ClickHouseParserDASH, ClickHouseParserDOT, ClickHouseParserPLUS:
		{
			p.SetState(808)
			p.Literal()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISourceClauseContext is an interface to support dynamic dispatch.
type ISourceClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SOURCE() antlr.TerminalNode
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	Identifier() IIdentifierContext
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	AllDictionaryArgExpr() []IDictionaryArgExprContext
	DictionaryArgExpr(i int) IDictionaryArgExprContext

	// IsSourceClauseContext differentiates from other interfaces.
	IsSourceClauseContext()
}

type SourceClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceClauseContext() *SourceClauseContext {
	var p = new(SourceClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sourceClause
	return p
}

func InitEmptySourceClauseContext(p *SourceClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sourceClause
}

func (*SourceClauseContext) IsSourceClauseContext() {}

func NewSourceClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceClauseContext {
	var p = new(SourceClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_sourceClause

	return p
}

func (s *SourceClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceClauseContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSOURCE, 0)
}

func (s *SourceClauseContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserLPAREN)
}

func (s *SourceClauseContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, i)
}

func (s *SourceClauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SourceClauseContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserRPAREN)
}

func (s *SourceClauseContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, i)
}

func (s *SourceClauseContext) AllDictionaryArgExpr() []IDictionaryArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDictionaryArgExprContext); ok {
			len++
		}
	}

	tst := make([]IDictionaryArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDictionaryArgExprContext); ok {
			tst[i] = t.(IDictionaryArgExprContext)
			i++
		}
	}

	return tst
}

func (s *SourceClauseContext) DictionaryArgExpr(i int) IDictionaryArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionaryArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionaryArgExprContext)
}

func (s *SourceClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSourceClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SourceClause() (localctx ISourceClauseContext) {
	localctx = NewSourceClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ClickHouseParserRULE_sourceClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(811)
		p.Match(ClickHouseParserSOURCE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(812)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(813)
		p.Identifier()
	}
	{
		p.SetState(814)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(818)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-2)) & ^0x3f) == 0 && ((int64(1)<<(_la-2))&-1) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&-633318697631745) != 0) || ((int64((_la-131)) & ^0x3f) == 0 && ((int64(1)<<(_la-131))&4611686018427387903) != 0) {
		{
			p.SetState(815)
			p.DictionaryArgExpr()
		}

		p.SetState(820)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(821)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(822)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILifetimeClauseContext is an interface to support dynamic dispatch.
type ILifetimeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIFETIME() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllDECIMAL_LITERAL() []antlr.TerminalNode
	DECIMAL_LITERAL(i int) antlr.TerminalNode
	MIN() antlr.TerminalNode
	MAX() antlr.TerminalNode

	// IsLifetimeClauseContext differentiates from other interfaces.
	IsLifetimeClauseContext()
}

type LifetimeClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLifetimeClauseContext() *LifetimeClauseContext {
	var p = new(LifetimeClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_lifetimeClause
	return p
}

func InitEmptyLifetimeClauseContext(p *LifetimeClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_lifetimeClause
}

func (*LifetimeClauseContext) IsLifetimeClauseContext() {}

func NewLifetimeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LifetimeClauseContext {
	var p = new(LifetimeClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_lifetimeClause

	return p
}

func (s *LifetimeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LifetimeClauseContext) LIFETIME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIFETIME, 0)
}

func (s *LifetimeClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *LifetimeClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *LifetimeClauseContext) AllDECIMAL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserDECIMAL_LITERAL)
}

func (s *LifetimeClauseContext) DECIMAL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, i)
}

func (s *LifetimeClauseContext) MIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMIN, 0)
}

func (s *LifetimeClauseContext) MAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMAX, 0)
}

func (s *LifetimeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LifetimeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LifetimeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLifetimeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LifetimeClause() (localctx ILifetimeClauseContext) {
	localctx = NewLifetimeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ClickHouseParserRULE_lifetimeClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(824)
		p.Match(ClickHouseParserLIFETIME)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(825)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserDECIMAL_LITERAL:
		{
			p.SetState(826)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserMIN:
		{
			p.SetState(827)
			p.Match(ClickHouseParserMIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(828)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(829)
			p.Match(ClickHouseParserMAX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(830)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserMAX:
		{
			p.SetState(831)
			p.Match(ClickHouseParserMAX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(832)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(833)
			p.Match(ClickHouseParserMIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(834)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(837)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILayoutClauseContext is an interface to support dynamic dispatch.
type ILayoutClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LAYOUT() antlr.TerminalNode
	AllLPAREN() []antlr.TerminalNode
	LPAREN(i int) antlr.TerminalNode
	Identifier() IIdentifierContext
	AllRPAREN() []antlr.TerminalNode
	RPAREN(i int) antlr.TerminalNode
	AllDictionaryArgExpr() []IDictionaryArgExprContext
	DictionaryArgExpr(i int) IDictionaryArgExprContext

	// IsLayoutClauseContext differentiates from other interfaces.
	IsLayoutClauseContext()
}

type LayoutClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLayoutClauseContext() *LayoutClauseContext {
	var p = new(LayoutClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_layoutClause
	return p
}

func InitEmptyLayoutClauseContext(p *LayoutClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_layoutClause
}

func (*LayoutClauseContext) IsLayoutClauseContext() {}

func NewLayoutClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LayoutClauseContext {
	var p = new(LayoutClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_layoutClause

	return p
}

func (s *LayoutClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LayoutClauseContext) LAYOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAYOUT, 0)
}

func (s *LayoutClauseContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserLPAREN)
}

func (s *LayoutClauseContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, i)
}

func (s *LayoutClauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LayoutClauseContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserRPAREN)
}

func (s *LayoutClauseContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, i)
}

func (s *LayoutClauseContext) AllDictionaryArgExpr() []IDictionaryArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDictionaryArgExprContext); ok {
			len++
		}
	}

	tst := make([]IDictionaryArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDictionaryArgExprContext); ok {
			tst[i] = t.(IDictionaryArgExprContext)
			i++
		}
	}

	return tst
}

func (s *LayoutClauseContext) DictionaryArgExpr(i int) IDictionaryArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictionaryArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictionaryArgExprContext)
}

func (s *LayoutClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LayoutClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LayoutClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLayoutClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LayoutClause() (localctx ILayoutClauseContext) {
	localctx = NewLayoutClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ClickHouseParserRULE_layoutClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(839)
		p.Match(ClickHouseParserLAYOUT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(840)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(841)
		p.Identifier()
	}
	{
		p.SetState(842)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(846)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-2)) & ^0x3f) == 0 && ((int64(1)<<(_la-2))&-1) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&-633318697631745) != 0) || ((int64((_la-131)) & ^0x3f) == 0 && ((int64(1)<<(_la-131))&4611686018427387903) != 0) {
		{
			p.SetState(843)
			p.DictionaryArgExpr()
		}

		p.SetState(848)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(849)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(850)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRangeClauseContext is an interface to support dynamic dispatch.
type IRangeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	MIN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	MAX() antlr.TerminalNode

	// IsRangeClauseContext differentiates from other interfaces.
	IsRangeClauseContext()
}

type RangeClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeClauseContext() *RangeClauseContext {
	var p = new(RangeClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_rangeClause
	return p
}

func InitEmptyRangeClauseContext(p *RangeClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_rangeClause
}

func (*RangeClauseContext) IsRangeClauseContext() {}

func NewRangeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeClauseContext {
	var p = new(RangeClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_rangeClause

	return p
}

func (s *RangeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeClauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRANGE, 0)
}

func (s *RangeClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *RangeClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *RangeClauseContext) MIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMIN, 0)
}

func (s *RangeClauseContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *RangeClauseContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RangeClauseContext) MAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMAX, 0)
}

func (s *RangeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitRangeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) RangeClause() (localctx IRangeClauseContext) {
	localctx = NewRangeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ClickHouseParserRULE_rangeClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(852)
		p.Match(ClickHouseParserRANGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(853)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(864)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserMIN:
		{
			p.SetState(854)
			p.Match(ClickHouseParserMIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(855)
			p.Identifier()
		}
		{
			p.SetState(856)
			p.Match(ClickHouseParserMAX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(857)
			p.Identifier()
		}

	case ClickHouseParserMAX:
		{
			p.SetState(859)
			p.Match(ClickHouseParserMAX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(860)
			p.Identifier()
		}
		{
			p.SetState(861)
			p.Match(ClickHouseParserMIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(862)
			p.Identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(866)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDictionarySettingsClauseContext is an interface to support dynamic dispatch.
type IDictionarySettingsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SETTINGS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	SettingExprList() ISettingExprListContext
	RPAREN() antlr.TerminalNode

	// IsDictionarySettingsClauseContext differentiates from other interfaces.
	IsDictionarySettingsClauseContext()
}

type DictionarySettingsClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionarySettingsClauseContext() *DictionarySettingsClauseContext {
	var p = new(DictionarySettingsClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionarySettingsClause
	return p
}

func InitEmptyDictionarySettingsClauseContext(p *DictionarySettingsClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dictionarySettingsClause
}

func (*DictionarySettingsClauseContext) IsDictionarySettingsClauseContext() {}

func NewDictionarySettingsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionarySettingsClauseContext {
	var p = new(DictionarySettingsClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dictionarySettingsClause

	return p
}

func (s *DictionarySettingsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionarySettingsClauseContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSETTINGS, 0)
}

func (s *DictionarySettingsClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *DictionarySettingsClauseContext) SettingExprList() ISettingExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprListContext)
}

func (s *DictionarySettingsClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *DictionarySettingsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionarySettingsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionarySettingsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDictionarySettingsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DictionarySettingsClause() (localctx IDictionarySettingsClauseContext) {
	localctx = NewDictionarySettingsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ClickHouseParserRULE_dictionarySettingsClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(868)
		p.Match(ClickHouseParserSETTINGS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(869)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(870)
		p.SettingExprList()
	}
	{
		p.SetState(871)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClusterClauseContext is an interface to support dynamic dispatch.
type IClusterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	CLUSTER() antlr.TerminalNode
	Identifier() IIdentifierContext
	STRING_LITERAL() antlr.TerminalNode

	// IsClusterClauseContext differentiates from other interfaces.
	IsClusterClauseContext()
}

type ClusterClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClusterClauseContext() *ClusterClauseContext {
	var p = new(ClusterClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_clusterClause
	return p
}

func InitEmptyClusterClauseContext(p *ClusterClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_clusterClause
}

func (*ClusterClauseContext) IsClusterClauseContext() {}

func NewClusterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClusterClauseContext {
	var p = new(ClusterClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_clusterClause

	return p
}

func (s *ClusterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ClusterClauseContext) ON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserON, 0)
}

func (s *ClusterClauseContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLUSTER, 0)
}

func (s *ClusterClauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ClusterClauseContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ClusterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClusterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClusterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitClusterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ClusterClause() (localctx IClusterClauseContext) {
	localctx = NewClusterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ClickHouseParserRULE_clusterClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(873)
		p.Match(ClickHouseParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(874)
		p.Match(ClickHouseParserCLUSTER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDAY, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserHOUR, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMINUTE, ClickHouseParserMODIFY, ClickHouseParserMONTH, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserQUARTER, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSECOND, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWEEK, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserYEAR, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE, ClickHouseParserIDENTIFIER:
		{
			p.SetState(875)
			p.Identifier()
		}

	case ClickHouseParserSTRING_LITERAL:
		{
			p.SetState(876)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUuidClauseContext is an interface to support dynamic dispatch.
type IUuidClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UUID() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode

	// IsUuidClauseContext differentiates from other interfaces.
	IsUuidClauseContext()
}

type UuidClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUuidClauseContext() *UuidClauseContext {
	var p = new(UuidClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_uuidClause
	return p
}

func InitEmptyUuidClauseContext(p *UuidClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_uuidClause
}

func (*UuidClauseContext) IsUuidClauseContext() {}

func NewUuidClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UuidClauseContext {
	var p = new(UuidClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_uuidClause

	return p
}

func (s *UuidClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *UuidClauseContext) UUID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUUID, 0)
}

func (s *UuidClauseContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *UuidClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UuidClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UuidClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitUuidClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) UuidClause() (localctx IUuidClauseContext) {
	localctx = NewUuidClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ClickHouseParserRULE_uuidClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(879)
		p.Match(ClickHouseParserUUID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(880)
		p.Match(ClickHouseParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDestinationClauseContext is an interface to support dynamic dispatch.
type IDestinationClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TO() antlr.TerminalNode
	TableIdentifier() ITableIdentifierContext

	// IsDestinationClauseContext differentiates from other interfaces.
	IsDestinationClauseContext()
}

type DestinationClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDestinationClauseContext() *DestinationClauseContext {
	var p = new(DestinationClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_destinationClause
	return p
}

func InitEmptyDestinationClauseContext(p *DestinationClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_destinationClause
}

func (*DestinationClauseContext) IsDestinationClauseContext() {}

func NewDestinationClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DestinationClauseContext {
	var p = new(DestinationClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_destinationClause

	return p
}

func (s *DestinationClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DestinationClauseContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *DestinationClauseContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *DestinationClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DestinationClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DestinationClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDestinationClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DestinationClause() (localctx IDestinationClauseContext) {
	localctx = NewDestinationClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ClickHouseParserRULE_destinationClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(882)
		p.Match(ClickHouseParserTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(883)
		p.TableIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubqueryClauseContext is an interface to support dynamic dispatch.
type ISubqueryClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS() antlr.TerminalNode
	SelectUnionStmt() ISelectUnionStmtContext

	// IsSubqueryClauseContext differentiates from other interfaces.
	IsSubqueryClauseContext()
}

type SubqueryClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryClauseContext() *SubqueryClauseContext {
	var p = new(SubqueryClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_subqueryClause
	return p
}

func InitEmptySubqueryClauseContext(p *SubqueryClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_subqueryClause
}

func (*SubqueryClauseContext) IsSubqueryClauseContext() {}

func NewSubqueryClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryClauseContext {
	var p = new(SubqueryClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_subqueryClause

	return p
}

func (s *SubqueryClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *SubqueryClauseContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *SubqueryClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubqueryClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSubqueryClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SubqueryClause() (localctx ISubqueryClauseContext) {
	localctx = NewSubqueryClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ClickHouseParserRULE_subqueryClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(885)
		p.Match(ClickHouseParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(886)
		p.SelectUnionStmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableSchemaClauseContext is an interface to support dynamic dispatch.
type ITableSchemaClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableSchemaClauseContext differentiates from other interfaces.
	IsTableSchemaClauseContext()
}

type TableSchemaClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSchemaClauseContext() *TableSchemaClauseContext {
	var p = new(TableSchemaClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableSchemaClause
	return p
}

func InitEmptyTableSchemaClauseContext(p *TableSchemaClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableSchemaClause
}

func (*TableSchemaClauseContext) IsTableSchemaClauseContext() {}

func NewTableSchemaClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSchemaClauseContext {
	var p = new(TableSchemaClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableSchemaClause

	return p
}

func (s *TableSchemaClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSchemaClauseContext) CopyAll(ctx *TableSchemaClauseContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableSchemaClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSchemaClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SchemaAsTableClauseContext struct {
	TableSchemaClauseContext
}

func NewSchemaAsTableClauseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaAsTableClauseContext {
	var p = new(SchemaAsTableClauseContext)

	InitEmptyTableSchemaClauseContext(&p.TableSchemaClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableSchemaClauseContext))

	return p
}

func (s *SchemaAsTableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaAsTableClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *SchemaAsTableClauseContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *SchemaAsTableClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSchemaAsTableClause(s)

	default:
		return t.VisitChildren(s)
	}
}

type SchemaAsFunctionClauseContext struct {
	TableSchemaClauseContext
}

func NewSchemaAsFunctionClauseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaAsFunctionClauseContext {
	var p = new(SchemaAsFunctionClauseContext)

	InitEmptyTableSchemaClauseContext(&p.TableSchemaClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableSchemaClauseContext))

	return p
}

func (s *SchemaAsFunctionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaAsFunctionClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *SchemaAsFunctionClauseContext) TableFunctionExpr() ITableFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableFunctionExprContext)
}

func (s *SchemaAsFunctionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSchemaAsFunctionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

type SchemaDescriptionClauseContext struct {
	TableSchemaClauseContext
}

func NewSchemaDescriptionClauseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaDescriptionClauseContext {
	var p = new(SchemaDescriptionClauseContext)

	InitEmptyTableSchemaClauseContext(&p.TableSchemaClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableSchemaClauseContext))

	return p
}

func (s *SchemaDescriptionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaDescriptionClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *SchemaDescriptionClauseContext) AllTableElementExpr() []ITableElementExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITableElementExprContext); ok {
			len++
		}
	}

	tst := make([]ITableElementExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITableElementExprContext); ok {
			tst[i] = t.(ITableElementExprContext)
			i++
		}
	}

	return tst
}

func (s *SchemaDescriptionClauseContext) TableElementExpr(i int) ITableElementExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableElementExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableElementExprContext)
}

func (s *SchemaDescriptionClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *SchemaDescriptionClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *SchemaDescriptionClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *SchemaDescriptionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSchemaDescriptionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableSchemaClause() (localctx ITableSchemaClauseContext) {
	localctx = NewTableSchemaClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ClickHouseParserRULE_tableSchemaClause)
	var _la int

	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSchemaDescriptionClauseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(888)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(889)
			p.TableElementExpr()
		}
		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(890)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(891)
				p.TableElementExpr()
			}

			p.SetState(896)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(897)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewSchemaAsTableClauseContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(899)
			p.Match(ClickHouseParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(900)
			p.TableIdentifier()
		}

	case 3:
		localctx = NewSchemaAsFunctionClauseContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(901)
			p.Match(ClickHouseParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(902)
			p.TableFunctionExpr()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEngineClauseContext is an interface to support dynamic dispatch.
type IEngineClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClauses returns the clauses attribute.
	GetClauses() map[string]bool

	// SetClauses sets the clauses attribute.
	SetClauses(map[string]bool)

	// Getter signatures
	EngineExpr() IEngineExprContext
	AllOrderByClause() []IOrderByClauseContext
	OrderByClause(i int) IOrderByClauseContext
	AllPartitionByClause() []IPartitionByClauseContext
	PartitionByClause(i int) IPartitionByClauseContext
	AllPrimaryKeyClause() []IPrimaryKeyClauseContext
	PrimaryKeyClause(i int) IPrimaryKeyClauseContext
	AllSampleByClause() []ISampleByClauseContext
	SampleByClause(i int) ISampleByClauseContext
	AllTtlClause() []ITtlClauseContext
	TtlClause(i int) ITtlClauseContext
	AllSettingsClause() []ISettingsClauseContext
	SettingsClause(i int) ISettingsClauseContext

	// IsEngineClauseContext differentiates from other interfaces.
	IsEngineClauseContext()
}

type EngineClauseContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	clauses map[string]bool
}

func NewEmptyEngineClauseContext() *EngineClauseContext {
	var p = new(EngineClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_engineClause
	return p
}

func InitEmptyEngineClauseContext(p *EngineClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_engineClause
}

func (*EngineClauseContext) IsEngineClauseContext() {}

func NewEngineClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EngineClauseContext {
	var p = new(EngineClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_engineClause

	return p
}

func (s *EngineClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *EngineClauseContext) GetClauses() map[string]bool { return s.clauses }

func (s *EngineClauseContext) SetClauses(v map[string]bool) { s.clauses = v }

func (s *EngineClauseContext) EngineExpr() IEngineExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEngineExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEngineExprContext)
}

func (s *EngineClauseContext) AllOrderByClause() []IOrderByClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderByClauseContext); ok {
			len++
		}
	}

	tst := make([]IOrderByClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderByClauseContext); ok {
			tst[i] = t.(IOrderByClauseContext)
			i++
		}
	}

	return tst
}

func (s *EngineClauseContext) OrderByClause(i int) IOrderByClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderByClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *EngineClauseContext) AllPartitionByClause() []IPartitionByClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPartitionByClauseContext); ok {
			len++
		}
	}

	tst := make([]IPartitionByClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPartitionByClauseContext); ok {
			tst[i] = t.(IPartitionByClauseContext)
			i++
		}
	}

	return tst
}

func (s *EngineClauseContext) PartitionByClause(i int) IPartitionByClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionByClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionByClauseContext)
}

func (s *EngineClauseContext) AllPrimaryKeyClause() []IPrimaryKeyClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimaryKeyClauseContext); ok {
			len++
		}
	}

	tst := make([]IPrimaryKeyClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimaryKeyClauseContext); ok {
			tst[i] = t.(IPrimaryKeyClauseContext)
			i++
		}
	}

	return tst
}

func (s *EngineClauseContext) PrimaryKeyClause(i int) IPrimaryKeyClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryKeyClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryKeyClauseContext)
}

func (s *EngineClauseContext) AllSampleByClause() []ISampleByClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISampleByClauseContext); ok {
			len++
		}
	}

	tst := make([]ISampleByClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISampleByClauseContext); ok {
			tst[i] = t.(ISampleByClauseContext)
			i++
		}
	}

	return tst
}

func (s *EngineClauseContext) SampleByClause(i int) ISampleByClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISampleByClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISampleByClauseContext)
}

func (s *EngineClauseContext) AllTtlClause() []ITtlClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITtlClauseContext); ok {
			len++
		}
	}

	tst := make([]ITtlClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITtlClauseContext); ok {
			tst[i] = t.(ITtlClauseContext)
			i++
		}
	}

	return tst
}

func (s *EngineClauseContext) TtlClause(i int) ITtlClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITtlClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITtlClauseContext)
}

func (s *EngineClauseContext) AllSettingsClause() []ISettingsClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISettingsClauseContext); ok {
			len++
		}
	}

	tst := make([]ISettingsClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISettingsClauseContext); ok {
			tst[i] = t.(ISettingsClauseContext)
			i++
		}
	}

	return tst
}

func (s *EngineClauseContext) SettingsClause(i int) ISettingsClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingsClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingsClauseContext)
}

func (s *EngineClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EngineClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EngineClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitEngineClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) EngineClause() (localctx IEngineClauseContext) {
	localctx = NewEngineClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ClickHouseParserRULE_engineClause)
	var _alt int

	p.EnterOuterAlt(localctx, 1)

	localctx.(*EngineClauseContext).clauses = make(map[string]bool)

	{
		p.SetState(906)
		p.EngineExpr()
	}
	p.SetState(933)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(931)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext()) {
			case 1:
				p.SetState(907)

				if !(!localctx.(*EngineClauseContext).clauses["orderByClause"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"orderByClause\"]", ""))
					goto errorExit
				}
				{
					p.SetState(908)
					p.OrderByClause()
				}
				localctx.(*EngineClauseContext).clauses["orderByClause"] = true

			case 2:
				p.SetState(911)

				if !(!localctx.(*EngineClauseContext).clauses["partitionByClause"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"partitionByClause\"]", ""))
					goto errorExit
				}
				{
					p.SetState(912)
					p.PartitionByClause()
				}
				localctx.(*EngineClauseContext).clauses["partitionByClause"] = true

			case 3:
				p.SetState(915)

				if !(!localctx.(*EngineClauseContext).clauses["primaryKeyClause"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"primaryKeyClause\"]", ""))
					goto errorExit
				}
				{
					p.SetState(916)
					p.PrimaryKeyClause()
				}
				localctx.(*EngineClauseContext).clauses["primaryKeyClause"] = true

			case 4:
				p.SetState(919)

				if !(!localctx.(*EngineClauseContext).clauses["sampleByClause"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"sampleByClause\"]", ""))
					goto errorExit
				}
				{
					p.SetState(920)
					p.SampleByClause()
				}
				localctx.(*EngineClauseContext).clauses["sampleByClause"] = true

			case 5:
				p.SetState(923)

				if !(!localctx.(*EngineClauseContext).clauses["ttlClause"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"ttlClause\"]", ""))
					goto errorExit
				}
				{
					p.SetState(924)
					p.TtlClause()
				}
				localctx.(*EngineClauseContext).clauses["ttlClause"] = true

			case 6:
				p.SetState(927)

				if !(!localctx.(*EngineClauseContext).clauses["settingsClause"]) {
					p.SetError(antlr.NewFailedPredicateException(p, "!$clauses[\"settingsClause\"]", ""))
					goto errorExit
				}
				{
					p.SetState(928)
					p.SettingsClause()
				}
				localctx.(*EngineClauseContext).clauses["settingsClause"] = true

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(935)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartitionByClauseContext is an interface to support dynamic dispatch.
type IPartitionByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION() antlr.TerminalNode
	BY() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsPartitionByClauseContext differentiates from other interfaces.
	IsPartitionByClauseContext()
}

type PartitionByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionByClauseContext() *PartitionByClauseContext {
	var p = new(PartitionByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_partitionByClause
	return p
}

func InitEmptyPartitionByClauseContext(p *PartitionByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_partitionByClause
}

func (*PartitionByClauseContext) IsPartitionByClauseContext() {}

func NewPartitionByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionByClauseContext {
	var p = new(PartitionByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_partitionByClause

	return p
}

func (s *PartitionByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionByClauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *PartitionByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *PartitionByClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *PartitionByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitPartitionByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) PartitionByClause() (localctx IPartitionByClauseContext) {
	localctx = NewPartitionByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ClickHouseParserRULE_partitionByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(936)
		p.Match(ClickHouseParserPARTITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(937)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(938)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryKeyClauseContext is an interface to support dynamic dispatch.
type IPrimaryKeyClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY() antlr.TerminalNode
	KEY() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsPrimaryKeyClauseContext differentiates from other interfaces.
	IsPrimaryKeyClauseContext()
}

type PrimaryKeyClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryKeyClauseContext() *PrimaryKeyClauseContext {
	var p = new(PrimaryKeyClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_primaryKeyClause
	return p
}

func InitEmptyPrimaryKeyClauseContext(p *PrimaryKeyClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_primaryKeyClause
}

func (*PrimaryKeyClauseContext) IsPrimaryKeyClauseContext() {}

func NewPrimaryKeyClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryKeyClauseContext {
	var p = new(PrimaryKeyClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_primaryKeyClause

	return p
}

func (s *PrimaryKeyClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryKeyClauseContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRIMARY, 0)
}

func (s *PrimaryKeyClauseContext) KEY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKEY, 0)
}

func (s *PrimaryKeyClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *PrimaryKeyClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryKeyClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryKeyClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitPrimaryKeyClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) PrimaryKeyClause() (localctx IPrimaryKeyClauseContext) {
	localctx = NewPrimaryKeyClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ClickHouseParserRULE_primaryKeyClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(940)
		p.Match(ClickHouseParserPRIMARY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(941)
		p.Match(ClickHouseParserKEY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(942)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISampleByClauseContext is an interface to support dynamic dispatch.
type ISampleByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SAMPLE() antlr.TerminalNode
	BY() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsSampleByClauseContext differentiates from other interfaces.
	IsSampleByClauseContext()
}

type SampleByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySampleByClauseContext() *SampleByClauseContext {
	var p = new(SampleByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sampleByClause
	return p
}

func InitEmptySampleByClauseContext(p *SampleByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sampleByClause
}

func (*SampleByClauseContext) IsSampleByClauseContext() {}

func NewSampleByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampleByClauseContext {
	var p = new(SampleByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_sampleByClause

	return p
}

func (s *SampleByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SampleByClauseContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSAMPLE, 0)
}

func (s *SampleByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *SampleByClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *SampleByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampleByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SampleByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSampleByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SampleByClause() (localctx ISampleByClauseContext) {
	localctx = NewSampleByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ClickHouseParserRULE_sampleByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(944)
		p.Match(ClickHouseParserSAMPLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(945)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(946)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITtlClauseContext is an interface to support dynamic dispatch.
type ITtlClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TTL() antlr.TerminalNode
	AllTtlExpr() []ITtlExprContext
	TtlExpr(i int) ITtlExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTtlClauseContext differentiates from other interfaces.
	IsTtlClauseContext()
}

type TtlClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTtlClauseContext() *TtlClauseContext {
	var p = new(TtlClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ttlClause
	return p
}

func InitEmptyTtlClauseContext(p *TtlClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ttlClause
}

func (*TtlClauseContext) IsTtlClauseContext() {}

func NewTtlClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TtlClauseContext {
	var p = new(TtlClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_ttlClause

	return p
}

func (s *TtlClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TtlClauseContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *TtlClauseContext) AllTtlExpr() []ITtlExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITtlExprContext); ok {
			len++
		}
	}

	tst := make([]ITtlExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITtlExprContext); ok {
			tst[i] = t.(ITtlExprContext)
			i++
		}
	}

	return tst
}

func (s *TtlClauseContext) TtlExpr(i int) ITtlExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITtlExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITtlExprContext)
}

func (s *TtlClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *TtlClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *TtlClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TtlClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TtlClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTtlClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TtlClause() (localctx ITtlClauseContext) {
	localctx = NewTtlClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ClickHouseParserRULE_ttlClause)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(948)
		p.Match(ClickHouseParserTTL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(949)
		p.TtlExpr()
	}
	p.SetState(954)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(950)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(951)
				p.TtlExpr()
			}

		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEngineExprContext is an interface to support dynamic dispatch.
type IEngineExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ENGINE() antlr.TerminalNode
	IdentifierOrNull() IIdentifierOrNullContext
	EQ_SINGLE() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsEngineExprContext differentiates from other interfaces.
	IsEngineExprContext()
}

type EngineExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEngineExprContext() *EngineExprContext {
	var p = new(EngineExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_engineExpr
	return p
}

func InitEmptyEngineExprContext(p *EngineExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_engineExpr
}

func (*EngineExprContext) IsEngineExprContext() {}

func NewEngineExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EngineExprContext {
	var p = new(EngineExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_engineExpr

	return p
}

func (s *EngineExprContext) GetParser() antlr.Parser { return s.parser }

func (s *EngineExprContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserENGINE, 0)
}

func (s *EngineExprContext) IdentifierOrNull() IIdentifierOrNullContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierOrNullContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierOrNullContext)
}

func (s *EngineExprContext) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *EngineExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *EngineExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *EngineExprContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *EngineExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EngineExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EngineExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitEngineExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) EngineExpr() (localctx IEngineExprContext) {
	localctx = NewEngineExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ClickHouseParserRULE_engineExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(957)
		p.Match(ClickHouseParserENGINE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserEQ_SINGLE {
		{
			p.SetState(958)
			p.Match(ClickHouseParserEQ_SINGLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(961)
		p.IdentifierOrNull()
	}
	p.SetState(967)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(962)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(964)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(963)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(966)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableElementExprContext is an interface to support dynamic dispatch.
type ITableElementExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableElementExprContext differentiates from other interfaces.
	IsTableElementExprContext()
}

type TableElementExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableElementExprContext() *TableElementExprContext {
	var p = new(TableElementExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableElementExpr
	return p
}

func InitEmptyTableElementExprContext(p *TableElementExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableElementExpr
}

func (*TableElementExprContext) IsTableElementExprContext() {}

func NewTableElementExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableElementExprContext {
	var p = new(TableElementExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableElementExpr

	return p
}

func (s *TableElementExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableElementExprContext) CopyAll(ctx *TableElementExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableElementExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableElementExprProjectionContext struct {
	TableElementExprContext
}

func NewTableElementExprProjectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableElementExprProjectionContext {
	var p = new(TableElementExprProjectionContext)

	InitEmptyTableElementExprContext(&p.TableElementExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableElementExprContext))

	return p
}

func (s *TableElementExprProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementExprProjectionContext) PROJECTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPROJECTION, 0)
}

func (s *TableElementExprProjectionContext) TableProjectionDfnt() ITableProjectionDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableProjectionDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableProjectionDfntContext)
}

func (s *TableElementExprProjectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableElementExprProjection(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableElementExprConstraintContext struct {
	TableElementExprContext
}

func NewTableElementExprConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableElementExprConstraintContext {
	var p = new(TableElementExprConstraintContext)

	InitEmptyTableElementExprContext(&p.TableElementExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableElementExprContext))

	return p
}

func (s *TableElementExprConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementExprConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCONSTRAINT, 0)
}

func (s *TableElementExprConstraintContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableElementExprConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCHECK, 0)
}

func (s *TableElementExprConstraintContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *TableElementExprConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableElementExprConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableElementExprColumnContext struct {
	TableElementExprContext
}

func NewTableElementExprColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableElementExprColumnContext {
	var p = new(TableElementExprColumnContext)

	InitEmptyTableElementExprContext(&p.TableElementExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableElementExprContext))

	return p
}

func (s *TableElementExprColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementExprColumnContext) TableColumnDfnt() ITableColumnDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableColumnDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableColumnDfntContext)
}

func (s *TableElementExprColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableElementExprColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableElementExprIndexContext struct {
	TableElementExprContext
}

func NewTableElementExprIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableElementExprIndexContext {
	var p = new(TableElementExprIndexContext)

	InitEmptyTableElementExprContext(&p.TableElementExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableElementExprContext))

	return p
}

func (s *TableElementExprIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableElementExprIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *TableElementExprIndexContext) TableIndexDfnt() ITableIndexDfntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIndexDfntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIndexDfntContext)
}

func (s *TableElementExprIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableElementExprIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableElementExpr() (localctx ITableElementExprContext) {
	localctx = NewTableElementExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ClickHouseParserRULE_tableElementExpr)
	p.SetState(979)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableElementExprColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(969)
			p.TableColumnDfnt()
		}

	case 2:
		localctx = NewTableElementExprConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(970)
			p.Match(ClickHouseParserCONSTRAINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(971)
			p.Identifier()
		}
		{
			p.SetState(972)
			p.Match(ClickHouseParserCHECK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(973)
			p.columnExpr(0)
		}

	case 3:
		localctx = NewTableElementExprIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(975)
			p.Match(ClickHouseParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(976)
			p.TableIndexDfnt()
		}

	case 4:
		localctx = NewTableElementExprProjectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(977)
			p.Match(ClickHouseParserPROJECTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(978)
			p.TableProjectionDfnt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableColumnDfntContext is an interface to support dynamic dispatch.
type ITableColumnDfntContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	ColumnTypeExpr() IColumnTypeExprContext
	TableColumnPropertyExpr() ITableColumnPropertyExprContext
	COMMENT() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	CodecExpr() ICodecExprContext
	TTL() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsTableColumnDfntContext differentiates from other interfaces.
	IsTableColumnDfntContext()
}

type TableColumnDfntContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableColumnDfntContext() *TableColumnDfntContext {
	var p = new(TableColumnDfntContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableColumnDfnt
	return p
}

func InitEmptyTableColumnDfntContext(p *TableColumnDfntContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableColumnDfnt
}

func (*TableColumnDfntContext) IsTableColumnDfntContext() {}

func NewTableColumnDfntContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableColumnDfntContext {
	var p = new(TableColumnDfntContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableColumnDfnt

	return p
}

func (s *TableColumnDfntContext) GetParser() antlr.Parser { return s.parser }

func (s *TableColumnDfntContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *TableColumnDfntContext) ColumnTypeExpr() IColumnTypeExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *TableColumnDfntContext) TableColumnPropertyExpr() ITableColumnPropertyExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableColumnPropertyExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableColumnPropertyExprContext)
}

func (s *TableColumnDfntContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *TableColumnDfntContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *TableColumnDfntContext) CodecExpr() ICodecExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodecExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodecExprContext)
}

func (s *TableColumnDfntContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *TableColumnDfntContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *TableColumnDfntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableColumnDfntContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableColumnDfntContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableColumnDfnt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableColumnDfnt() (localctx ITableColumnDfntContext) {
	localctx = NewTableColumnDfntContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ClickHouseParserRULE_tableColumnDfnt)
	var _la int

	p.SetState(1013)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(981)
			p.NestedIdentifier()
		}
		{
			p.SetState(982)
			p.ColumnTypeExpr()
		}
		p.SetState(984)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserALIAS || _la == ClickHouseParserDEFAULT || _la == ClickHouseParserMATERIALIZED {
			{
				p.SetState(983)
				p.TableColumnPropertyExpr()
			}

		}
		p.SetState(988)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserCOMMENT {
			{
				p.SetState(986)
				p.Match(ClickHouseParserCOMMENT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(987)
				p.Match(ClickHouseParserSTRING_LITERAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(991)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserCODEC {
			{
				p.SetState(990)
				p.CodecExpr()
			}

		}
		p.SetState(995)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserTTL {
			{
				p.SetState(993)
				p.Match(ClickHouseParserTTL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(994)
				p.columnExpr(0)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(997)
			p.NestedIdentifier()
		}
		p.SetState(999)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(998)
				p.ColumnTypeExpr()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1001)
			p.TableColumnPropertyExpr()
		}
		p.SetState(1004)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserCOMMENT {
			{
				p.SetState(1002)
				p.Match(ClickHouseParserCOMMENT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1003)
				p.Match(ClickHouseParserSTRING_LITERAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1007)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserCODEC {
			{
				p.SetState(1006)
				p.CodecExpr()
			}

		}
		p.SetState(1011)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserTTL {
			{
				p.SetState(1009)
				p.Match(ClickHouseParserTTL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1010)
				p.columnExpr(0)
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableColumnPropertyExprContext is an interface to support dynamic dispatch.
type ITableColumnPropertyExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnExpr() IColumnExprContext
	DEFAULT() antlr.TerminalNode
	MATERIALIZED() antlr.TerminalNode
	ALIAS() antlr.TerminalNode

	// IsTableColumnPropertyExprContext differentiates from other interfaces.
	IsTableColumnPropertyExprContext()
}

type TableColumnPropertyExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableColumnPropertyExprContext() *TableColumnPropertyExprContext {
	var p = new(TableColumnPropertyExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableColumnPropertyExpr
	return p
}

func InitEmptyTableColumnPropertyExprContext(p *TableColumnPropertyExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableColumnPropertyExpr
}

func (*TableColumnPropertyExprContext) IsTableColumnPropertyExprContext() {}

func NewTableColumnPropertyExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableColumnPropertyExprContext {
	var p = new(TableColumnPropertyExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableColumnPropertyExpr

	return p
}

func (s *TableColumnPropertyExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableColumnPropertyExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *TableColumnPropertyExprContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEFAULT, 0)
}

func (s *TableColumnPropertyExprContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZED, 0)
}

func (s *TableColumnPropertyExprContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALIAS, 0)
}

func (s *TableColumnPropertyExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableColumnPropertyExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableColumnPropertyExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableColumnPropertyExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableColumnPropertyExpr() (localctx ITableColumnPropertyExprContext) {
	localctx = NewTableColumnPropertyExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ClickHouseParserRULE_tableColumnPropertyExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1015)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserALIAS || _la == ClickHouseParserDEFAULT || _la == ClickHouseParserMATERIALIZED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1016)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableIndexDfntContext is an interface to support dynamic dispatch.
type ITableIndexDfntContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	ColumnExpr() IColumnExprContext
	TYPE() antlr.TerminalNode
	ColumnTypeExpr() IColumnTypeExprContext
	GRANULARITY() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode

	// IsTableIndexDfntContext differentiates from other interfaces.
	IsTableIndexDfntContext()
}

type TableIndexDfntContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableIndexDfntContext() *TableIndexDfntContext {
	var p = new(TableIndexDfntContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableIndexDfnt
	return p
}

func InitEmptyTableIndexDfntContext(p *TableIndexDfntContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableIndexDfnt
}

func (*TableIndexDfntContext) IsTableIndexDfntContext() {}

func NewTableIndexDfntContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableIndexDfntContext {
	var p = new(TableIndexDfntContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableIndexDfnt

	return p
}

func (s *TableIndexDfntContext) GetParser() antlr.Parser { return s.parser }

func (s *TableIndexDfntContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *TableIndexDfntContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *TableIndexDfntContext) TYPE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTYPE, 0)
}

func (s *TableIndexDfntContext) ColumnTypeExpr() IColumnTypeExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *TableIndexDfntContext) GRANULARITY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGRANULARITY, 0)
}

func (s *TableIndexDfntContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *TableIndexDfntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableIndexDfntContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableIndexDfntContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableIndexDfnt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableIndexDfnt() (localctx ITableIndexDfntContext) {
	localctx = NewTableIndexDfntContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ClickHouseParserRULE_tableIndexDfnt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1018)
		p.NestedIdentifier()
	}
	{
		p.SetState(1019)
		p.columnExpr(0)
	}
	{
		p.SetState(1020)
		p.Match(ClickHouseParserTYPE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1021)
		p.ColumnTypeExpr()
	}
	{
		p.SetState(1022)
		p.Match(ClickHouseParserGRANULARITY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1023)
		p.Match(ClickHouseParserDECIMAL_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableProjectionDfntContext is an interface to support dynamic dispatch.
type ITableProjectionDfntContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	ProjectionSelectStmt() IProjectionSelectStmtContext

	// IsTableProjectionDfntContext differentiates from other interfaces.
	IsTableProjectionDfntContext()
}

type TableProjectionDfntContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableProjectionDfntContext() *TableProjectionDfntContext {
	var p = new(TableProjectionDfntContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableProjectionDfnt
	return p
}

func InitEmptyTableProjectionDfntContext(p *TableProjectionDfntContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableProjectionDfnt
}

func (*TableProjectionDfntContext) IsTableProjectionDfntContext() {}

func NewTableProjectionDfntContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableProjectionDfntContext {
	var p = new(TableProjectionDfntContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableProjectionDfnt

	return p
}

func (s *TableProjectionDfntContext) GetParser() antlr.Parser { return s.parser }

func (s *TableProjectionDfntContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *TableProjectionDfntContext) ProjectionSelectStmt() IProjectionSelectStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectionSelectStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectionSelectStmtContext)
}

func (s *TableProjectionDfntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableProjectionDfntContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableProjectionDfntContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableProjectionDfnt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableProjectionDfnt() (localctx ITableProjectionDfntContext) {
	localctx = NewTableProjectionDfntContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ClickHouseParserRULE_tableProjectionDfnt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1025)
		p.NestedIdentifier()
	}
	{
		p.SetState(1026)
		p.ProjectionSelectStmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICodecExprContext is an interface to support dynamic dispatch.
type ICodecExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CODEC() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	AllCodecArgExpr() []ICodecArgExprContext
	CodecArgExpr(i int) ICodecArgExprContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCodecExprContext differentiates from other interfaces.
	IsCodecExprContext()
}

type CodecExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCodecExprContext() *CodecExprContext {
	var p = new(CodecExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_codecExpr
	return p
}

func InitEmptyCodecExprContext(p *CodecExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_codecExpr
}

func (*CodecExprContext) IsCodecExprContext() {}

func NewCodecExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CodecExprContext {
	var p = new(CodecExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_codecExpr

	return p
}

func (s *CodecExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CodecExprContext) CODEC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCODEC, 0)
}

func (s *CodecExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *CodecExprContext) AllCodecArgExpr() []ICodecArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICodecArgExprContext); ok {
			len++
		}
	}

	tst := make([]ICodecArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICodecArgExprContext); ok {
			tst[i] = t.(ICodecArgExprContext)
			i++
		}
	}

	return tst
}

func (s *CodecExprContext) CodecArgExpr(i int) ICodecArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodecArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodecArgExprContext)
}

func (s *CodecExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *CodecExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *CodecExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *CodecExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodecExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CodecExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCodecExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) CodecExpr() (localctx ICodecExprContext) {
	localctx = NewCodecExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ClickHouseParserRULE_codecExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1028)
		p.Match(ClickHouseParserCODEC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1029)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1030)
		p.CodecArgExpr()
	}
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(1031)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1032)
			p.CodecArgExpr()
		}

		p.SetState(1037)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1038)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICodecArgExprContext is an interface to support dynamic dispatch.
type ICodecArgExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsCodecArgExprContext differentiates from other interfaces.
	IsCodecArgExprContext()
}

type CodecArgExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCodecArgExprContext() *CodecArgExprContext {
	var p = new(CodecArgExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_codecArgExpr
	return p
}

func InitEmptyCodecArgExprContext(p *CodecArgExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_codecArgExpr
}

func (*CodecArgExprContext) IsCodecArgExprContext() {}

func NewCodecArgExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CodecArgExprContext {
	var p = new(CodecArgExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_codecArgExpr

	return p
}

func (s *CodecArgExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CodecArgExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CodecArgExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *CodecArgExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *CodecArgExprContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *CodecArgExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodecArgExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CodecArgExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitCodecArgExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) CodecArgExpr() (localctx ICodecArgExprContext) {
	localctx = NewCodecArgExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ClickHouseParserRULE_codecArgExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1040)
		p.Identifier()
	}
	p.SetState(1046)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserLPAREN {
		{
			p.SetState(1041)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(1042)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(1045)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITtlExprContext is an interface to support dynamic dispatch.
type ITtlExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnExpr() IColumnExprContext
	DELETE() antlr.TerminalNode
	TO() antlr.TerminalNode
	DISK() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	VOLUME() antlr.TerminalNode

	// IsTtlExprContext differentiates from other interfaces.
	IsTtlExprContext()
}

type TtlExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTtlExprContext() *TtlExprContext {
	var p = new(TtlExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ttlExpr
	return p
}

func InitEmptyTtlExprContext(p *TtlExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ttlExpr
}

func (*TtlExprContext) IsTtlExprContext() {}

func NewTtlExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TtlExprContext {
	var p = new(TtlExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_ttlExpr

	return p
}

func (s *TtlExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TtlExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *TtlExprContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELETE, 0)
}

func (s *TtlExprContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *TtlExprContext) DISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISK, 0)
}

func (s *TtlExprContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *TtlExprContext) VOLUME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVOLUME, 0)
}

func (s *TtlExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TtlExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TtlExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTtlExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TtlExpr() (localctx ITtlExprContext) {
	localctx = NewTtlExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ClickHouseParserRULE_ttlExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1048)
		p.columnExpr(0)
	}
	p.SetState(1056)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1049)
			p.Match(ClickHouseParserDELETE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1050)
			p.Match(ClickHouseParserTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1051)
			p.Match(ClickHouseParserDISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1052)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1053)
			p.Match(ClickHouseParserTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1054)
			p.Match(ClickHouseParserVOLUME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1055)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescribeStmtContext is an interface to support dynamic dispatch.
type IDescribeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TableExpr() ITableExprContext
	DESCRIBE() antlr.TerminalNode
	DESC() antlr.TerminalNode
	TABLE() antlr.TerminalNode

	// IsDescribeStmtContext differentiates from other interfaces.
	IsDescribeStmtContext()
}

type DescribeStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribeStmtContext() *DescribeStmtContext {
	var p = new(DescribeStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_describeStmt
	return p
}

func InitEmptyDescribeStmtContext(p *DescribeStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_describeStmt
}

func (*DescribeStmtContext) IsDescribeStmtContext() {}

func NewDescribeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescribeStmtContext {
	var p = new(DescribeStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_describeStmt

	return p
}

func (s *DescribeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DescribeStmtContext) TableExpr() ITableExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableExprContext)
}

func (s *DescribeStmtContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCRIBE, 0)
}

func (s *DescribeStmtContext) DESC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESC, 0)
}

func (s *DescribeStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *DescribeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescribeStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDescribeStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DescribeStmt() (localctx IDescribeStmtContext) {
	localctx = NewDescribeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ClickHouseParserRULE_describeStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1058)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserDESC || _la == ClickHouseParserDESCRIBE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1060)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1059)
			p.Match(ClickHouseParserTABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1062)
		p.tableExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDropStmtContext is an interface to support dynamic dispatch.
type IDropStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDropStmtContext differentiates from other interfaces.
	IsDropStmtContext()
}

type DropStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropStmtContext() *DropStmtContext {
	var p = new(DropStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dropStmt
	return p
}

func InitEmptyDropStmtContext(p *DropStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dropStmt
}

func (*DropStmtContext) IsDropStmtContext() {}

func NewDropStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropStmtContext {
	var p = new(DropStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dropStmt

	return p
}

func (s *DropStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DropStmtContext) CopyAll(ctx *DropStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DropStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DropDatabaseStmtContext struct {
	DropStmtContext
}

func NewDropDatabaseStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropDatabaseStmtContext {
	var p = new(DropDatabaseStmtContext)

	InitEmptyDropStmtContext(&p.DropStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*DropStmtContext))

	return p
}

func (s *DropDatabaseStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropDatabaseStmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *DropDatabaseStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *DropDatabaseStmtContext) DETACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDETACH, 0)
}

func (s *DropDatabaseStmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *DropDatabaseStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *DropDatabaseStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *DropDatabaseStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *DropDatabaseStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDropDatabaseStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type DropTableStmtContext struct {
	DropStmtContext
}

func NewDropTableStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropTableStmtContext {
	var p = new(DropTableStmtContext)

	InitEmptyDropStmtContext(&p.DropStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*DropStmtContext))

	return p
}

func (s *DropTableStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *DropTableStmtContext) DETACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDETACH, 0)
}

func (s *DropTableStmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *DropTableStmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *DropTableStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *DropTableStmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *DropTableStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *DropTableStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *DropTableStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *DropTableStmtContext) NO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNO, 0)
}

func (s *DropTableStmtContext) DELAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELAY, 0)
}

func (s *DropTableStmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *DropTableStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDropTableStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DropStmt() (localctx IDropStmtContext) {
	localctx = NewDropStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ClickHouseParserRULE_dropStmt)
	var _la int

	p.SetState(1095)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDropDatabaseStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1064)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserDETACH || _la == ClickHouseParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1065)
			p.Match(ClickHouseParserDATABASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1066)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1067)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1070)
			p.DatabaseIdentifier()
		}
		p.SetState(1072)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(1071)
				p.ClusterClause()
			}

		}

	case 2:
		localctx = NewDropTableStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1074)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserDETACH || _la == ClickHouseParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1081)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ClickHouseParserDICTIONARY:
			{
				p.SetState(1075)
				p.Match(ClickHouseParserDICTIONARY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserTABLE, ClickHouseParserTEMPORARY:
			p.SetState(1077)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserTEMPORARY {
				{
					p.SetState(1076)
					p.Match(ClickHouseParserTEMPORARY)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1079)
				p.Match(ClickHouseParserTABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserVIEW:
			{
				p.SetState(1080)
				p.Match(ClickHouseParserVIEW)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1083)
				p.Match(ClickHouseParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1084)
				p.Match(ClickHouseParserEXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1087)
			p.TableIdentifier()
		}
		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserON {
			{
				p.SetState(1088)
				p.ClusterClause()
			}

		}
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserNO {
			{
				p.SetState(1091)
				p.Match(ClickHouseParserNO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1092)
				p.Match(ClickHouseParserDELAY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExistsStmtContext is an interface to support dynamic dispatch.
type IExistsStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExistsStmtContext differentiates from other interfaces.
	IsExistsStmtContext()
}

type ExistsStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExistsStmtContext() *ExistsStmtContext {
	var p = new(ExistsStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_existsStmt
	return p
}

func InitEmptyExistsStmtContext(p *ExistsStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_existsStmt
}

func (*ExistsStmtContext) IsExistsStmtContext() {}

func NewExistsStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExistsStmtContext {
	var p = new(ExistsStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_existsStmt

	return p
}

func (s *ExistsStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExistsStmtContext) CopyAll(ctx *ExistsStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExistsStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExistsTableStmtContext struct {
	ExistsStmtContext
}

func NewExistsTableStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsTableStmtContext {
	var p = new(ExistsTableStmtContext)

	InitEmptyExistsStmtContext(&p.ExistsStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExistsStmtContext))

	return p
}

func (s *ExistsTableStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsTableStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *ExistsTableStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ExistsTableStmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *ExistsTableStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *ExistsTableStmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *ExistsTableStmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *ExistsTableStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitExistsTableStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExistsDatabaseStmtContext struct {
	ExistsStmtContext
}

func NewExistsDatabaseStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsDatabaseStmtContext {
	var p = new(ExistsDatabaseStmtContext)

	InitEmptyExistsStmtContext(&p.ExistsStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExistsStmtContext))

	return p
}

func (s *ExistsDatabaseStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsDatabaseStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *ExistsDatabaseStmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *ExistsDatabaseStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *ExistsDatabaseStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitExistsDatabaseStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ExistsStmt() (localctx IExistsStmtContext) {
	localctx = NewExistsStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ClickHouseParserRULE_existsStmt)
	var _la int

	p.SetState(1110)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 126, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExistsDatabaseStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1097)
			p.Match(ClickHouseParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1098)
			p.Match(ClickHouseParserDATABASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1099)
			p.DatabaseIdentifier()
		}

	case 2:
		localctx = NewExistsTableStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1100)
			p.Match(ClickHouseParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1107)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1101)
				p.Match(ClickHouseParserDICTIONARY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 2 {
			p.SetState(1103)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserTEMPORARY {
				{
					p.SetState(1102)
					p.Match(ClickHouseParserTEMPORARY)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1105)
				p.Match(ClickHouseParserTABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 3 {
			{
				p.SetState(1106)
				p.Match(ClickHouseParserVIEW)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1109)
			p.TableIdentifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExplainStmtContext is an interface to support dynamic dispatch.
type IExplainStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExplainStmtContext differentiates from other interfaces.
	IsExplainStmtContext()
}

type ExplainStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainStmtContext() *ExplainStmtContext {
	var p = new(ExplainStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_explainStmt
	return p
}

func InitEmptyExplainStmtContext(p *ExplainStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_explainStmt
}

func (*ExplainStmtContext) IsExplainStmtContext() {}

func NewExplainStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainStmtContext {
	var p = new(ExplainStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_explainStmt

	return p
}

func (s *ExplainStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainStmtContext) CopyAll(ctx *ExplainStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExplainStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExplainSyntaxStmtContext struct {
	ExplainStmtContext
}

func NewExplainSyntaxStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainSyntaxStmtContext {
	var p = new(ExplainSyntaxStmtContext)

	InitEmptyExplainStmtContext(&p.ExplainStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExplainStmtContext))

	return p
}

func (s *ExplainSyntaxStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainSyntaxStmtContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPLAIN, 0)
}

func (s *ExplainSyntaxStmtContext) SYNTAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNTAX, 0)
}

func (s *ExplainSyntaxStmtContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *ExplainSyntaxStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitExplainSyntaxStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExplainASTStmtContext struct {
	ExplainStmtContext
}

func NewExplainASTStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainASTStmtContext {
	var p = new(ExplainASTStmtContext)

	InitEmptyExplainStmtContext(&p.ExplainStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExplainStmtContext))

	return p
}

func (s *ExplainASTStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainASTStmtContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPLAIN, 0)
}

func (s *ExplainASTStmtContext) AST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAST, 0)
}

func (s *ExplainASTStmtContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *ExplainASTStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitExplainASTStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ExplainStmt() (localctx IExplainStmtContext) {
	localctx = NewExplainStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ClickHouseParserRULE_explainStmt)
	p.SetState(1118)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExplainASTStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1112)
			p.Match(ClickHouseParserEXPLAIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1113)
			p.Match(ClickHouseParserAST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1114)
			p.Query()
		}

	case 2:
		localctx = NewExplainSyntaxStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1115)
			p.Match(ClickHouseParserEXPLAIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1116)
			p.Match(ClickHouseParserSYNTAX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1117)
			p.Query()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsertStmtContext is an interface to support dynamic dispatch.
type IInsertStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	DataClause() IDataClauseContext
	TableIdentifier() ITableIdentifierContext
	FUNCTION() antlr.TerminalNode
	TableFunctionExpr() ITableFunctionExprContext
	TABLE() antlr.TerminalNode
	ColumnsClause() IColumnsClauseContext

	// IsInsertStmtContext differentiates from other interfaces.
	IsInsertStmtContext()
}

type InsertStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertStmtContext() *InsertStmtContext {
	var p = new(InsertStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_insertStmt
	return p
}

func InitEmptyInsertStmtContext(p *InsertStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_insertStmt
}

func (*InsertStmtContext) IsInsertStmtContext() {}

func NewInsertStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStmtContext {
	var p = new(InsertStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_insertStmt

	return p
}

func (s *InsertStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStmtContext) INSERT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINSERT, 0)
}

func (s *InsertStmtContext) INTO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTO, 0)
}

func (s *InsertStmtContext) DataClause() IDataClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDataClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDataClauseContext)
}

func (s *InsertStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *InsertStmtContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFUNCTION, 0)
}

func (s *InsertStmtContext) TableFunctionExpr() ITableFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableFunctionExprContext)
}

func (s *InsertStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *InsertStmtContext) ColumnsClause() IColumnsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnsClauseContext)
}

func (s *InsertStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitInsertStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) InsertStmt() (localctx IInsertStmtContext) {
	localctx = NewInsertStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ClickHouseParserRULE_insertStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1120)
		p.Match(ClickHouseParserINSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1121)
		p.Match(ClickHouseParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1123)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1122)
			p.Match(ClickHouseParserTABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1128)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1125)
			p.TableIdentifier()
		}

	case 2:
		{
			p.SetState(1126)
			p.Match(ClickHouseParserFUNCTION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1127)
			p.TableFunctionExpr()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1131)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1130)
			p.ColumnsClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1133)
		p.DataClause()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnsClauseContext is an interface to support dynamic dispatch.
type IColumnsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllNestedIdentifier() []INestedIdentifierContext
	NestedIdentifier(i int) INestedIdentifierContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnsClauseContext differentiates from other interfaces.
	IsColumnsClauseContext()
}

type ColumnsClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnsClauseContext() *ColumnsClauseContext {
	var p = new(ColumnsClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnsClause
	return p
}

func InitEmptyColumnsClauseContext(p *ColumnsClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnsClause
}

func (*ColumnsClauseContext) IsColumnsClauseContext() {}

func NewColumnsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnsClauseContext {
	var p = new(ColumnsClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnsClause

	return p
}

func (s *ColumnsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnsClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnsClauseContext) AllNestedIdentifier() []INestedIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			len++
		}
	}

	tst := make([]INestedIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INestedIdentifierContext); ok {
			tst[i] = t.(INestedIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnsClauseContext) NestedIdentifier(i int) INestedIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *ColumnsClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnsClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnsClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnsClause() (localctx IColumnsClauseContext) {
	localctx = NewColumnsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ClickHouseParserRULE_columnsClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1135)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1136)
		p.NestedIdentifier()
	}
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(1137)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1138)
			p.NestedIdentifier()
		}

		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1144)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDataClauseContext is an interface to support dynamic dispatch.
type IDataClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDataClauseContext differentiates from other interfaces.
	IsDataClauseContext()
}

type DataClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataClauseContext() *DataClauseContext {
	var p = new(DataClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dataClause
	return p
}

func InitEmptyDataClauseContext(p *DataClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_dataClause
}

func (*DataClauseContext) IsDataClauseContext() {}

func NewDataClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataClauseContext {
	var p = new(DataClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_dataClause

	return p
}

func (s *DataClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DataClauseContext) CopyAll(ctx *DataClauseContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DataClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DataClauseValuesContext struct {
	DataClauseContext
}

func NewDataClauseValuesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DataClauseValuesContext {
	var p = new(DataClauseValuesContext)

	InitEmptyDataClauseContext(&p.DataClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*DataClauseContext))

	return p
}

func (s *DataClauseValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataClauseValuesContext) VALUES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVALUES, 0)
}

func (s *DataClauseValuesContext) AllAssignmentValues() []IAssignmentValuesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAssignmentValuesContext); ok {
			len++
		}
	}

	tst := make([]IAssignmentValuesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAssignmentValuesContext); ok {
			tst[i] = t.(IAssignmentValuesContext)
			i++
		}
	}

	return tst
}

func (s *DataClauseValuesContext) AssignmentValues(i int) IAssignmentValuesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentValuesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentValuesContext)
}

func (s *DataClauseValuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *DataClauseValuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *DataClauseValuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDataClauseValues(s)

	default:
		return t.VisitChildren(s)
	}
}

type DataClauseFormatContext struct {
	DataClauseContext
}

func NewDataClauseFormatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DataClauseFormatContext {
	var p = new(DataClauseFormatContext)

	InitEmptyDataClauseContext(&p.DataClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*DataClauseContext))

	return p
}

func (s *DataClauseFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataClauseFormatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFORMAT, 0)
}

func (s *DataClauseFormatContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DataClauseFormatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDataClauseFormat(s)

	default:
		return t.VisitChildren(s)
	}
}

type DataClauseSelectContext struct {
	DataClauseContext
}

func NewDataClauseSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DataClauseSelectContext {
	var p = new(DataClauseSelectContext)

	InitEmptyDataClauseContext(&p.DataClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*DataClauseContext))

	return p
}

func (s *DataClauseSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataClauseSelectContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *DataClauseSelectContext) EOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEOF, 0)
}

func (s *DataClauseSelectContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMICOLON, 0)
}

func (s *DataClauseSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDataClauseSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DataClause() (localctx IDataClauseContext) {
	localctx = NewDataClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ClickHouseParserRULE_dataClause)
	var _la int

	p.SetState(1163)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserFORMAT:
		localctx = NewDataClauseFormatContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1146)
			p.Match(ClickHouseParserFORMAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1147)
			p.Identifier()
		}

	case ClickHouseParserVALUES:
		localctx = NewDataClauseValuesContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1148)
			p.Match(ClickHouseParserVALUES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1149)
			p.AssignmentValues()
		}
		p.SetState(1154)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1150)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1151)
				p.AssignmentValues()
			}

			p.SetState(1156)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case ClickHouseParserSELECT, ClickHouseParserWITH, ClickHouseParserLPAREN:
		localctx = NewDataClauseSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1157)
			p.SelectUnionStmt()
		}
		p.SetState(1159)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserSEMICOLON {
			{
				p.SetState(1158)
				p.Match(ClickHouseParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1161)
			p.Match(ClickHouseParserEOF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentValuesContext is an interface to support dynamic dispatch.
type IAssignmentValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllAssignmentValue() []IAssignmentValueContext
	AssignmentValue(i int) IAssignmentValueContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsAssignmentValuesContext differentiates from other interfaces.
	IsAssignmentValuesContext()
}

type AssignmentValuesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentValuesContext() *AssignmentValuesContext {
	var p = new(AssignmentValuesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentValues
	return p
}

func InitEmptyAssignmentValuesContext(p *AssignmentValuesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentValues
}

func (*AssignmentValuesContext) IsAssignmentValuesContext() {}

func NewAssignmentValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentValuesContext {
	var p = new(AssignmentValuesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_assignmentValues

	return p
}

func (s *AssignmentValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentValuesContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *AssignmentValuesContext) AllAssignmentValue() []IAssignmentValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAssignmentValueContext); ok {
			len++
		}
	}

	tst := make([]IAssignmentValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAssignmentValueContext); ok {
			tst[i] = t.(IAssignmentValueContext)
			i++
		}
	}

	return tst
}

func (s *AssignmentValuesContext) AssignmentValue(i int) IAssignmentValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentValueContext)
}

func (s *AssignmentValuesContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *AssignmentValuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *AssignmentValuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *AssignmentValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentValuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAssignmentValues(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AssignmentValues() (localctx IAssignmentValuesContext) {
	localctx = NewAssignmentValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ClickHouseParserRULE_assignmentValues)
	var _la int

	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1165)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1166)
			p.AssignmentValue()
		}
		p.SetState(1171)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1167)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1168)
				p.AssignmentValue()
			}

			p.SetState(1173)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1174)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1176)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1177)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentValueContext is an interface to support dynamic dispatch.
type IAssignmentValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext

	// IsAssignmentValueContext differentiates from other interfaces.
	IsAssignmentValueContext()
}

type AssignmentValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentValueContext() *AssignmentValueContext {
	var p = new(AssignmentValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentValue
	return p
}

func InitEmptyAssignmentValueContext(p *AssignmentValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_assignmentValue
}

func (*AssignmentValueContext) IsAssignmentValueContext() {}

func NewAssignmentValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentValueContext {
	var p = new(AssignmentValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_assignmentValue

	return p
}

func (s *AssignmentValueContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentValueContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *AssignmentValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAssignmentValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) AssignmentValue() (localctx IAssignmentValueContext) {
	localctx = NewAssignmentValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ClickHouseParserRULE_assignmentValue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1180)
		p.Literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKillStmtContext is an interface to support dynamic dispatch.
type IKillStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsKillStmtContext differentiates from other interfaces.
	IsKillStmtContext()
}

type KillStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKillStmtContext() *KillStmtContext {
	var p = new(KillStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_killStmt
	return p
}

func InitEmptyKillStmtContext(p *KillStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_killStmt
}

func (*KillStmtContext) IsKillStmtContext() {}

func NewKillStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KillStmtContext {
	var p = new(KillStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_killStmt

	return p
}

func (s *KillStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *KillStmtContext) CopyAll(ctx *KillStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *KillStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KillStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type KillMutationStmtContext struct {
	KillStmtContext
}

func NewKillMutationStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KillMutationStmtContext {
	var p = new(KillMutationStmtContext)

	InitEmptyKillStmtContext(&p.KillStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*KillStmtContext))

	return p
}

func (s *KillMutationStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KillMutationStmtContext) KILL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKILL, 0)
}

func (s *KillMutationStmtContext) MUTATION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMUTATION, 0)
}

func (s *KillMutationStmtContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *KillMutationStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *KillMutationStmtContext) SYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNC, 0)
}

func (s *KillMutationStmtContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASYNC, 0)
}

func (s *KillMutationStmtContext) TEST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEST, 0)
}

func (s *KillMutationStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitKillMutationStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) KillStmt() (localctx IKillStmtContext) {
	localctx = NewKillStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, ClickHouseParserRULE_killStmt)
	var _la int

	localctx = NewKillMutationStmtContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1182)
		p.Match(ClickHouseParserKILL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1183)
		p.Match(ClickHouseParserMUTATION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1185)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserON {
		{
			p.SetState(1184)
			p.ClusterClause()
		}

	}
	{
		p.SetState(1187)
		p.WhereClause()
	}
	p.SetState(1189)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserASYNC || _la == ClickHouseParserSYNC || _la == ClickHouseParserTEST {
		{
			p.SetState(1188)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserASYNC || _la == ClickHouseParserSYNC || _la == ClickHouseParserTEST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptimizeStmtContext is an interface to support dynamic dispatch.
type IOptimizeStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPTIMIZE() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	TableIdentifier() ITableIdentifierContext
	ClusterClause() IClusterClauseContext
	PartitionClause() IPartitionClauseContext
	FINAL() antlr.TerminalNode
	DEDUPLICATE() antlr.TerminalNode

	// IsOptimizeStmtContext differentiates from other interfaces.
	IsOptimizeStmtContext()
}

type OptimizeStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptimizeStmtContext() *OptimizeStmtContext {
	var p = new(OptimizeStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_optimizeStmt
	return p
}

func InitEmptyOptimizeStmtContext(p *OptimizeStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_optimizeStmt
}

func (*OptimizeStmtContext) IsOptimizeStmtContext() {}

func NewOptimizeStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptimizeStmtContext {
	var p = new(OptimizeStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_optimizeStmt

	return p
}

func (s *OptimizeStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *OptimizeStmtContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOPTIMIZE, 0)
}

func (s *OptimizeStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *OptimizeStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *OptimizeStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *OptimizeStmtContext) PartitionClause() IPartitionClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartitionClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *OptimizeStmtContext) FINAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFINAL, 0)
}

func (s *OptimizeStmtContext) DEDUPLICATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEDUPLICATE, 0)
}

func (s *OptimizeStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptimizeStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptimizeStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOptimizeStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OptimizeStmt() (localctx IOptimizeStmtContext) {
	localctx = NewOptimizeStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, ClickHouseParserRULE_optimizeStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1191)
		p.Match(ClickHouseParserOPTIMIZE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1192)
		p.Match(ClickHouseParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1193)
		p.TableIdentifier()
	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserON {
		{
			p.SetState(1194)
			p.ClusterClause()
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserPARTITION {
		{
			p.SetState(1197)
			p.PartitionClause()
		}

	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserFINAL {
		{
			p.SetState(1200)
			p.Match(ClickHouseParserFINAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1204)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserDEDUPLICATE {
		{
			p.SetState(1203)
			p.Match(ClickHouseParserDEDUPLICATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRenameStmtContext is an interface to support dynamic dispatch.
type IRenameStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RENAME() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	AllTableIdentifier() []ITableIdentifierContext
	TableIdentifier(i int) ITableIdentifierContext
	AllTO() []antlr.TerminalNode
	TO(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	ClusterClause() IClusterClauseContext

	// IsRenameStmtContext differentiates from other interfaces.
	IsRenameStmtContext()
}

type RenameStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameStmtContext() *RenameStmtContext {
	var p = new(RenameStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_renameStmt
	return p
}

func InitEmptyRenameStmtContext(p *RenameStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_renameStmt
}

func (*RenameStmtContext) IsRenameStmtContext() {}

func NewRenameStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameStmtContext {
	var p = new(RenameStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_renameStmt

	return p
}

func (s *RenameStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameStmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRENAME, 0)
}

func (s *RenameStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *RenameStmtContext) AllTableIdentifier() []ITableIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			len++
		}
	}

	tst := make([]ITableIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITableIdentifierContext); ok {
			tst[i] = t.(ITableIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *RenameStmtContext) TableIdentifier(i int) ITableIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *RenameStmtContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserTO)
}

func (s *RenameStmtContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, i)
}

func (s *RenameStmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *RenameStmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *RenameStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *RenameStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitRenameStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) RenameStmt() (localctx IRenameStmtContext) {
	localctx = NewRenameStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ClickHouseParserRULE_renameStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1206)
		p.Match(ClickHouseParserRENAME)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1207)
		p.Match(ClickHouseParserTABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1208)
		p.TableIdentifier()
	}
	{
		p.SetState(1209)
		p.Match(ClickHouseParserTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1210)
		p.TableIdentifier()
	}
	p.SetState(1218)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(1211)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1212)
			p.TableIdentifier()
		}
		{
			p.SetState(1213)
			p.Match(ClickHouseParserTO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1214)
			p.TableIdentifier()
		}

		p.SetState(1220)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserON {
		{
			p.SetState(1221)
			p.ClusterClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProjectionSelectStmtContext is an interface to support dynamic dispatch.
type IProjectionSelectStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	SELECT() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	RPAREN() antlr.TerminalNode
	WithClause() IWithClauseContext
	GroupByClause() IGroupByClauseContext
	ProjectionOrderByClause() IProjectionOrderByClauseContext

	// IsProjectionSelectStmtContext differentiates from other interfaces.
	IsProjectionSelectStmtContext()
}

type ProjectionSelectStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionSelectStmtContext() *ProjectionSelectStmtContext {
	var p = new(ProjectionSelectStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_projectionSelectStmt
	return p
}

func InitEmptyProjectionSelectStmtContext(p *ProjectionSelectStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_projectionSelectStmt
}

func (*ProjectionSelectStmtContext) IsProjectionSelectStmtContext() {}

func NewProjectionSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionSelectStmtContext {
	var p = new(ProjectionSelectStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_projectionSelectStmt

	return p
}

func (s *ProjectionSelectStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionSelectStmtContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ProjectionSelectStmtContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSELECT, 0)
}

func (s *ProjectionSelectStmtContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ProjectionSelectStmtContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ProjectionSelectStmtContext) WithClause() IWithClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWithClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *ProjectionSelectStmtContext) GroupByClause() IGroupByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *ProjectionSelectStmtContext) ProjectionOrderByClause() IProjectionOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectionOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectionOrderByClauseContext)
}

func (s *ProjectionSelectStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionSelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionSelectStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitProjectionSelectStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ProjectionSelectStmt() (localctx IProjectionSelectStmtContext) {
	localctx = NewProjectionSelectStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ClickHouseParserRULE_projectionSelectStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1224)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1226)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(1225)
			p.WithClause()
		}

	}
	{
		p.SetState(1228)
		p.Match(ClickHouseParserSELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1229)
		p.ColumnExprList()
	}
	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserGROUP {
		{
			p.SetState(1230)
			p.GroupByClause()
		}

	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserORDER {
		{
			p.SetState(1233)
			p.ProjectionOrderByClause()
		}

	}
	{
		p.SetState(1236)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectUnionStmtContext is an interface to support dynamic dispatch.
type ISelectUnionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelectStmtWithParens() []ISelectStmtWithParensContext
	SelectStmtWithParens(i int) ISelectStmtWithParensContext
	AllUNION() []antlr.TerminalNode
	UNION(i int) antlr.TerminalNode
	AllALL() []antlr.TerminalNode
	ALL(i int) antlr.TerminalNode

	// IsSelectUnionStmtContext differentiates from other interfaces.
	IsSelectUnionStmtContext()
}

type SelectUnionStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectUnionStmtContext() *SelectUnionStmtContext {
	var p = new(SelectUnionStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmt
	return p
}

func InitEmptySelectUnionStmtContext(p *SelectUnionStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmt
}

func (*SelectUnionStmtContext) IsSelectUnionStmtContext() {}

func NewSelectUnionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectUnionStmtContext {
	var p = new(SelectUnionStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectUnionStmt

	return p
}

func (s *SelectUnionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectUnionStmtContext) AllSelectStmtWithParens() []ISelectStmtWithParensContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelectStmtWithParensContext); ok {
			len++
		}
	}

	tst := make([]ISelectStmtWithParensContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelectStmtWithParensContext); ok {
			tst[i] = t.(ISelectStmtWithParensContext)
			i++
		}
	}

	return tst
}

func (s *SelectUnionStmtContext) SelectStmtWithParens(i int) ISelectStmtWithParensContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtWithParensContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtWithParensContext)
}

func (s *SelectUnionStmtContext) AllUNION() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserUNION)
}

func (s *SelectUnionStmtContext) UNION(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNION, i)
}

func (s *SelectUnionStmtContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserALL)
}

func (s *SelectUnionStmtContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, i)
}

func (s *SelectUnionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectUnionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectUnionStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectUnionStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectUnionStmt() (localctx ISelectUnionStmtContext) {
	localctx = NewSelectUnionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ClickHouseParserRULE_selectUnionStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1238)
		p.SelectStmtWithParens()
	}
	p.SetState(1244)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserUNION {
		{
			p.SetState(1239)
			p.Match(ClickHouseParserUNION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1240)
			p.Match(ClickHouseParserALL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1241)
			p.SelectStmtWithParens()
		}

		p.SetState(1246)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStmtWithParensContext is an interface to support dynamic dispatch.
type ISelectStmtWithParensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SelectStmt() ISelectStmtContext
	LPAREN() antlr.TerminalNode
	SelectUnionStmt() ISelectUnionStmtContext
	RPAREN() antlr.TerminalNode

	// IsSelectStmtWithParensContext differentiates from other interfaces.
	IsSelectStmtWithParensContext()
}

type SelectStmtWithParensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStmtWithParensContext() *SelectStmtWithParensContext {
	var p = new(SelectStmtWithParensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmtWithParens
	return p
}

func InitEmptySelectStmtWithParensContext(p *SelectStmtWithParensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmtWithParens
}

func (*SelectStmtWithParensContext) IsSelectStmtWithParensContext() {}

func NewSelectStmtWithParensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStmtWithParensContext {
	var p = new(SelectStmtWithParensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectStmtWithParens

	return p
}

func (s *SelectStmtWithParensContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStmtWithParensContext) SelectStmt() ISelectStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *SelectStmtWithParensContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *SelectStmtWithParensContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *SelectStmtWithParensContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *SelectStmtWithParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStmtWithParensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStmtWithParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectStmtWithParens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectStmtWithParens() (localctx ISelectStmtWithParensContext) {
	localctx = NewSelectStmtWithParensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ClickHouseParserRULE_selectStmtWithParens)
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserSELECT, ClickHouseParserWITH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1247)
			p.SelectStmt()
		}

	case ClickHouseParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1248)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1249)
			p.SelectUnionStmt()
		}
		{
			p.SetState(1250)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStmtContext is an interface to support dynamic dispatch.
type ISelectStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	WithClause() IWithClauseContext
	DISTINCT() antlr.TerminalNode
	TopClause() ITopClauseContext
	FromClause() IFromClauseContext
	ArrayJoinClause() IArrayJoinClauseContext
	WindowClause() IWindowClauseContext
	PrewhereClause() IPrewhereClauseContext
	WhereClause() IWhereClauseContext
	GroupByClause() IGroupByClauseContext
	AllWITH() []antlr.TerminalNode
	WITH(i int) antlr.TerminalNode
	TOTALS() antlr.TerminalNode
	HavingClause() IHavingClauseContext
	OrderByClause() IOrderByClauseContext
	LimitByClause() ILimitByClauseContext
	LimitClause() ILimitClauseContext
	SettingsClause() ISettingsClauseContext
	CUBE() antlr.TerminalNode
	ROLLUP() antlr.TerminalNode

	// IsSelectStmtContext differentiates from other interfaces.
	IsSelectStmtContext()
}

type SelectStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStmtContext() *SelectStmtContext {
	var p = new(SelectStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmt
	return p
}

func InitEmptySelectStmtContext(p *SelectStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_selectStmt
}

func (*SelectStmtContext) IsSelectStmtContext() {}

func NewSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStmtContext {
	var p = new(SelectStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_selectStmt

	return p
}

func (s *SelectStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStmtContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSELECT, 0)
}

func (s *SelectStmtContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *SelectStmtContext) WithClause() IWithClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWithClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *SelectStmtContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *SelectStmtContext) TopClause() ITopClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITopClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITopClauseContext)
}

func (s *SelectStmtContext) FromClause() IFromClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFromClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *SelectStmtContext) ArrayJoinClause() IArrayJoinClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayJoinClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayJoinClauseContext)
}

func (s *SelectStmtContext) WindowClause() IWindowClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowClauseContext)
}

func (s *SelectStmtContext) PrewhereClause() IPrewhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrewhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrewhereClauseContext)
}

func (s *SelectStmtContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *SelectStmtContext) GroupByClause() IGroupByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *SelectStmtContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserWITH)
}

func (s *SelectStmtContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, i)
}

func (s *SelectStmtContext) TOTALS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOTALS, 0)
}

func (s *SelectStmtContext) HavingClause() IHavingClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHavingClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *SelectStmtContext) OrderByClause() IOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SelectStmtContext) LimitByClause() ILimitByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitByClauseContext)
}

func (s *SelectStmtContext) LimitClause() ILimitClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SelectStmtContext) SettingsClause() ISettingsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingsClauseContext)
}

func (s *SelectStmtContext) CUBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCUBE, 0)
}

func (s *SelectStmtContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROLLUP, 0)
}

func (s *SelectStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSelectStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SelectStmt() (localctx ISelectStmtContext) {
	localctx = NewSelectStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ClickHouseParserRULE_selectStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(1254)
			p.WithClause()
		}

	}
	{
		p.SetState(1257)
		p.Match(ClickHouseParserSELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1259)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1258)
			p.Match(ClickHouseParserDISTINCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1262)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1261)
			p.TopClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1264)
		p.ColumnExprList()
	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserFROM {
		{
			p.SetState(1265)
			p.FromClause()
		}

	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserARRAY || _la == ClickHouseParserINNER || _la == ClickHouseParserLEFT {
		{
			p.SetState(1268)
			p.ArrayJoinClause()
		}

	}
	p.SetState(1272)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWINDOW {
		{
			p.SetState(1271)
			p.WindowClause()
		}

	}
	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserPREWHERE {
		{
			p.SetState(1274)
			p.PrewhereClause()
		}

	}
	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWHERE {
		{
			p.SetState(1277)
			p.WhereClause()
		}

	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserGROUP {
		{
			p.SetState(1280)
			p.GroupByClause()
		}

	}
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1283)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1284)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserCUBE || _la == ClickHouseParserROLLUP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1289)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(1287)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1288)
			p.Match(ClickHouseParserTOTALS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1292)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserHAVING {
		{
			p.SetState(1291)
			p.HavingClause()
		}

	}
	p.SetState(1295)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserORDER {
		{
			p.SetState(1294)
			p.OrderByClause()
		}

	}
	p.SetState(1298)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1297)
			p.LimitByClause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1301)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserLIMIT {
		{
			p.SetState(1300)
			p.LimitClause()
		}

	}
	p.SetState(1304)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserSETTINGS {
		{
			p.SetState(1303)
			p.SettingsClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWithClauseContext is an interface to support dynamic dispatch.
type IWithClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsWithClauseContext differentiates from other interfaces.
	IsWithClauseContext()
}

type WithClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithClauseContext() *WithClauseContext {
	var p = new(WithClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_withClause
	return p
}

func InitEmptyWithClauseContext(p *WithClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_withClause
}

func (*WithClauseContext) IsWithClauseContext() {}

func NewWithClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithClauseContext {
	var p = new(WithClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_withClause

	return p
}

func (s *WithClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WithClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *WithClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *WithClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWithClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WithClause() (localctx IWithClauseContext) {
	localctx = NewWithClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ClickHouseParserRULE_withClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1306)
		p.Match(ClickHouseParserWITH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1307)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITopClauseContext is an interface to support dynamic dispatch.
type ITopClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TOP() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode
	WITH() antlr.TerminalNode
	TIES() antlr.TerminalNode

	// IsTopClauseContext differentiates from other interfaces.
	IsTopClauseContext()
}

type TopClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTopClauseContext() *TopClauseContext {
	var p = new(TopClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_topClause
	return p
}

func InitEmptyTopClauseContext(p *TopClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_topClause
}

func (*TopClauseContext) IsTopClauseContext() {}

func NewTopClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TopClauseContext {
	var p = new(TopClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_topClause

	return p
}

func (s *TopClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TopClauseContext) TOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOP, 0)
}

func (s *TopClauseContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *TopClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *TopClauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *TopClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TopClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TopClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTopClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TopClause() (localctx ITopClauseContext) {
	localctx = NewTopClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ClickHouseParserRULE_topClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1309)
		p.Match(ClickHouseParserTOP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1310)
		p.Match(ClickHouseParserDECIMAL_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1313)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 166, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1311)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1312)
			p.Match(ClickHouseParserTIES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM() antlr.TerminalNode
	JoinExpr() IJoinExprContext

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_fromClause
	return p
}

func InitEmptyFromClauseContext(p *FromClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_fromClause
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *FromClauseContext) JoinExpr() IJoinExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFromClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ClickHouseParserRULE_fromClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1315)
		p.Match(ClickHouseParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1316)
		p.joinExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayJoinClauseContext is an interface to support dynamic dispatch.
type IArrayJoinClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY() antlr.TerminalNode
	JOIN() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	LEFT() antlr.TerminalNode
	INNER() antlr.TerminalNode

	// IsArrayJoinClauseContext differentiates from other interfaces.
	IsArrayJoinClauseContext()
}

type ArrayJoinClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayJoinClauseContext() *ArrayJoinClauseContext {
	var p = new(ArrayJoinClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_arrayJoinClause
	return p
}

func InitEmptyArrayJoinClauseContext(p *ArrayJoinClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_arrayJoinClause
}

func (*ArrayJoinClauseContext) IsArrayJoinClauseContext() {}

func NewArrayJoinClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayJoinClauseContext {
	var p = new(ArrayJoinClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_arrayJoinClause

	return p
}

func (s *ArrayJoinClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayJoinClauseContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserARRAY, 0)
}

func (s *ArrayJoinClauseContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *ArrayJoinClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ArrayJoinClauseContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEFT, 0)
}

func (s *ArrayJoinClauseContext) INNER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINNER, 0)
}

func (s *ArrayJoinClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayJoinClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayJoinClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitArrayJoinClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ArrayJoinClause() (localctx IArrayJoinClauseContext) {
	localctx = NewArrayJoinClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ClickHouseParserRULE_arrayJoinClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1319)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserINNER || _la == ClickHouseParserLEFT {
		{
			p.SetState(1318)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserINNER || _la == ClickHouseParserLEFT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1321)
		p.Match(ClickHouseParserARRAY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1322)
		p.Match(ClickHouseParserJOIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1323)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowClauseContext is an interface to support dynamic dispatch.
type IWindowClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WINDOW() antlr.TerminalNode
	Identifier() IIdentifierContext
	AS() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	WindowExpr() IWindowExprContext
	RPAREN() antlr.TerminalNode

	// IsWindowClauseContext differentiates from other interfaces.
	IsWindowClauseContext()
}

type WindowClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowClauseContext() *WindowClauseContext {
	var p = new(WindowClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowClause
	return p
}

func InitEmptyWindowClauseContext(p *WindowClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowClause
}

func (*WindowClauseContext) IsWindowClauseContext() {}

func NewWindowClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowClauseContext {
	var p = new(WindowClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_windowClause

	return p
}

func (s *WindowClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowClauseContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWINDOW, 0)
}

func (s *WindowClauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *WindowClauseContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *WindowClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *WindowClauseContext) WindowExpr() IWindowExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowExprContext)
}

func (s *WindowClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *WindowClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWindowClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WindowClause() (localctx IWindowClauseContext) {
	localctx = NewWindowClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ClickHouseParserRULE_windowClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1325)
		p.Match(ClickHouseParserWINDOW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1326)
		p.Identifier()
	}
	{
		p.SetState(1327)
		p.Match(ClickHouseParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1328)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1329)
		p.WindowExpr()
	}
	{
		p.SetState(1330)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrewhereClauseContext is an interface to support dynamic dispatch.
type IPrewhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PREWHERE() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsPrewhereClauseContext differentiates from other interfaces.
	IsPrewhereClauseContext()
}

type PrewhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrewhereClauseContext() *PrewhereClauseContext {
	var p = new(PrewhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_prewhereClause
	return p
}

func InitEmptyPrewhereClauseContext(p *PrewhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_prewhereClause
}

func (*PrewhereClauseContext) IsPrewhereClauseContext() {}

func NewPrewhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrewhereClauseContext {
	var p = new(PrewhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_prewhereClause

	return p
}

func (s *PrewhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrewhereClauseContext) PREWHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPREWHERE, 0)
}

func (s *PrewhereClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *PrewhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrewhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrewhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitPrewhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) PrewhereClause() (localctx IPrewhereClauseContext) {
	localctx = NewPrewhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ClickHouseParserRULE_prewhereClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1332)
		p.Match(ClickHouseParserPREWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1333)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_whereClause
	return p
}

func InitEmptyWhereClauseContext(p *WhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_whereClause
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHERE, 0)
}

func (s *WhereClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WhereClause() (localctx IWhereClauseContext) {
	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ClickHouseParserRULE_whereClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1335)
		p.Match(ClickHouseParserWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1336)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUP() antlr.TerminalNode
	BY() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	RPAREN() antlr.TerminalNode
	CUBE() antlr.TerminalNode
	ROLLUP() antlr.TerminalNode

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_groupByClause
	return p
}

func InitEmptyGroupByClauseContext(p *GroupByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_groupByClause
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGROUP, 0)
}

func (s *GroupByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *GroupByClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *GroupByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *GroupByClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *GroupByClauseContext) CUBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCUBE, 0)
}

func (s *GroupByClauseContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROLLUP, 0)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitGroupByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) GroupByClause() (localctx IGroupByClauseContext) {
	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ClickHouseParserRULE_groupByClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1338)
		p.Match(ClickHouseParserGROUP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1339)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1346)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 168, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1340)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserCUBE || _la == ClickHouseParserROLLUP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1341)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1342)
			p.ColumnExprList()
		}
		{
			p.SetState(1343)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(1345)
			p.ColumnExprList()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HAVING() antlr.TerminalNode
	ColumnExpr() IColumnExprContext

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_havingClause
	return p
}

func InitEmptyHavingClauseContext(p *HavingClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_havingClause
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHAVING, 0)
}

func (s *HavingClauseContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitHavingClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) HavingClause() (localctx IHavingClauseContext) {
	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ClickHouseParserRULE_havingClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1348)
		p.Match(ClickHouseParserHAVING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1349)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	OrderExprList() IOrderExprListContext

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderByClause
	return p
}

func InitEmptyOrderByClauseContext(p *OrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderByClause
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *OrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *OrderByClauseContext) OrderExprList() IOrderExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderExprListContext)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ClickHouseParserRULE_orderByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1351)
		p.Match(ClickHouseParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1352)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1353)
		p.OrderExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProjectionOrderByClauseContext is an interface to support dynamic dispatch.
type IProjectionOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsProjectionOrderByClauseContext differentiates from other interfaces.
	IsProjectionOrderByClauseContext()
}

type ProjectionOrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionOrderByClauseContext() *ProjectionOrderByClauseContext {
	var p = new(ProjectionOrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_projectionOrderByClause
	return p
}

func InitEmptyProjectionOrderByClauseContext(p *ProjectionOrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_projectionOrderByClause
}

func (*ProjectionOrderByClauseContext) IsProjectionOrderByClauseContext() {}

func NewProjectionOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionOrderByClauseContext {
	var p = new(ProjectionOrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_projectionOrderByClause

	return p
}

func (s *ProjectionOrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionOrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *ProjectionOrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *ProjectionOrderByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ProjectionOrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionOrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionOrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitProjectionOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ProjectionOrderByClause() (localctx IProjectionOrderByClauseContext) {
	localctx = NewProjectionOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, ClickHouseParserRULE_projectionOrderByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1355)
		p.Match(ClickHouseParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1356)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1357)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitByClauseContext is an interface to support dynamic dispatch.
type ILimitByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT() antlr.TerminalNode
	LimitExpr() ILimitExprContext
	BY() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsLimitByClauseContext differentiates from other interfaces.
	IsLimitByClauseContext()
}

type LimitByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitByClauseContext() *LimitByClauseContext {
	var p = new(LimitByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitByClause
	return p
}

func InitEmptyLimitByClauseContext(p *LimitByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitByClause
}

func (*LimitByClauseContext) IsLimitByClauseContext() {}

func NewLimitByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitByClauseContext {
	var p = new(LimitByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_limitByClause

	return p
}

func (s *LimitByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitByClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *LimitByClauseContext) LimitExpr() ILimitExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitExprContext)
}

func (s *LimitByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *LimitByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *LimitByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLimitByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LimitByClause() (localctx ILimitByClauseContext) {
	localctx = NewLimitByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, ClickHouseParserRULE_limitByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1359)
		p.Match(ClickHouseParserLIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1360)
		p.LimitExpr()
	}
	{
		p.SetState(1361)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1362)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT() antlr.TerminalNode
	LimitExpr() ILimitExprContext
	WITH() antlr.TerminalNode
	TIES() antlr.TerminalNode

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitClause
	return p
}

func InitEmptyLimitClauseContext(p *LimitClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitClause
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *LimitClauseContext) LimitExpr() ILimitExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitExprContext)
}

func (s *LimitClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *LimitClauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLimitClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, ClickHouseParserRULE_limitClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1364)
		p.Match(ClickHouseParserLIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1365)
		p.LimitExpr()
	}
	p.SetState(1368)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserWITH {
		{
			p.SetState(1366)
			p.Match(ClickHouseParserWITH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1367)
			p.Match(ClickHouseParserTIES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISettingsClauseContext is an interface to support dynamic dispatch.
type ISettingsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SETTINGS() antlr.TerminalNode
	SettingExprList() ISettingExprListContext

	// IsSettingsClauseContext differentiates from other interfaces.
	IsSettingsClauseContext()
}

type SettingsClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySettingsClauseContext() *SettingsClauseContext {
	var p = new(SettingsClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingsClause
	return p
}

func InitEmptySettingsClauseContext(p *SettingsClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingsClause
}

func (*SettingsClauseContext) IsSettingsClauseContext() {}

func NewSettingsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SettingsClauseContext {
	var p = new(SettingsClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_settingsClause

	return p
}

func (s *SettingsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SettingsClauseContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSETTINGS, 0)
}

func (s *SettingsClauseContext) SettingExprList() ISettingExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprListContext)
}

func (s *SettingsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SettingsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SettingsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSettingsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SettingsClause() (localctx ISettingsClauseContext) {
	localctx = NewSettingsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, ClickHouseParserRULE_settingsClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1370)
		p.Match(ClickHouseParserSETTINGS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1371)
		p.SettingExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinExprContext is an interface to support dynamic dispatch.
type IJoinExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsJoinExprContext differentiates from other interfaces.
	IsJoinExprContext()
}

type JoinExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinExprContext() *JoinExprContext {
	var p = new(JoinExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinExpr
	return p
}

func InitEmptyJoinExprContext(p *JoinExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinExpr
}

func (*JoinExprContext) IsJoinExprContext() {}

func NewJoinExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinExprContext {
	var p = new(JoinExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinExpr

	return p
}

func (s *JoinExprContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinExprContext) CopyAll(ctx *JoinExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *JoinExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type JoinExprOpContext struct {
	JoinExprContext
}

func NewJoinExprOpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprOpContext {
	var p = new(JoinExprOpContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprOpContext) AllJoinExpr() []IJoinExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinExprContext); ok {
			len++
		}
	}

	tst := make([]IJoinExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinExprContext); ok {
			tst[i] = t.(IJoinExprContext)
			i++
		}
	}

	return tst
}

func (s *JoinExprOpContext) JoinExpr(i int) IJoinExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *JoinExprOpContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *JoinExprOpContext) JoinConstraintClause() IJoinConstraintClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinConstraintClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinConstraintClauseContext)
}

func (s *JoinExprOpContext) JoinOp() IJoinOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinOpContext)
}

func (s *JoinExprOpContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *JoinExprOpContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *JoinExprOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprOp(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinExprTableContext struct {
	JoinExprContext
}

func NewJoinExprTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprTableContext {
	var p = new(JoinExprTableContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprTableContext) TableExpr() ITableExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableExprContext)
}

func (s *JoinExprTableContext) FINAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFINAL, 0)
}

func (s *JoinExprTableContext) SampleClause() ISampleClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISampleClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISampleClauseContext)
}

func (s *JoinExprTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinExprParensContext struct {
	JoinExprContext
}

func NewJoinExprParensContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprParensContext {
	var p = new(JoinExprParensContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprParensContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *JoinExprParensContext) JoinExpr() IJoinExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *JoinExprParensContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *JoinExprParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprParens(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinExprCrossOpContext struct {
	JoinExprContext
}

func NewJoinExprCrossOpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinExprCrossOpContext {
	var p = new(JoinExprCrossOpContext)

	InitEmptyJoinExprContext(&p.JoinExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinExprContext))

	return p
}

func (s *JoinExprCrossOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinExprCrossOpContext) AllJoinExpr() []IJoinExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoinExprContext); ok {
			len++
		}
	}

	tst := make([]IJoinExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoinExprContext); ok {
			tst[i] = t.(IJoinExprContext)
			i++
		}
	}

	return tst
}

func (s *JoinExprCrossOpContext) JoinExpr(i int) IJoinExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinExprContext)
}

func (s *JoinExprCrossOpContext) JoinOpCross() IJoinOpCrossContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinOpCrossContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinOpCrossContext)
}

func (s *JoinExprCrossOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinExprCrossOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinExpr() (localctx IJoinExprContext) {
	return p.joinExpr(0)
}

func (p *ClickHouseParser) joinExpr(_p int) (localctx IJoinExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewJoinExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IJoinExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 146
	p.EnterRecursionRule(localctx, 146, ClickHouseParserRULE_joinExpr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1385)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 172, p.GetParserRuleContext()) {
	case 1:
		localctx = NewJoinExprTableContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1374)
			p.tableExpr(0)
		}
		p.SetState(1376)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1375)
				p.Match(ClickHouseParserFINAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1379)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1378)
				p.SampleClause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewJoinExprParensContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1381)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1382)
			p.joinExpr(0)
		}
		{
			p.SetState(1383)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1404)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1402)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 175, p.GetParserRuleContext()) {
			case 1:
				localctx = NewJoinExprCrossOpContext(p, NewJoinExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_joinExpr)
				p.SetState(1387)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(1388)
					p.JoinOpCross()
				}
				{
					p.SetState(1389)
					p.joinExpr(4)
				}

			case 2:
				localctx = NewJoinExprOpContext(p, NewJoinExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_joinExpr)
				p.SetState(1391)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				p.SetState(1393)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL {
					{
						p.SetState(1392)
						_la = p.GetTokenStream().LA(1)

						if !(_la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				p.SetState(1396)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&134250497) != 0) || _la == ClickHouseParserRIGHT || _la == ClickHouseParserSEMI {
					{
						p.SetState(1395)
						p.JoinOp()
					}

				}
				{
					p.SetState(1398)
					p.Match(ClickHouseParserJOIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1399)
					p.joinExpr(0)
				}
				{
					p.SetState(1400)
					p.JoinConstraintClause()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1406)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinOpContext is an interface to support dynamic dispatch.
type IJoinOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsJoinOpContext differentiates from other interfaces.
	IsJoinOpContext()
}

type JoinOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinOpContext() *JoinOpContext {
	var p = new(JoinOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOp
	return p
}

func InitEmptyJoinOpContext(p *JoinOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOp
}

func (*JoinOpContext) IsJoinOpContext() {}

func NewJoinOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinOpContext {
	var p = new(JoinOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinOp

	return p
}

func (s *JoinOpContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinOpContext) CopyAll(ctx *JoinOpContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *JoinOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type JoinOpFullContext struct {
	JoinOpContext
}

func NewJoinOpFullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinOpFullContext {
	var p = new(JoinOpFullContext)

	InitEmptyJoinOpContext(&p.JoinOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinOpContext))

	return p
}

func (s *JoinOpFullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpFullContext) FULL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFULL, 0)
}

func (s *JoinOpFullContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *JoinOpFullContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *JoinOpFullContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *JoinOpFullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpFull(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinOpInnerContext struct {
	JoinOpContext
}

func NewJoinOpInnerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinOpInnerContext {
	var p = new(JoinOpInnerContext)

	InitEmptyJoinOpContext(&p.JoinOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinOpContext))

	return p
}

func (s *JoinOpInnerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpInnerContext) INNER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINNER, 0)
}

func (s *JoinOpInnerContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *JoinOpInnerContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *JoinOpInnerContext) ASOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASOF, 0)
}

func (s *JoinOpInnerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpInner(s)

	default:
		return t.VisitChildren(s)
	}
}

type JoinOpLeftRightContext struct {
	JoinOpContext
}

func NewJoinOpLeftRightContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinOpLeftRightContext {
	var p = new(JoinOpLeftRightContext)

	InitEmptyJoinOpContext(&p.JoinOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinOpContext))

	return p
}

func (s *JoinOpLeftRightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpLeftRightContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEFT, 0)
}

func (s *JoinOpLeftRightContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRIGHT, 0)
}

func (s *JoinOpLeftRightContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *JoinOpLeftRightContext) SEMI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMI, 0)
}

func (s *JoinOpLeftRightContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *JoinOpLeftRightContext) ANTI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANTI, 0)
}

func (s *JoinOpLeftRightContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *JoinOpLeftRightContext) ASOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASOF, 0)
}

func (s *JoinOpLeftRightContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpLeftRight(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinOp() (localctx IJoinOpContext) {
	localctx = NewJoinOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, ClickHouseParserRULE_joinOp)
	var _la int

	p.SetState(1450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		localctx = NewJoinOpInnerContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1416)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1408)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0 {
				{
					p.SetState(1407)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(1410)
				p.Match(ClickHouseParserINNER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 2:
			{
				p.SetState(1411)
				p.Match(ClickHouseParserINNER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1413)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0 {
				{
					p.SetState(1412)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case 3:
			{
				p.SetState(1415)
				_la = p.GetTokenStream().LA(1)

				if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4368) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 2:
		localctx = NewJoinOpLeftRightContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1432)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 184, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1419)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI {
				{
					p.SetState(1418)
					_la = p.GetTokenStream().LA(1)

					if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(1421)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserLEFT || _la == ClickHouseParserRIGHT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(1423)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(1422)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case 2:
			{
				p.SetState(1425)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserLEFT || _la == ClickHouseParserRIGHT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(1427)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(1426)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1430)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI {
				{
					p.SetState(1429)
					_la = p.GetTokenStream().LA(1)

					if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4496) != 0) || _la == ClickHouseParserSEMI) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 3:
		localctx = NewJoinOpFullContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1448)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 189, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1435)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserALL || _la == ClickHouseParserANY {
				{
					p.SetState(1434)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ClickHouseParserALL || _la == ClickHouseParserANY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(1437)
				p.Match(ClickHouseParserFULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1439)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(1438)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case 2:
			{
				p.SetState(1441)
				p.Match(ClickHouseParserFULL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1443)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserOUTER {
				{
					p.SetState(1442)
					p.Match(ClickHouseParserOUTER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1446)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserALL || _la == ClickHouseParserANY {
				{
					p.SetState(1445)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ClickHouseParserALL || _la == ClickHouseParserANY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinOpCrossContext is an interface to support dynamic dispatch.
type IJoinOpCrossContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CROSS() antlr.TerminalNode
	JOIN() antlr.TerminalNode
	GLOBAL() antlr.TerminalNode
	LOCAL() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsJoinOpCrossContext differentiates from other interfaces.
	IsJoinOpCrossContext()
}

type JoinOpCrossContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinOpCrossContext() *JoinOpCrossContext {
	var p = new(JoinOpCrossContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOpCross
	return p
}

func InitEmptyJoinOpCrossContext(p *JoinOpCrossContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinOpCross
}

func (*JoinOpCrossContext) IsJoinOpCrossContext() {}

func NewJoinOpCrossContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinOpCrossContext {
	var p = new(JoinOpCrossContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinOpCross

	return p
}

func (s *JoinOpCrossContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinOpCrossContext) CROSS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCROSS, 0)
}

func (s *JoinOpCrossContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *JoinOpCrossContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *JoinOpCrossContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *JoinOpCrossContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, 0)
}

func (s *JoinOpCrossContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinOpCrossContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinOpCrossContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinOpCross(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinOpCross() (localctx IJoinOpCrossContext) {
	localctx = NewJoinOpCrossContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, ClickHouseParserRULE_joinOpCross)
	var _la int

	p.SetState(1458)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserCROSS, ClickHouseParserGLOBAL, ClickHouseParserLOCAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1453)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL {
			{
				p.SetState(1452)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserGLOBAL || _la == ClickHouseParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1455)
			p.Match(ClickHouseParserCROSS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1456)
			p.Match(ClickHouseParserJOIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserCOMMA:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1457)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinConstraintClauseContext is an interface to support dynamic dispatch.
type IJoinConstraintClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext
	USING() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode

	// IsJoinConstraintClauseContext differentiates from other interfaces.
	IsJoinConstraintClauseContext()
}

type JoinConstraintClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinConstraintClauseContext() *JoinConstraintClauseContext {
	var p = new(JoinConstraintClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinConstraintClause
	return p
}

func InitEmptyJoinConstraintClauseContext(p *JoinConstraintClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_joinConstraintClause
}

func (*JoinConstraintClauseContext) IsJoinConstraintClauseContext() {}

func NewJoinConstraintClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinConstraintClauseContext {
	var p = new(JoinConstraintClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_joinConstraintClause

	return p
}

func (s *JoinConstraintClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinConstraintClauseContext) ON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserON, 0)
}

func (s *JoinConstraintClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *JoinConstraintClauseContext) USING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSING, 0)
}

func (s *JoinConstraintClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *JoinConstraintClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *JoinConstraintClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinConstraintClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinConstraintClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitJoinConstraintClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) JoinConstraintClause() (localctx IJoinConstraintClauseContext) {
	localctx = NewJoinConstraintClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, ClickHouseParserRULE_joinConstraintClause)
	p.SetState(1469)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 193, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1460)
			p.Match(ClickHouseParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1461)
			p.ColumnExprList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1462)
			p.Match(ClickHouseParserUSING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1463)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1464)
			p.ColumnExprList()
		}
		{
			p.SetState(1465)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1467)
			p.Match(ClickHouseParserUSING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1468)
			p.ColumnExprList()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISampleClauseContext is an interface to support dynamic dispatch.
type ISampleClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SAMPLE() antlr.TerminalNode
	AllRatioExpr() []IRatioExprContext
	RatioExpr(i int) IRatioExprContext
	OFFSET() antlr.TerminalNode

	// IsSampleClauseContext differentiates from other interfaces.
	IsSampleClauseContext()
}

type SampleClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySampleClauseContext() *SampleClauseContext {
	var p = new(SampleClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sampleClause
	return p
}

func InitEmptySampleClauseContext(p *SampleClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_sampleClause
}

func (*SampleClauseContext) IsSampleClauseContext() {}

func NewSampleClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampleClauseContext {
	var p = new(SampleClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_sampleClause

	return p
}

func (s *SampleClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SampleClauseContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSAMPLE, 0)
}

func (s *SampleClauseContext) AllRatioExpr() []IRatioExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRatioExprContext); ok {
			len++
		}
	}

	tst := make([]IRatioExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRatioExprContext); ok {
			tst[i] = t.(IRatioExprContext)
			i++
		}
	}

	return tst
}

func (s *SampleClauseContext) RatioExpr(i int) IRatioExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRatioExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRatioExprContext)
}

func (s *SampleClauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOFFSET, 0)
}

func (s *SampleClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampleClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SampleClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSampleClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SampleClause() (localctx ISampleClauseContext) {
	localctx = NewSampleClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, ClickHouseParserRULE_sampleClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1471)
		p.Match(ClickHouseParserSAMPLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1472)
		p.RatioExpr()
	}
	p.SetState(1475)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1473)
			p.Match(ClickHouseParserOFFSET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1474)
			p.RatioExpr()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitExprContext is an interface to support dynamic dispatch.
type ILimitExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnExpr() []IColumnExprContext
	ColumnExpr(i int) IColumnExprContext
	COMMA() antlr.TerminalNode
	OFFSET() antlr.TerminalNode

	// IsLimitExprContext differentiates from other interfaces.
	IsLimitExprContext()
}

type LimitExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitExprContext() *LimitExprContext {
	var p = new(LimitExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitExpr
	return p
}

func InitEmptyLimitExprContext(p *LimitExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_limitExpr
}

func (*LimitExprContext) IsLimitExprContext() {}

func NewLimitExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitExprContext {
	var p = new(LimitExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_limitExpr

	return p
}

func (s *LimitExprContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitExprContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *LimitExprContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *LimitExprContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, 0)
}

func (s *LimitExprContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOFFSET, 0)
}

func (s *LimitExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLimitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) LimitExpr() (localctx ILimitExprContext) {
	localctx = NewLimitExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, ClickHouseParserRULE_limitExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1477)
		p.columnExpr(0)
	}
	p.SetState(1480)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserOFFSET || _la == ClickHouseParserCOMMA {
		{
			p.SetState(1478)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserOFFSET || _la == ClickHouseParserCOMMA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1479)
			p.columnExpr(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderExprListContext is an interface to support dynamic dispatch.
type IOrderExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOrderExpr() []IOrderExprContext
	OrderExpr(i int) IOrderExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOrderExprListContext differentiates from other interfaces.
	IsOrderExprListContext()
}

type OrderExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderExprListContext() *OrderExprListContext {
	var p = new(OrderExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExprList
	return p
}

func InitEmptyOrderExprListContext(p *OrderExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExprList
}

func (*OrderExprListContext) IsOrderExprListContext() {}

func NewOrderExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderExprListContext {
	var p = new(OrderExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_orderExprList

	return p
}

func (s *OrderExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderExprListContext) AllOrderExpr() []IOrderExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderExprContext); ok {
			len++
		}
	}

	tst := make([]IOrderExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderExprContext); ok {
			tst[i] = t.(IOrderExprContext)
			i++
		}
	}

	return tst
}

func (s *OrderExprListContext) OrderExpr(i int) IOrderExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderExprContext)
}

func (s *OrderExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *OrderExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *OrderExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOrderExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OrderExprList() (localctx IOrderExprListContext) {
	localctx = NewOrderExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, ClickHouseParserRULE_orderExprList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1482)
		p.OrderExpr()
	}
	p.SetState(1487)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 196, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1483)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1484)
				p.OrderExpr()
			}

		}
		p.SetState(1489)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 196, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderExprContext is an interface to support dynamic dispatch.
type IOrderExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnExpr() IColumnExprContext
	NULLS() antlr.TerminalNode
	COLLATE() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	ASCENDING() antlr.TerminalNode
	DESCENDING() antlr.TerminalNode
	DESC() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	LAST() antlr.TerminalNode

	// IsOrderExprContext differentiates from other interfaces.
	IsOrderExprContext()
}

type OrderExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderExprContext() *OrderExprContext {
	var p = new(OrderExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExpr
	return p
}

func InitEmptyOrderExprContext(p *OrderExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_orderExpr
}

func (*OrderExprContext) IsOrderExprContext() {}

func NewOrderExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderExprContext {
	var p = new(OrderExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_orderExpr

	return p
}

func (s *OrderExprContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *OrderExprContext) NULLS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULLS, 0)
}

func (s *OrderExprContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLLATE, 0)
}

func (s *OrderExprContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *OrderExprContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASCENDING, 0)
}

func (s *OrderExprContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCENDING, 0)
}

func (s *OrderExprContext) DESC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESC, 0)
}

func (s *OrderExprContext) FIRST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFIRST, 0)
}

func (s *OrderExprContext) LAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAST, 0)
}

func (s *OrderExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitOrderExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) OrderExpr() (localctx IOrderExprContext) {
	localctx = NewOrderExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, ClickHouseParserRULE_orderExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1490)
		p.columnExpr(0)
	}
	p.SetState(1492)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1491)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&6597069768704) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1496)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1494)
			p.Match(ClickHouseParserNULLS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1495)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserFIRST || _la == ClickHouseParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1500)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 199, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1498)
			p.Match(ClickHouseParserCOLLATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1499)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRatioExprContext is an interface to support dynamic dispatch.
type IRatioExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNumberLiteral() []INumberLiteralContext
	NumberLiteral(i int) INumberLiteralContext
	SLASH() antlr.TerminalNode

	// IsRatioExprContext differentiates from other interfaces.
	IsRatioExprContext()
}

type RatioExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRatioExprContext() *RatioExprContext {
	var p = new(RatioExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ratioExpr
	return p
}

func InitEmptyRatioExprContext(p *RatioExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_ratioExpr
}

func (*RatioExprContext) IsRatioExprContext() {}

func NewRatioExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RatioExprContext {
	var p = new(RatioExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_ratioExpr

	return p
}

func (s *RatioExprContext) GetParser() antlr.Parser { return s.parser }

func (s *RatioExprContext) AllNumberLiteral() []INumberLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberLiteralContext); ok {
			len++
		}
	}

	tst := make([]INumberLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberLiteralContext); ok {
			tst[i] = t.(INumberLiteralContext)
			i++
		}
	}

	return tst
}

func (s *RatioExprContext) NumberLiteral(i int) INumberLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *RatioExprContext) SLASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSLASH, 0)
}

func (s *RatioExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RatioExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RatioExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitRatioExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) RatioExpr() (localctx IRatioExprContext) {
	localctx = NewRatioExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, ClickHouseParserRULE_ratioExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1502)
		p.NumberLiteral()
	}
	p.SetState(1505)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1503)
			p.Match(ClickHouseParserSLASH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1504)
			p.NumberLiteral()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISettingExprListContext is an interface to support dynamic dispatch.
type ISettingExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSettingExpr() []ISettingExprContext
	SettingExpr(i int) ISettingExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSettingExprListContext differentiates from other interfaces.
	IsSettingExprListContext()
}

type SettingExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySettingExprListContext() *SettingExprListContext {
	var p = new(SettingExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExprList
	return p
}

func InitEmptySettingExprListContext(p *SettingExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExprList
}

func (*SettingExprListContext) IsSettingExprListContext() {}

func NewSettingExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SettingExprListContext {
	var p = new(SettingExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_settingExprList

	return p
}

func (s *SettingExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *SettingExprListContext) AllSettingExpr() []ISettingExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISettingExprContext); ok {
			len++
		}
	}

	tst := make([]ISettingExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISettingExprContext); ok {
			tst[i] = t.(ISettingExprContext)
			i++
		}
	}

	return tst
}

func (s *SettingExprListContext) SettingExpr(i int) ISettingExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprContext)
}

func (s *SettingExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *SettingExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *SettingExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SettingExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SettingExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSettingExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SettingExprList() (localctx ISettingExprListContext) {
	localctx = NewSettingExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, ClickHouseParserRULE_settingExprList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1507)
		p.SettingExpr()
	}
	p.SetState(1512)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1508)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1509)
				p.SettingExpr()
			}

		}
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISettingExprContext is an interface to support dynamic dispatch.
type ISettingExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	EQ_SINGLE() antlr.TerminalNode
	Literal() ILiteralContext

	// IsSettingExprContext differentiates from other interfaces.
	IsSettingExprContext()
}

type SettingExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySettingExprContext() *SettingExprContext {
	var p = new(SettingExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExpr
	return p
}

func InitEmptySettingExprContext(p *SettingExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_settingExpr
}

func (*SettingExprContext) IsSettingExprContext() {}

func NewSettingExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SettingExprContext {
	var p = new(SettingExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_settingExpr

	return p
}

func (s *SettingExprContext) GetParser() antlr.Parser { return s.parser }

func (s *SettingExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SettingExprContext) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *SettingExprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *SettingExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SettingExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SettingExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSettingExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SettingExpr() (localctx ISettingExprContext) {
	localctx = NewSettingExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, ClickHouseParserRULE_settingExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1515)
		p.Identifier()
	}
	{
		p.SetState(1516)
		p.Match(ClickHouseParserEQ_SINGLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1517)
		p.Literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowExprContext is an interface to support dynamic dispatch.
type IWindowExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WinPartitionByClause() IWinPartitionByClauseContext
	WinOrderByClause() IWinOrderByClauseContext
	WinFrameClause() IWinFrameClauseContext

	// IsWindowExprContext differentiates from other interfaces.
	IsWindowExprContext()
}

type WindowExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowExprContext() *WindowExprContext {
	var p = new(WindowExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowExpr
	return p
}

func InitEmptyWindowExprContext(p *WindowExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_windowExpr
}

func (*WindowExprContext) IsWindowExprContext() {}

func NewWindowExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowExprContext {
	var p = new(WindowExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_windowExpr

	return p
}

func (s *WindowExprContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowExprContext) WinPartitionByClause() IWinPartitionByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinPartitionByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinPartitionByClauseContext)
}

func (s *WindowExprContext) WinOrderByClause() IWinOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinOrderByClauseContext)
}

func (s *WindowExprContext) WinFrameClause() IWinFrameClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameClauseContext)
}

func (s *WindowExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWindowExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WindowExpr() (localctx IWindowExprContext) {
	localctx = NewWindowExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, ClickHouseParserRULE_windowExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1520)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserPARTITION {
		{
			p.SetState(1519)
			p.WinPartitionByClause()
		}

	}
	p.SetState(1523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserORDER {
		{
			p.SetState(1522)
			p.WinOrderByClause()
		}

	}
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserRANGE || _la == ClickHouseParserROWS {
		{
			p.SetState(1525)
			p.WinFrameClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinPartitionByClauseContext is an interface to support dynamic dispatch.
type IWinPartitionByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION() antlr.TerminalNode
	BY() antlr.TerminalNode
	ColumnExprList() IColumnExprListContext

	// IsWinPartitionByClauseContext differentiates from other interfaces.
	IsWinPartitionByClauseContext()
}

type WinPartitionByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinPartitionByClauseContext() *WinPartitionByClauseContext {
	var p = new(WinPartitionByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winPartitionByClause
	return p
}

func InitEmptyWinPartitionByClauseContext(p *WinPartitionByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winPartitionByClause
}

func (*WinPartitionByClauseContext) IsWinPartitionByClauseContext() {}

func NewWinPartitionByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinPartitionByClauseContext {
	var p = new(WinPartitionByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winPartitionByClause

	return p
}

func (s *WinPartitionByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WinPartitionByClauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *WinPartitionByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *WinPartitionByClauseContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *WinPartitionByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinPartitionByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinPartitionByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinPartitionByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinPartitionByClause() (localctx IWinPartitionByClauseContext) {
	localctx = NewWinPartitionByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, ClickHouseParserRULE_winPartitionByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1528)
		p.Match(ClickHouseParserPARTITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1529)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1530)
		p.ColumnExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinOrderByClauseContext is an interface to support dynamic dispatch.
type IWinOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	OrderExprList() IOrderExprListContext

	// IsWinOrderByClauseContext differentiates from other interfaces.
	IsWinOrderByClauseContext()
}

type WinOrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinOrderByClauseContext() *WinOrderByClauseContext {
	var p = new(WinOrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winOrderByClause
	return p
}

func InitEmptyWinOrderByClauseContext(p *WinOrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winOrderByClause
}

func (*WinOrderByClauseContext) IsWinOrderByClauseContext() {}

func NewWinOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinOrderByClauseContext {
	var p = new(WinOrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winOrderByClause

	return p
}

func (s *WinOrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WinOrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *WinOrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *WinOrderByClauseContext) OrderExprList() IOrderExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderExprListContext)
}

func (s *WinOrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinOrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinOrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinOrderByClause() (localctx IWinOrderByClauseContext) {
	localctx = NewWinOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, ClickHouseParserRULE_winOrderByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1532)
		p.Match(ClickHouseParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1533)
		p.Match(ClickHouseParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1534)
		p.OrderExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinFrameClauseContext is an interface to support dynamic dispatch.
type IWinFrameClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WinFrameExtend() IWinFrameExtendContext
	ROWS() antlr.TerminalNode
	RANGE() antlr.TerminalNode

	// IsWinFrameClauseContext differentiates from other interfaces.
	IsWinFrameClauseContext()
}

type WinFrameClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinFrameClauseContext() *WinFrameClauseContext {
	var p = new(WinFrameClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameClause
	return p
}

func InitEmptyWinFrameClauseContext(p *WinFrameClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameClause
}

func (*WinFrameClauseContext) IsWinFrameClauseContext() {}

func NewWinFrameClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinFrameClauseContext {
	var p = new(WinFrameClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winFrameClause

	return p
}

func (s *WinFrameClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WinFrameClauseContext) WinFrameExtend() IWinFrameExtendContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameExtendContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameExtendContext)
}

func (s *WinFrameClauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROWS, 0)
}

func (s *WinFrameClauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRANGE, 0)
}

func (s *WinFrameClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinFrameClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinFrameClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinFrameClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinFrameClause() (localctx IWinFrameClauseContext) {
	localctx = NewWinFrameClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, ClickHouseParserRULE_winFrameClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1536)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserRANGE || _la == ClickHouseParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1537)
		p.WinFrameExtend()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinFrameExtendContext is an interface to support dynamic dispatch.
type IWinFrameExtendContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsWinFrameExtendContext differentiates from other interfaces.
	IsWinFrameExtendContext()
}

type WinFrameExtendContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinFrameExtendContext() *WinFrameExtendContext {
	var p = new(WinFrameExtendContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameExtend
	return p
}

func InitEmptyWinFrameExtendContext(p *WinFrameExtendContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameExtend
}

func (*WinFrameExtendContext) IsWinFrameExtendContext() {}

func NewWinFrameExtendContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinFrameExtendContext {
	var p = new(WinFrameExtendContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winFrameExtend

	return p
}

func (s *WinFrameExtendContext) GetParser() antlr.Parser { return s.parser }

func (s *WinFrameExtendContext) CopyAll(ctx *WinFrameExtendContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *WinFrameExtendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinFrameExtendContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FrameStartContext struct {
	WinFrameExtendContext
}

func NewFrameStartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FrameStartContext {
	var p = new(FrameStartContext)

	InitEmptyWinFrameExtendContext(&p.WinFrameExtendContext)
	p.parser = parser
	p.CopyAll(ctx.(*WinFrameExtendContext))

	return p
}

func (s *FrameStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameStartContext) WinFrameBound() IWinFrameBoundContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameBoundContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameBoundContext)
}

func (s *FrameStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFrameStart(s)

	default:
		return t.VisitChildren(s)
	}
}

type FrameBetweenContext struct {
	WinFrameExtendContext
}

func NewFrameBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FrameBetweenContext {
	var p = new(FrameBetweenContext)

	InitEmptyWinFrameExtendContext(&p.WinFrameExtendContext)
	p.parser = parser
	p.CopyAll(ctx.(*WinFrameExtendContext))

	return p
}

func (s *FrameBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBETWEEN, 0)
}

func (s *FrameBetweenContext) AllWinFrameBound() []IWinFrameBoundContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWinFrameBoundContext); ok {
			len++
		}
	}

	tst := make([]IWinFrameBoundContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWinFrameBoundContext); ok {
			tst[i] = t.(IWinFrameBoundContext)
			i++
		}
	}

	return tst
}

func (s *FrameBetweenContext) WinFrameBound(i int) IWinFrameBoundContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWinFrameBoundContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWinFrameBoundContext)
}

func (s *FrameBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *FrameBetweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFrameBetween(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinFrameExtend() (localctx IWinFrameExtendContext) {
	localctx = NewWinFrameExtendContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, ClickHouseParserRULE_winFrameExtend)
	p.SetState(1545)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserCURRENT, ClickHouseParserINF, ClickHouseParserNAN_SQL, ClickHouseParserUNBOUNDED, ClickHouseParserFLOATING_LITERAL, ClickHouseParserOCTAL_LITERAL, ClickHouseParserDECIMAL_LITERAL, ClickHouseParserHEXADECIMAL_LITERAL, ClickHouseParserDASH, ClickHouseParserDOT, ClickHouseParserPLUS:
		localctx = NewFrameStartContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1539)
			p.WinFrameBound()
		}

	case ClickHouseParserBETWEEN:
		localctx = NewFrameBetweenContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1540)
			p.Match(ClickHouseParserBETWEEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1541)
			p.WinFrameBound()
		}
		{
			p.SetState(1542)
			p.Match(ClickHouseParserAND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1543)
			p.WinFrameBound()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWinFrameBoundContext is an interface to support dynamic dispatch.
type IWinFrameBoundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CURRENT() antlr.TerminalNode
	ROW() antlr.TerminalNode
	UNBOUNDED() antlr.TerminalNode
	PRECEDING() antlr.TerminalNode
	FOLLOWING() antlr.TerminalNode
	NumberLiteral() INumberLiteralContext

	// IsWinFrameBoundContext differentiates from other interfaces.
	IsWinFrameBoundContext()
}

type WinFrameBoundContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWinFrameBoundContext() *WinFrameBoundContext {
	var p = new(WinFrameBoundContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameBound
	return p
}

func InitEmptyWinFrameBoundContext(p *WinFrameBoundContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_winFrameBound
}

func (*WinFrameBoundContext) IsWinFrameBoundContext() {}

func NewWinFrameBoundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WinFrameBoundContext {
	var p = new(WinFrameBoundContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_winFrameBound

	return p
}

func (s *WinFrameBoundContext) GetParser() antlr.Parser { return s.parser }

func (s *WinFrameBoundContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCURRENT, 0)
}

func (s *WinFrameBoundContext) ROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROW, 0)
}

func (s *WinFrameBoundContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNBOUNDED, 0)
}

func (s *WinFrameBoundContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRECEDING, 0)
}

func (s *WinFrameBoundContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOLLOWING, 0)
}

func (s *WinFrameBoundContext) NumberLiteral() INumberLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *WinFrameBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WinFrameBoundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WinFrameBoundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWinFrameBound(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WinFrameBound() (localctx IWinFrameBoundContext) {
	localctx = NewWinFrameBoundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, ClickHouseParserRULE_winFrameBound)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1559)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 206, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1547)
			p.Match(ClickHouseParserCURRENT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1548)
			p.Match(ClickHouseParserROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(1549)
			p.Match(ClickHouseParserUNBOUNDED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1550)
			p.Match(ClickHouseParserPRECEDING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(1551)
			p.Match(ClickHouseParserUNBOUNDED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1552)
			p.Match(ClickHouseParserFOLLOWING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(1553)
			p.NumberLiteral()
		}
		{
			p.SetState(1554)
			p.Match(ClickHouseParserPRECEDING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(1556)
			p.NumberLiteral()
		}
		{
			p.SetState(1557)
			p.Match(ClickHouseParserFOLLOWING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetStmtContext is an interface to support dynamic dispatch.
type ISetStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET() antlr.TerminalNode
	SettingExprList() ISettingExprListContext

	// IsSetStmtContext differentiates from other interfaces.
	IsSetStmtContext()
}

type SetStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetStmtContext() *SetStmtContext {
	var p = new(SetStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_setStmt
	return p
}

func InitEmptySetStmtContext(p *SetStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_setStmt
}

func (*SetStmtContext) IsSetStmtContext() {}

func NewSetStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetStmtContext {
	var p = new(SetStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_setStmt

	return p
}

func (s *SetStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SetStmtContext) SET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSET, 0)
}

func (s *SetStmtContext) SettingExprList() ISettingExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISettingExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISettingExprListContext)
}

func (s *SetStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSetStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SetStmt() (localctx ISetStmtContext) {
	localctx = NewSetStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, ClickHouseParserRULE_setStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1561)
		p.Match(ClickHouseParserSET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1562)
		p.SettingExprList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShowStmtContext is an interface to support dynamic dispatch.
type IShowStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsShowStmtContext differentiates from other interfaces.
	IsShowStmtContext()
}

type ShowStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowStmtContext() *ShowStmtContext {
	var p = new(ShowStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_showStmt
	return p
}

func InitEmptyShowStmtContext(p *ShowStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_showStmt
}

func (*ShowStmtContext) IsShowStmtContext() {}

func NewShowStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowStmtContext {
	var p = new(ShowStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_showStmt

	return p
}

func (s *ShowStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowStmtContext) CopyAll(ctx *ShowStmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ShowStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ShowCreateDatabaseStmtContext struct {
	ShowStmtContext
}

func NewShowCreateDatabaseStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateDatabaseStmtContext {
	var p = new(ShowCreateDatabaseStmtContext)

	InitEmptyShowStmtContext(&p.ShowStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ShowStmtContext))

	return p
}

func (s *ShowCreateDatabaseStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateDatabaseStmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *ShowCreateDatabaseStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *ShowCreateDatabaseStmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *ShowCreateDatabaseStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *ShowCreateDatabaseStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitShowCreateDatabaseStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowDatabasesStmtContext struct {
	ShowStmtContext
}

func NewShowDatabasesStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowDatabasesStmtContext {
	var p = new(ShowDatabasesStmtContext)

	InitEmptyShowStmtContext(&p.ShowStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ShowStmtContext))

	return p
}

func (s *ShowDatabasesStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowDatabasesStmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *ShowDatabasesStmtContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASES, 0)
}

func (s *ShowDatabasesStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitShowDatabasesStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateTableStmtContext struct {
	ShowStmtContext
}

func NewShowCreateTableStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateTableStmtContext {
	var p = new(ShowCreateTableStmtContext)

	InitEmptyShowStmtContext(&p.ShowStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ShowStmtContext))

	return p
}

func (s *ShowCreateTableStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateTableStmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *ShowCreateTableStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *ShowCreateTableStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ShowCreateTableStmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *ShowCreateTableStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *ShowCreateTableStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitShowCreateTableStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowTablesStmtContext struct {
	ShowStmtContext
}

func NewShowTablesStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowTablesStmtContext {
	var p = new(ShowTablesStmtContext)

	InitEmptyShowStmtContext(&p.ShowStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ShowStmtContext))

	return p
}

func (s *ShowTablesStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowTablesStmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *ShowTablesStmtContext) TABLES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLES, 0)
}

func (s *ShowTablesStmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *ShowTablesStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *ShowTablesStmtContext) LIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIKE, 0)
}

func (s *ShowTablesStmtContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ShowTablesStmtContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *ShowTablesStmtContext) LimitClause() ILimitClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *ShowTablesStmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ShowTablesStmtContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *ShowTablesStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitShowTablesStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowDictionariesStmtContext struct {
	ShowStmtContext
}

func NewShowDictionariesStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowDictionariesStmtContext {
	var p = new(ShowDictionariesStmtContext)

	InitEmptyShowStmtContext(&p.ShowStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ShowStmtContext))

	return p
}

func (s *ShowDictionariesStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowDictionariesStmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *ShowDictionariesStmtContext) DICTIONARIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARIES, 0)
}

func (s *ShowDictionariesStmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ShowDictionariesStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *ShowDictionariesStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitShowDictionariesStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateDictionaryStmtContext struct {
	ShowStmtContext
}

func NewShowCreateDictionaryStmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateDictionaryStmtContext {
	var p = new(ShowCreateDictionaryStmtContext)

	InitEmptyShowStmtContext(&p.ShowStmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*ShowStmtContext))

	return p
}

func (s *ShowCreateDictionaryStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateDictionaryStmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *ShowCreateDictionaryStmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *ShowCreateDictionaryStmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *ShowCreateDictionaryStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ShowCreateDictionaryStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitShowCreateDictionaryStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ShowStmt() (localctx IShowStmtContext) {
	localctx = NewShowStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, ClickHouseParserRULE_showStmt)
	var _la int

	p.SetState(1606)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 214, p.GetParserRuleContext()) {
	case 1:
		localctx = NewShowCreateDatabaseStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1564)
			p.Match(ClickHouseParserSHOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1565)
			p.Match(ClickHouseParserCREATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1566)
			p.Match(ClickHouseParserDATABASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1567)
			p.DatabaseIdentifier()
		}

	case 2:
		localctx = NewShowCreateDictionaryStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1568)
			p.Match(ClickHouseParserSHOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1569)
			p.Match(ClickHouseParserCREATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1570)
			p.Match(ClickHouseParserDICTIONARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1571)
			p.TableIdentifier()
		}

	case 3:
		localctx = NewShowCreateTableStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1572)
			p.Match(ClickHouseParserSHOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1573)
			p.Match(ClickHouseParserCREATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1575)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1574)
				p.Match(ClickHouseParserTEMPORARY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1578)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1577)
				p.Match(ClickHouseParserTABLE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1580)
			p.TableIdentifier()
		}

	case 4:
		localctx = NewShowDatabasesStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1581)
			p.Match(ClickHouseParserSHOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1582)
			p.Match(ClickHouseParserDATABASES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewShowDictionariesStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1583)
			p.Match(ClickHouseParserSHOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1584)
			p.Match(ClickHouseParserDICTIONARIES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1587)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFROM {
			{
				p.SetState(1585)
				p.Match(ClickHouseParserFROM)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1586)
				p.DatabaseIdentifier()
			}

		}

	case 6:
		localctx = NewShowTablesStmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1589)
			p.Match(ClickHouseParserSHOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1591)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserTEMPORARY {
			{
				p.SetState(1590)
				p.Match(ClickHouseParserTEMPORARY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1593)
			p.Match(ClickHouseParserTABLES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFROM || _la == ClickHouseParserIN {
			{
				p.SetState(1594)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserFROM || _la == ClickHouseParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1595)
				p.DatabaseIdentifier()
			}

		}
		p.SetState(1601)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case ClickHouseParserLIKE:
			{
				p.SetState(1598)
				p.Match(ClickHouseParserLIKE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1599)
				p.Match(ClickHouseParserSTRING_LITERAL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserWHERE:
			{
				p.SetState(1600)
				p.WhereClause()
			}

		case ClickHouseParserEOF, ClickHouseParserFORMAT, ClickHouseParserINTO, ClickHouseParserLIMIT, ClickHouseParserRPAREN, ClickHouseParserSEMICOLON:

		default:
		}
		p.SetState(1604)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserLIMIT {
			{
				p.SetState(1603)
				p.LimitClause()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISystemStmtContext is an interface to support dynamic dispatch.
type ISystemStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SYSTEM() antlr.TerminalNode
	FLUSH() antlr.TerminalNode
	DISTRIBUTED() antlr.TerminalNode
	TableIdentifier() ITableIdentifierContext
	LOGS() antlr.TerminalNode
	RELOAD() antlr.TerminalNode
	DICTIONARIES() antlr.TerminalNode
	DICTIONARY() antlr.TerminalNode
	START() antlr.TerminalNode
	STOP() antlr.TerminalNode
	SENDS() antlr.TerminalNode
	FETCHES() antlr.TerminalNode
	MERGES() antlr.TerminalNode
	TTL() antlr.TerminalNode
	REPLICATED() antlr.TerminalNode
	SYNC() antlr.TerminalNode
	REPLICA() antlr.TerminalNode

	// IsSystemStmtContext differentiates from other interfaces.
	IsSystemStmtContext()
}

type SystemStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySystemStmtContext() *SystemStmtContext {
	var p = new(SystemStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_systemStmt
	return p
}

func InitEmptySystemStmtContext(p *SystemStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_systemStmt
}

func (*SystemStmtContext) IsSystemStmtContext() {}

func NewSystemStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SystemStmtContext {
	var p = new(SystemStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_systemStmt

	return p
}

func (s *SystemStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SystemStmtContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYSTEM, 0)
}

func (s *SystemStmtContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFLUSH, 0)
}

func (s *SystemStmtContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTRIBUTED, 0)
}

func (s *SystemStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *SystemStmtContext) LOGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOGS, 0)
}

func (s *SystemStmtContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRELOAD, 0)
}

func (s *SystemStmtContext) DICTIONARIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARIES, 0)
}

func (s *SystemStmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *SystemStmtContext) START() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTART, 0)
}

func (s *SystemStmtContext) STOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTOP, 0)
}

func (s *SystemStmtContext) SENDS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSENDS, 0)
}

func (s *SystemStmtContext) FETCHES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFETCHES, 0)
}

func (s *SystemStmtContext) MERGES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMERGES, 0)
}

func (s *SystemStmtContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *SystemStmtContext) REPLICATED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICATED, 0)
}

func (s *SystemStmtContext) SYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNC, 0)
}

func (s *SystemStmtContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICA, 0)
}

func (s *SystemStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SystemStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SystemStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitSystemStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) SystemStmt() (localctx ISystemStmtContext) {
	localctx = NewSystemStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, ClickHouseParserRULE_systemStmt)
	var _la int

	p.SetState(1642)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 217, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1608)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1609)
			p.Match(ClickHouseParserFLUSH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1610)
			p.Match(ClickHouseParserDISTRIBUTED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1611)
			p.TableIdentifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1612)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1613)
			p.Match(ClickHouseParserFLUSH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1614)
			p.Match(ClickHouseParserLOGS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1615)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1616)
			p.Match(ClickHouseParserRELOAD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1617)
			p.Match(ClickHouseParserDICTIONARIES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1618)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1619)
			p.Match(ClickHouseParserRELOAD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1620)
			p.Match(ClickHouseParserDICTIONARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1621)
			p.TableIdentifier()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1622)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1623)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserSTART || _la == ClickHouseParserSTOP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1631)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ClickHouseParserDISTRIBUTED:
			{
				p.SetState(1624)
				p.Match(ClickHouseParserDISTRIBUTED)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1625)
				p.Match(ClickHouseParserSENDS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserFETCHES:
			{
				p.SetState(1626)
				p.Match(ClickHouseParserFETCHES)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ClickHouseParserMERGES, ClickHouseParserTTL:
			p.SetState(1628)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ClickHouseParserTTL {
				{
					p.SetState(1627)
					p.Match(ClickHouseParserTTL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1630)
				p.Match(ClickHouseParserMERGES)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(1633)
			p.TableIdentifier()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1634)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1635)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserSTART || _la == ClickHouseParserSTOP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1636)
			p.Match(ClickHouseParserREPLICATED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1637)
			p.Match(ClickHouseParserSENDS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1638)
			p.Match(ClickHouseParserSYSTEM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1639)
			p.Match(ClickHouseParserSYNC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1640)
			p.Match(ClickHouseParserREPLICA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1641)
			p.TableIdentifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITruncateStmtContext is an interface to support dynamic dispatch.
type ITruncateStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRUNCATE() antlr.TerminalNode
	TableIdentifier() ITableIdentifierContext
	TEMPORARY() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	IF() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	ClusterClause() IClusterClauseContext

	// IsTruncateStmtContext differentiates from other interfaces.
	IsTruncateStmtContext()
}

type TruncateStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncateStmtContext() *TruncateStmtContext {
	var p = new(TruncateStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_truncateStmt
	return p
}

func InitEmptyTruncateStmtContext(p *TruncateStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_truncateStmt
}

func (*TruncateStmtContext) IsTruncateStmtContext() {}

func NewTruncateStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TruncateStmtContext {
	var p = new(TruncateStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_truncateStmt

	return p
}

func (s *TruncateStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *TruncateStmtContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRUNCATE, 0)
}

func (s *TruncateStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *TruncateStmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *TruncateStmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *TruncateStmtContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *TruncateStmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *TruncateStmtContext) ClusterClause() IClusterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClusterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClusterClauseContext)
}

func (s *TruncateStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TruncateStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TruncateStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTruncateStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TruncateStmt() (localctx ITruncateStmtContext) {
	localctx = NewTruncateStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, ClickHouseParserRULE_truncateStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1644)
		p.Match(ClickHouseParserTRUNCATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1646)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1645)
			p.Match(ClickHouseParserTEMPORARY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1649)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1648)
			p.Match(ClickHouseParserTABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1653)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 220, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1651)
			p.Match(ClickHouseParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1652)
			p.Match(ClickHouseParserEXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1655)
		p.TableIdentifier()
	}
	p.SetState(1657)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserON {
		{
			p.SetState(1656)
			p.ClusterClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUseStmtContext is an interface to support dynamic dispatch.
type IUseStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USE() antlr.TerminalNode
	DatabaseIdentifier() IDatabaseIdentifierContext

	// IsUseStmtContext differentiates from other interfaces.
	IsUseStmtContext()
}

type UseStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseStmtContext() *UseStmtContext {
	var p = new(UseStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_useStmt
	return p
}

func InitEmptyUseStmtContext(p *UseStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_useStmt
}

func (*UseStmtContext) IsUseStmtContext() {}

func NewUseStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseStmtContext {
	var p = new(UseStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_useStmt

	return p
}

func (s *UseStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *UseStmtContext) USE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSE, 0)
}

func (s *UseStmtContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *UseStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitUseStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) UseStmt() (localctx IUseStmtContext) {
	localctx = NewUseStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, ClickHouseParserRULE_useStmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1659)
		p.Match(ClickHouseParserUSE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1660)
		p.DatabaseIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWatchStmtContext is an interface to support dynamic dispatch.
type IWatchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WATCH() antlr.TerminalNode
	TableIdentifier() ITableIdentifierContext
	EVENTS() antlr.TerminalNode
	LIMIT() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode

	// IsWatchStmtContext differentiates from other interfaces.
	IsWatchStmtContext()
}

type WatchStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWatchStmtContext() *WatchStmtContext {
	var p = new(WatchStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_watchStmt
	return p
}

func InitEmptyWatchStmtContext(p *WatchStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_watchStmt
}

func (*WatchStmtContext) IsWatchStmtContext() {}

func NewWatchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WatchStmtContext {
	var p = new(WatchStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_watchStmt

	return p
}

func (s *WatchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *WatchStmtContext) WATCH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWATCH, 0)
}

func (s *WatchStmtContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *WatchStmtContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEVENTS, 0)
}

func (s *WatchStmtContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *WatchStmtContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *WatchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WatchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WatchStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitWatchStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) WatchStmt() (localctx IWatchStmtContext) {
	localctx = NewWatchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, ClickHouseParserRULE_watchStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1662)
		p.Match(ClickHouseParserWATCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1663)
		p.TableIdentifier()
	}
	p.SetState(1665)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserEVENTS {
		{
			p.SetState(1664)
			p.Match(ClickHouseParserEVENTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1669)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserLIMIT {
		{
			p.SetState(1667)
			p.Match(ClickHouseParserLIMIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1668)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnTypeExprContext is an interface to support dynamic dispatch.
type IColumnTypeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnTypeExprContext differentiates from other interfaces.
	IsColumnTypeExprContext()
}

type ColumnTypeExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnTypeExprContext() *ColumnTypeExprContext {
	var p = new(ColumnTypeExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnTypeExpr
	return p
}

func InitEmptyColumnTypeExprContext(p *ColumnTypeExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnTypeExpr
}

func (*ColumnTypeExprContext) IsColumnTypeExprContext() {}

func NewColumnTypeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnTypeExprContext {
	var p = new(ColumnTypeExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnTypeExpr

	return p
}

func (s *ColumnTypeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnTypeExprContext) CopyAll(ctx *ColumnTypeExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnTypeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnTypeExprNestedContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprNestedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprNestedContext {
	var p = new(ColumnTypeExprNestedContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprNestedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprNestedContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprNestedContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprNestedContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprNestedContext) AllColumnTypeExpr() []IColumnTypeExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnTypeExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnTypeExprContext); ok {
			tst[i] = t.(IColumnTypeExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprNestedContext) ColumnTypeExpr(i int) IColumnTypeExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ColumnTypeExprNestedContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprNestedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnTypeExprNestedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnTypeExprNestedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprNested(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprParamContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprParamContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprParamContext {
	var p = new(ColumnTypeExprParamContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprParamContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprParamContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprParamContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprParamContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnTypeExprParamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprParam(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprSimpleContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprSimpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprSimpleContext {
	var p = new(ColumnTypeExprSimpleContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprSimpleContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprSimpleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprSimple(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprComplexContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprComplexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprComplexContext {
	var p = new(ColumnTypeExprComplexContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprComplexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprComplexContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprComplexContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprComplexContext) AllColumnTypeExpr() []IColumnTypeExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnTypeExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnTypeExprContext); ok {
			tst[i] = t.(IColumnTypeExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprComplexContext) ColumnTypeExpr(i int) IColumnTypeExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ColumnTypeExprComplexContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprComplexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnTypeExprComplexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnTypeExprComplexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprComplex(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnTypeExprEnumContext struct {
	ColumnTypeExprContext
}

func NewColumnTypeExprEnumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnTypeExprEnumContext {
	var p = new(ColumnTypeExprEnumContext)

	InitEmptyColumnTypeExprContext(&p.ColumnTypeExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnTypeExprContext))

	return p
}

func (s *ColumnTypeExprEnumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnTypeExprEnumContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnTypeExprEnumContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnTypeExprEnumContext) AllEnumValue() []IEnumValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumValueContext); ok {
			len++
		}
	}

	tst := make([]IEnumValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumValueContext); ok {
			tst[i] = t.(IEnumValueContext)
			i++
		}
	}

	return tst
}

func (s *ColumnTypeExprEnumContext) EnumValue(i int) IEnumValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *ColumnTypeExprEnumContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnTypeExprEnumContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnTypeExprEnumContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnTypeExprEnumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnTypeExprEnum(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnTypeExpr() (localctx IColumnTypeExprContext) {
	localctx = NewColumnTypeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, ClickHouseParserRULE_columnTypeExpr)
	var _la int

	p.SetState(1718)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 228, p.GetParserRuleContext()) {
	case 1:
		localctx = NewColumnTypeExprSimpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1671)
			p.Identifier()
		}

	case 2:
		localctx = NewColumnTypeExprNestedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1672)
			p.Identifier()
		}
		{
			p.SetState(1673)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1674)
			p.Identifier()
		}
		{
			p.SetState(1675)
			p.ColumnTypeExpr()
		}
		p.SetState(1682)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1676)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1677)
				p.Identifier()
			}
			{
				p.SetState(1678)
				p.ColumnTypeExpr()
			}

			p.SetState(1684)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1685)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewColumnTypeExprEnumContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1687)
			p.Identifier()
		}
		{
			p.SetState(1688)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1689)
			p.EnumValue()
		}
		p.SetState(1694)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1690)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1691)
				p.EnumValue()
			}

			p.SetState(1696)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1697)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewColumnTypeExprComplexContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1699)
			p.Identifier()
		}
		{
			p.SetState(1700)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1701)
			p.ColumnTypeExpr()
		}
		p.SetState(1706)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1702)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1703)
				p.ColumnTypeExpr()
			}

			p.SetState(1708)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1709)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewColumnTypeExprParamContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1711)
			p.Identifier()
		}
		{
			p.SetState(1712)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1714)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(1713)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(1716)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnExprListContext is an interface to support dynamic dispatch.
type IColumnExprListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnsExpr() []IColumnsExprContext
	ColumnsExpr(i int) IColumnsExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnExprListContext differentiates from other interfaces.
	IsColumnExprListContext()
}

type ColumnExprListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnExprListContext() *ColumnExprListContext {
	var p = new(ColumnExprListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExprList
	return p
}

func InitEmptyColumnExprListContext(p *ColumnExprListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExprList
}

func (*ColumnExprListContext) IsColumnExprListContext() {}

func NewColumnExprListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnExprListContext {
	var p = new(ColumnExprListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnExprList

	return p
}

func (s *ColumnExprListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnExprListContext) AllColumnsExpr() []IColumnsExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnsExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnsExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnsExprContext); ok {
			tst[i] = t.(IColumnsExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprListContext) ColumnsExpr(i int) IColumnsExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnsExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnsExprContext)
}

func (s *ColumnExprListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnExprListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnExprListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnExprListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnExprList() (localctx IColumnExprListContext) {
	localctx = NewColumnExprListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, ClickHouseParserRULE_columnExprList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1720)
		p.ColumnsExpr()
	}
	p.SetState(1725)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 229, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1721)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1722)
				p.ColumnsExpr()
			}

		}
		p.SetState(1727)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 229, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnsExprContext is an interface to support dynamic dispatch.
type IColumnsExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnsExprContext differentiates from other interfaces.
	IsColumnsExprContext()
}

type ColumnsExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnsExprContext() *ColumnsExprContext {
	var p = new(ColumnsExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnsExpr
	return p
}

func InitEmptyColumnsExprContext(p *ColumnsExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnsExpr
}

func (*ColumnsExprContext) IsColumnsExprContext() {}

func NewColumnsExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnsExprContext {
	var p = new(ColumnsExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnsExpr

	return p
}

func (s *ColumnsExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnsExprContext) CopyAll(ctx *ColumnsExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnsExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnsExprColumnContext struct {
	ColumnsExprContext
}

func NewColumnsExprColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnsExprColumnContext {
	var p = new(ColumnsExprColumnContext)

	InitEmptyColumnsExprContext(&p.ColumnsExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnsExprContext))

	return p
}

func (s *ColumnsExprColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprColumnContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnsExprColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsExprColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnsExprAsteriskContext struct {
	ColumnsExprContext
}

func NewColumnsExprAsteriskContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnsExprAsteriskContext {
	var p = new(ColumnsExprAsteriskContext)

	InitEmptyColumnsExprContext(&p.ColumnsExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnsExprContext))

	return p
}

func (s *ColumnsExprAsteriskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprAsteriskContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASTERISK, 0)
}

func (s *ColumnsExprAsteriskContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ColumnsExprAsteriskContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnsExprAsteriskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsExprAsterisk(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnsExprSubqueryContext struct {
	ColumnsExprContext
}

func NewColumnsExprSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnsExprSubqueryContext {
	var p = new(ColumnsExprSubqueryContext)

	InitEmptyColumnsExprContext(&p.ColumnsExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnsExprContext))

	return p
}

func (s *ColumnsExprSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnsExprSubqueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnsExprSubqueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *ColumnsExprSubqueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnsExprSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnsExprSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnsExpr() (localctx IColumnsExprContext) {
	localctx = NewColumnsExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, ClickHouseParserRULE_columnsExpr)
	var _la int

	p.SetState(1739)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 231, p.GetParserRuleContext()) {
	case 1:
		localctx = NewColumnsExprAsteriskContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1731)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-2)) & ^0x3f) == 0 && ((int64(1)<<(_la-2))&-1) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&-633318697631745) != 0) || ((int64((_la-131)) & ^0x3f) == 0 && ((int64(1)<<(_la-131))&4611686018427387903) != 0) {
			{
				p.SetState(1728)
				p.TableIdentifier()
			}
			{
				p.SetState(1729)
				p.Match(ClickHouseParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1733)
			p.Match(ClickHouseParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewColumnsExprSubqueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1734)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1735)
			p.SelectUnionStmt()
		}
		{
			p.SetState(1736)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewColumnsExprColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1738)
			p.columnExpr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnExprContext is an interface to support dynamic dispatch.
type IColumnExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnExprContext differentiates from other interfaces.
	IsColumnExprContext()
}

type ColumnExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnExprContext() *ColumnExprContext {
	var p = new(ColumnExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExpr
	return p
}

func InitEmptyColumnExprContext(p *ColumnExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnExpr
}

func (*ColumnExprContext) IsColumnExprContext() {}

func NewColumnExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnExprContext {
	var p = new(ColumnExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnExpr

	return p
}

func (s *ColumnExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnExprContext) CopyAll(ctx *ColumnExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnExprTernaryOpContext struct {
	ColumnExprContext
}

func NewColumnExprTernaryOpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTernaryOpContext {
	var p = new(ColumnExprTernaryOpContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTernaryOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTernaryOpContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprTernaryOpContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprTernaryOpContext) QUERY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserQUERY, 0)
}

func (s *ColumnExprTernaryOpContext) COLON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLON, 0)
}

func (s *ColumnExprTernaryOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTernaryOp(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprAliasContext struct {
	ColumnExprContext
}

func NewColumnExprAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprAliasContext {
	var p = new(ColumnExprAliasContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprAliasContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprAliasContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *ColumnExprAliasContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *ColumnExprAliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprExtractContext struct {
	ColumnExprContext
}

func NewColumnExprExtractContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprExtractContext {
	var p = new(ColumnExprExtractContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprExtractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprExtractContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXTRACT, 0)
}

func (s *ColumnExprExtractContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprExtractContext) Interval() IIntervalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntervalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *ColumnExprExtractContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ColumnExprExtractContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprExtractContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprExtractContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprExtract(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprNegateContext struct {
	ColumnExprContext
}

func NewColumnExprNegateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprNegateContext {
	var p = new(ColumnExprNegateContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprNegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprNegateContext) DASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDASH, 0)
}

func (s *ColumnExprNegateContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprNegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprSubqueryContext struct {
	ColumnExprContext
}

func NewColumnExprSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprSubqueryContext {
	var p = new(ColumnExprSubqueryContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprSubqueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprSubqueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *ColumnExprSubqueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprLiteralContext struct {
	ColumnExprContext
}

func NewColumnExprLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprLiteralContext {
	var p = new(ColumnExprLiteralContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprLiteralContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ColumnExprLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprArrayContext struct {
	ColumnExprContext
}

func NewColumnExprArrayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprArrayContext {
	var p = new(ColumnExprArrayContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprArrayContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLBRACKET, 0)
}

func (s *ColumnExprArrayContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRBRACKET, 0)
}

func (s *ColumnExprArrayContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprArray(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprSubstringContext struct {
	ColumnExprContext
}

func NewColumnExprSubstringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprSubstringContext {
	var p = new(ColumnExprSubstringContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprSubstringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprSubstringContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSUBSTRING, 0)
}

func (s *ColumnExprSubstringContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprSubstringContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprSubstringContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprSubstringContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ColumnExprSubstringContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprSubstringContext) FOR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOR, 0)
}

func (s *ColumnExprSubstringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprSubstring(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprCastContext struct {
	ColumnExprContext
}

func NewColumnExprCastContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprCastContext {
	var p = new(ColumnExprCastContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprCastContext) CAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCAST, 0)
}

func (s *ColumnExprCastContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprCastContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprCastContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *ColumnExprCastContext) ColumnTypeExpr() IColumnTypeExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnTypeExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnTypeExprContext)
}

func (s *ColumnExprCastContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprCastContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprCast(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprOrContext struct {
	ColumnExprContext
}

func NewColumnExprOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprOrContext {
	var p = new(ColumnExprOrContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprOrContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprOrContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprOrContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *ColumnExprOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprOr(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprPrecedence1Context struct {
	ColumnExprContext
}

func NewColumnExprPrecedence1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprPrecedence1Context {
	var p = new(ColumnExprPrecedence1Context)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprPrecedence1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprPrecedence1Context) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprPrecedence1Context) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprPrecedence1Context) ASTERISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASTERISK, 0)
}

func (s *ColumnExprPrecedence1Context) SLASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSLASH, 0)
}

func (s *ColumnExprPrecedence1Context) PERCENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPERCENT, 0)
}

func (s *ColumnExprPrecedence1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprPrecedence1(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprPrecedence2Context struct {
	ColumnExprContext
}

func NewColumnExprPrecedence2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprPrecedence2Context {
	var p = new(ColumnExprPrecedence2Context)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprPrecedence2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprPrecedence2Context) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprPrecedence2Context) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprPrecedence2Context) PLUS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPLUS, 0)
}

func (s *ColumnExprPrecedence2Context) DASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDASH, 0)
}

func (s *ColumnExprPrecedence2Context) CONCAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCONCAT, 0)
}

func (s *ColumnExprPrecedence2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprPrecedence2(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprPrecedence3Context struct {
	ColumnExprContext
}

func NewColumnExprPrecedence3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprPrecedence3Context {
	var p = new(ColumnExprPrecedence3Context)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprPrecedence3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprPrecedence3Context) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprPrecedence3Context) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprPrecedence3Context) EQ_DOUBLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_DOUBLE, 0)
}

func (s *ColumnExprPrecedence3Context) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *ColumnExprPrecedence3Context) NOT_EQ() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT_EQ, 0)
}

func (s *ColumnExprPrecedence3Context) LE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLE, 0)
}

func (s *ColumnExprPrecedence3Context) GE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGE, 0)
}

func (s *ColumnExprPrecedence3Context) LT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLT, 0)
}

func (s *ColumnExprPrecedence3Context) GT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGT, 0)
}

func (s *ColumnExprPrecedence3Context) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *ColumnExprPrecedence3Context) LIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIKE, 0)
}

func (s *ColumnExprPrecedence3Context) ILIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserILIKE, 0)
}

func (s *ColumnExprPrecedence3Context) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *ColumnExprPrecedence3Context) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprPrecedence3Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprPrecedence3(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprIntervalContext struct {
	ColumnExprContext
}

func NewColumnExprIntervalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprIntervalContext {
	var p = new(ColumnExprIntervalContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprIntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprIntervalContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERVAL, 0)
}

func (s *ColumnExprIntervalContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprIntervalContext) Interval() IIntervalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntervalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *ColumnExprIntervalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprInterval(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprIsNullContext struct {
	ColumnExprContext
}

func NewColumnExprIsNullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprIsNullContext {
	var p = new(ColumnExprIsNullContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprIsNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprIsNullContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprIsNullContext) IS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS, 0)
}

func (s *ColumnExprIsNullContext) NULL_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULL_SQL, 0)
}

func (s *ColumnExprIsNullContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprIsNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprIsNull(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprWinFunctionTargetContext struct {
	ColumnExprContext
}

func NewColumnExprWinFunctionTargetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprWinFunctionTargetContext {
	var p = new(ColumnExprWinFunctionTargetContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprWinFunctionTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprWinFunctionTargetContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprWinFunctionTargetContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprWinFunctionTargetContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *ColumnExprWinFunctionTargetContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprWinFunctionTargetContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprWinFunctionTargetContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprWinFunctionTargetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprWinFunctionTarget(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTrimContext struct {
	ColumnExprContext
}

func NewColumnExprTrimContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTrimContext {
	var p = new(ColumnExprTrimContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTrimContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTrimContext) TRIM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRIM, 0)
}

func (s *ColumnExprTrimContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprTrimContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ColumnExprTrimContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *ColumnExprTrimContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprTrimContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprTrimContext) BOTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBOTH, 0)
}

func (s *ColumnExprTrimContext) LEADING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEADING, 0)
}

func (s *ColumnExprTrimContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRAILING, 0)
}

func (s *ColumnExprTrimContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTrim(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTupleContext struct {
	ColumnExprContext
}

func NewColumnExprTupleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTupleContext {
	var p = new(ColumnExprTupleContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTupleContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprTupleContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprTupleContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprTupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprArrayAccessContext struct {
	ColumnExprContext
}

func NewColumnExprArrayAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprArrayAccessContext {
	var p = new(ColumnExprArrayAccessContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprArrayAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprArrayAccessContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprArrayAccessContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprArrayAccessContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLBRACKET, 0)
}

func (s *ColumnExprArrayAccessContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRBRACKET, 0)
}

func (s *ColumnExprArrayAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprArrayAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprBetweenContext struct {
	ColumnExprContext
}

func NewColumnExprBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprBetweenContext {
	var p = new(ColumnExprBetweenContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprBetweenContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprBetweenContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBETWEEN, 0)
}

func (s *ColumnExprBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *ColumnExprBetweenContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprBetweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprBetween(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprParensContext struct {
	ColumnExprContext
}

func NewColumnExprParensContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprParensContext {
	var p = new(ColumnExprParensContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprParensContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnExprParensContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprParensContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnExprParensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprParens(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTimestampContext struct {
	ColumnExprContext
}

func NewColumnExprTimestampContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTimestampContext {
	var p = new(ColumnExprTimestampContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTimestampContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMESTAMP, 0)
}

func (s *ColumnExprTimestampContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ColumnExprTimestampContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTimestamp(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprAndContext struct {
	ColumnExprContext
}

func NewColumnExprAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprAndContext {
	var p = new(ColumnExprAndContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprAndContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprAndContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprAndContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *ColumnExprAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprTupleAccessContext struct {
	ColumnExprContext
}

func NewColumnExprTupleAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprTupleAccessContext {
	var p = new(ColumnExprTupleAccessContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprTupleAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprTupleAccessContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprTupleAccessContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnExprTupleAccessContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *ColumnExprTupleAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprTupleAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprCaseContext struct {
	ColumnExprContext
}

func NewColumnExprCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprCaseContext {
	var p = new(ColumnExprCaseContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCASE, 0)
}

func (s *ColumnExprCaseContext) END() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEND, 0)
}

func (s *ColumnExprCaseContext) AllColumnExpr() []IColumnExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnExprContext); ok {
			tst[i] = t.(IColumnExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnExprCaseContext) ColumnExpr(i int) IColumnExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprCaseContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserWHEN)
}

func (s *ColumnExprCaseContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHEN, i)
}

func (s *ColumnExprCaseContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserTHEN)
}

func (s *ColumnExprCaseContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTHEN, i)
}

func (s *ColumnExprCaseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserELSE, 0)
}

func (s *ColumnExprCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprCase(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprDateContext struct {
	ColumnExprContext
}

func NewColumnExprDateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprDateContext {
	var p = new(ColumnExprDateContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprDateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprDateContext) DATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATE, 0)
}

func (s *ColumnExprDateContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *ColumnExprDateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprDate(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprNotContext struct {
	ColumnExprContext
}

func NewColumnExprNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprNotContext {
	var p = new(ColumnExprNotContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprNotContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *ColumnExprNotContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnExprNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprNot(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprWinFunctionContext struct {
	ColumnExprContext
}

func NewColumnExprWinFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprWinFunctionContext {
	var p = new(ColumnExprWinFunctionContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprWinFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprWinFunctionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprWinFunctionContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *ColumnExprWinFunctionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserLPAREN)
}

func (s *ColumnExprWinFunctionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, i)
}

func (s *ColumnExprWinFunctionContext) WindowExpr() IWindowExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowExprContext)
}

func (s *ColumnExprWinFunctionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserRPAREN)
}

func (s *ColumnExprWinFunctionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, i)
}

func (s *ColumnExprWinFunctionContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprWinFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprWinFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprIdentifierContext struct {
	ColumnExprContext
}

func NewColumnExprIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprIdentifierContext {
	var p = new(ColumnExprIdentifierContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprIdentifierContext) ColumnIdentifier() IColumnIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnIdentifierContext)
}

func (s *ColumnExprIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprFunctionContext struct {
	ColumnExprContext
}

func NewColumnExprFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprFunctionContext {
	var p = new(ColumnExprFunctionContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprFunctionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnExprFunctionContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserLPAREN)
}

func (s *ColumnExprFunctionContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, i)
}

func (s *ColumnExprFunctionContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserRPAREN)
}

func (s *ColumnExprFunctionContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, i)
}

func (s *ColumnExprFunctionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *ColumnExprFunctionContext) ColumnArgList() IColumnArgListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnArgListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnArgListContext)
}

func (s *ColumnExprFunctionContext) ColumnExprList() IColumnExprListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprListContext)
}

func (s *ColumnExprFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnExprAsteriskContext struct {
	ColumnExprContext
}

func NewColumnExprAsteriskContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnExprAsteriskContext {
	var p = new(ColumnExprAsteriskContext)

	InitEmptyColumnExprContext(&p.ColumnExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnExprContext))

	return p
}

func (s *ColumnExprAsteriskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnExprAsteriskContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASTERISK, 0)
}

func (s *ColumnExprAsteriskContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ColumnExprAsteriskContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnExprAsteriskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnExprAsterisk(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnExpr() (localctx IColumnExprContext) {
	return p.columnExpr(0)
}

func (p *ClickHouseParser) columnExpr(_p int) (localctx IColumnExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewColumnExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IColumnExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 198
	p.EnterRecursionRule(localctx, 198, ClickHouseParserRULE_columnExpr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1870)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext()) {
	case 1:
		localctx = NewColumnExprCaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1742)
			p.Match(ClickHouseParserCASE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1744)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 232, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1743)
				p.columnExpr(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1751)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ClickHouseParserWHEN {
			{
				p.SetState(1746)
				p.Match(ClickHouseParserWHEN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1747)
				p.columnExpr(0)
			}
			{
				p.SetState(1748)
				p.Match(ClickHouseParserTHEN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1749)
				p.columnExpr(0)
			}

			p.SetState(1753)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1757)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserELSE {
			{
				p.SetState(1755)
				p.Match(ClickHouseParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1756)
				p.columnExpr(0)
			}

		}
		{
			p.SetState(1759)
			p.Match(ClickHouseParserEND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewColumnExprCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1761)
			p.Match(ClickHouseParserCAST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1762)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1763)
			p.columnExpr(0)
		}
		{
			p.SetState(1764)
			p.Match(ClickHouseParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1765)
			p.ColumnTypeExpr()
		}
		{
			p.SetState(1766)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewColumnExprDateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1768)
			p.Match(ClickHouseParserDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1769)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewColumnExprExtractContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1770)
			p.Match(ClickHouseParserEXTRACT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1771)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1772)
			p.Interval()
		}
		{
			p.SetState(1773)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1774)
			p.columnExpr(0)
		}
		{
			p.SetState(1775)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewColumnExprIntervalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1777)
			p.Match(ClickHouseParserINTERVAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1778)
			p.columnExpr(0)
		}
		{
			p.SetState(1779)
			p.Interval()
		}

	case 6:
		localctx = NewColumnExprSubstringContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1781)
			p.Match(ClickHouseParserSUBSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1782)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1783)
			p.columnExpr(0)
		}
		{
			p.SetState(1784)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1785)
			p.columnExpr(0)
		}
		p.SetState(1788)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ClickHouseParserFOR {
			{
				p.SetState(1786)
				p.Match(ClickHouseParserFOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1787)
				p.columnExpr(0)
			}

		}
		{
			p.SetState(1790)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewColumnExprTimestampContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1792)
			p.Match(ClickHouseParserTIMESTAMP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1793)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewColumnExprTrimContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1794)
			p.Match(ClickHouseParserTRIM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1795)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1796)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserBOTH || _la == ClickHouseParserLEADING || _la == ClickHouseParserTRAILING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1797)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1798)
			p.Match(ClickHouseParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1799)
			p.columnExpr(0)
		}
		{
			p.SetState(1800)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewColumnExprWinFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1802)
			p.Identifier()
		}

		{
			p.SetState(1803)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1805)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(1804)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(1807)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(1809)
			p.Match(ClickHouseParserOVER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1810)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1811)
			p.WindowExpr()
		}
		{
			p.SetState(1812)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		localctx = NewColumnExprWinFunctionTargetContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1814)
			p.Identifier()
		}

		{
			p.SetState(1815)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1817)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(1816)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(1819)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		{
			p.SetState(1821)
			p.Match(ClickHouseParserOVER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1822)
			p.Identifier()
		}

	case 11:
		localctx = NewColumnExprFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1824)
			p.Identifier()
		}
		p.SetState(1830)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1825)
				p.Match(ClickHouseParserLPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1827)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
				{
					p.SetState(1826)
					p.ColumnExprList()
				}

			}
			{
				p.SetState(1829)
				p.Match(ClickHouseParserRPAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1832)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1834)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 240, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1833)
				p.Match(ClickHouseParserDISTINCT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1837)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(1836)
				p.ColumnArgList()
			}

		}
		{
			p.SetState(1839)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		localctx = NewColumnExprLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1841)
			p.Literal()
		}

	case 13:
		localctx = NewColumnExprNegateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1842)
			p.Match(ClickHouseParserDASH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1843)
			p.columnExpr(17)
		}

	case 14:
		localctx = NewColumnExprNotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1844)
			p.Match(ClickHouseParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1845)
			p.columnExpr(12)
		}

	case 15:
		localctx = NewColumnExprAsteriskContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(1849)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-2)) & ^0x3f) == 0 && ((int64(1)<<(_la-2))&-1) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&-633318697631745) != 0) || ((int64((_la-131)) & ^0x3f) == 0 && ((int64(1)<<(_la-131))&4611686018427387903) != 0) {
			{
				p.SetState(1846)
				p.TableIdentifier()
			}
			{
				p.SetState(1847)
				p.Match(ClickHouseParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1851)
			p.Match(ClickHouseParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 16:
		localctx = NewColumnExprSubqueryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1852)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1853)
			p.SelectUnionStmt()
		}
		{
			p.SetState(1854)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 17:
		localctx = NewColumnExprParensContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1856)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1857)
			p.columnExpr(0)
		}
		{
			p.SetState(1858)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 18:
		localctx = NewColumnExprTupleContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1860)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1861)
			p.ColumnExprList()
		}
		{
			p.SetState(1862)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 19:
		localctx = NewColumnExprArrayContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1864)
			p.Match(ClickHouseParserLBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1866)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&72376511) != 0) {
			{
				p.SetState(1865)
				p.ColumnExprList()
			}

		}
		{
			p.SetState(1868)
			p.Match(ClickHouseParserRBRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 20:
		localctx = NewColumnExprIdentifierContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1869)
			p.ColumnIdentifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1943)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 253, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1941)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext()) {
			case 1:
				localctx = NewColumnExprPrecedence1Context(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1872)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(1873)
					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-199)) & ^0x3f) == 0 && ((int64(1)<<(_la-199))&134479873) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1874)
					p.columnExpr(17)
				}

			case 2:
				localctx = NewColumnExprPrecedence2Context(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1875)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(1876)
					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-204)) & ^0x3f) == 0 && ((int64(1)<<(_la-204))&16387) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1877)
					p.columnExpr(16)
				}

			case 3:
				localctx = NewColumnExprPrecedence3Context(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1878)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				p.SetState(1897)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 248, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1879)
						p.Match(ClickHouseParserEQ_DOUBLE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 2:
					{
						p.SetState(1880)
						p.Match(ClickHouseParserEQ_SINGLE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 3:
					{
						p.SetState(1881)
						p.Match(ClickHouseParserNOT_EQ)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 4:
					{
						p.SetState(1882)
						p.Match(ClickHouseParserLE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 5:
					{
						p.SetState(1883)
						p.Match(ClickHouseParserGE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 6:
					{
						p.SetState(1884)
						p.Match(ClickHouseParserLT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 7:
					{
						p.SetState(1885)
						p.Match(ClickHouseParserGT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 8:
					p.SetState(1887)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == ClickHouseParserGLOBAL {
						{
							p.SetState(1886)
							p.Match(ClickHouseParserGLOBAL)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					p.SetState(1890)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == ClickHouseParserNOT {
						{
							p.SetState(1889)
							p.Match(ClickHouseParserNOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					{
						p.SetState(1892)
						p.Match(ClickHouseParserIN)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 9:
					p.SetState(1894)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == ClickHouseParserNOT {
						{
							p.SetState(1893)
							p.Match(ClickHouseParserNOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					{
						p.SetState(1896)
						_la = p.GetTokenStream().LA(1)

						if !(_la == ClickHouseParserILIKE || _la == ClickHouseParserLIKE) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}
				{
					p.SetState(1899)
					p.columnExpr(15)
				}

			case 4:
				localctx = NewColumnExprAndContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1900)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(1901)
					p.Match(ClickHouseParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1902)
					p.columnExpr(12)
				}

			case 5:
				localctx = NewColumnExprOrContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1903)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(1904)
					p.Match(ClickHouseParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1905)
					p.columnExpr(11)
				}

			case 6:
				localctx = NewColumnExprBetweenContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1906)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				p.SetState(1908)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ClickHouseParserNOT {
					{
						p.SetState(1907)
						p.Match(ClickHouseParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1910)
					p.Match(ClickHouseParserBETWEEN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1911)
					p.columnExpr(0)
				}
				{
					p.SetState(1912)
					p.Match(ClickHouseParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1913)
					p.columnExpr(10)
				}

			case 7:
				localctx = NewColumnExprTernaryOpContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1915)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(1916)
					p.Match(ClickHouseParserQUERY)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1917)
					p.columnExpr(0)
				}
				{
					p.SetState(1918)
					p.Match(ClickHouseParserCOLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1919)
					p.columnExpr(8)
				}

			case 8:
				localctx = NewColumnExprArrayAccessContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1921)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(1922)
					p.Match(ClickHouseParserLBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1923)
					p.columnExpr(0)
				}
				{
					p.SetState(1924)
					p.Match(ClickHouseParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 9:
				localctx = NewColumnExprTupleAccessContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1926)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(1927)
					p.Match(ClickHouseParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1928)
					p.Match(ClickHouseParserDECIMAL_LITERAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 10:
				localctx = NewColumnExprIsNullContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1929)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(1930)
					p.Match(ClickHouseParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1932)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ClickHouseParserNOT {
					{
						p.SetState(1931)
						p.Match(ClickHouseParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1934)
					p.Match(ClickHouseParserNULL_SQL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 11:
				localctx = NewColumnExprAliasContext(p, NewColumnExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_columnExpr)
				p.SetState(1935)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				p.SetState(1939)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case ClickHouseParserDATE, ClickHouseParserFIRST, ClickHouseParserID, ClickHouseParserKEY, ClickHouseParserIDENTIFIER:
					{
						p.SetState(1936)
						p.Alias()
					}

				case ClickHouseParserAS:
					{
						p.SetState(1937)
						p.Match(ClickHouseParserAS)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1938)
						p.Identifier()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1945)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 253, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnArgListContext is an interface to support dynamic dispatch.
type IColumnArgListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumnArgExpr() []IColumnArgExprContext
	ColumnArgExpr(i int) IColumnArgExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnArgListContext differentiates from other interfaces.
	IsColumnArgListContext()
}

type ColumnArgListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnArgListContext() *ColumnArgListContext {
	var p = new(ColumnArgListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgList
	return p
}

func InitEmptyColumnArgListContext(p *ColumnArgListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgList
}

func (*ColumnArgListContext) IsColumnArgListContext() {}

func NewColumnArgListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnArgListContext {
	var p = new(ColumnArgListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnArgList

	return p
}

func (s *ColumnArgListContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnArgListContext) AllColumnArgExpr() []IColumnArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnArgExprContext); ok {
			len++
		}
	}

	tst := make([]IColumnArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnArgExprContext); ok {
			tst[i] = t.(IColumnArgExprContext)
			i++
		}
	}

	return tst
}

func (s *ColumnArgListContext) ColumnArgExpr(i int) IColumnArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnArgExprContext)
}

func (s *ColumnArgListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnArgListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnArgListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnArgListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnArgListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnArgList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnArgList() (localctx IColumnArgListContext) {
	localctx = NewColumnArgListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, ClickHouseParserRULE_columnArgList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1946)
		p.ColumnArgExpr()
	}
	p.SetState(1951)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(1947)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1948)
			p.ColumnArgExpr()
		}

		p.SetState(1953)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnArgExprContext is an interface to support dynamic dispatch.
type IColumnArgExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnLambdaExpr() IColumnLambdaExprContext
	ColumnExpr() IColumnExprContext

	// IsColumnArgExprContext differentiates from other interfaces.
	IsColumnArgExprContext()
}

type ColumnArgExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnArgExprContext() *ColumnArgExprContext {
	var p = new(ColumnArgExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgExpr
	return p
}

func InitEmptyColumnArgExprContext(p *ColumnArgExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnArgExpr
}

func (*ColumnArgExprContext) IsColumnArgExprContext() {}

func NewColumnArgExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnArgExprContext {
	var p = new(ColumnArgExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnArgExpr

	return p
}

func (s *ColumnArgExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnArgExprContext) ColumnLambdaExpr() IColumnLambdaExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnLambdaExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnLambdaExprContext)
}

func (s *ColumnArgExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnArgExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnArgExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnArgExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnArgExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnArgExpr() (localctx IColumnArgExprContext) {
	localctx = NewColumnArgExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, ClickHouseParserRULE_columnArgExpr)
	p.SetState(1956)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 255, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1954)
			p.ColumnLambdaExpr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1955)
			p.columnExpr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnLambdaExprContext is an interface to support dynamic dispatch.
type IColumnLambdaExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARROW() antlr.TerminalNode
	ColumnExpr() IColumnExprContext
	LPAREN() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumnLambdaExprContext differentiates from other interfaces.
	IsColumnLambdaExprContext()
}

type ColumnLambdaExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnLambdaExprContext() *ColumnLambdaExprContext {
	var p = new(ColumnLambdaExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnLambdaExpr
	return p
}

func InitEmptyColumnLambdaExprContext(p *ColumnLambdaExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnLambdaExpr
}

func (*ColumnLambdaExprContext) IsColumnLambdaExprContext() {}

func NewColumnLambdaExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnLambdaExprContext {
	var p = new(ColumnLambdaExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnLambdaExpr

	return p
}

func (s *ColumnLambdaExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnLambdaExprContext) ARROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserARROW, 0)
}

func (s *ColumnLambdaExprContext) ColumnExpr() IColumnExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnExprContext)
}

func (s *ColumnLambdaExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *ColumnLambdaExprContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ColumnLambdaExprContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnLambdaExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *ColumnLambdaExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *ColumnLambdaExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *ColumnLambdaExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnLambdaExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnLambdaExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnLambdaExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnLambdaExpr() (localctx IColumnLambdaExprContext) {
	localctx = NewColumnLambdaExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, ClickHouseParserRULE_columnLambdaExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1977)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserLPAREN:
		{
			p.SetState(1958)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1959)
			p.Identifier()
		}
		p.SetState(1964)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1960)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1961)
				p.Identifier()
			}

			p.SetState(1966)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1967)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDAY, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserHOUR, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMINUTE, ClickHouseParserMODIFY, ClickHouseParserMONTH, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserQUARTER, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSECOND, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWEEK, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserYEAR, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE, ClickHouseParserIDENTIFIER:
		{
			p.SetState(1969)
			p.Identifier()
		}
		p.SetState(1974)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ClickHouseParserCOMMA {
			{
				p.SetState(1970)
				p.Match(ClickHouseParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1971)
				p.Identifier()
			}

			p.SetState(1976)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(1979)
		p.Match(ClickHouseParserARROW)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1980)
		p.columnExpr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnIdentifierContext is an interface to support dynamic dispatch.
type IColumnIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	TableIdentifier() ITableIdentifierContext
	DOT() antlr.TerminalNode

	// IsColumnIdentifierContext differentiates from other interfaces.
	IsColumnIdentifierContext()
}

type ColumnIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnIdentifierContext() *ColumnIdentifierContext {
	var p = new(ColumnIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnIdentifier
	return p
}

func InitEmptyColumnIdentifierContext(p *ColumnIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_columnIdentifier
}

func (*ColumnIdentifierContext) IsColumnIdentifierContext() {}

func NewColumnIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnIdentifierContext {
	var p = new(ColumnIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_columnIdentifier

	return p
}

func (s *ColumnIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnIdentifierContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *ColumnIdentifierContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *ColumnIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *ColumnIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitColumnIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) ColumnIdentifier() (localctx IColumnIdentifierContext) {
	localctx = NewColumnIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, ClickHouseParserRULE_columnIdentifier)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1985)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 259, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1982)
			p.TableIdentifier()
		}
		{
			p.SetState(1983)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1987)
		p.NestedIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INestedIdentifierContext is an interface to support dynamic dispatch.
type INestedIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	DOT() antlr.TerminalNode

	// IsNestedIdentifierContext differentiates from other interfaces.
	IsNestedIdentifierContext()
}

type NestedIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestedIdentifierContext() *NestedIdentifierContext {
	var p = new(NestedIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_nestedIdentifier
	return p
}

func InitEmptyNestedIdentifierContext(p *NestedIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_nestedIdentifier
}

func (*NestedIdentifierContext) IsNestedIdentifierContext() {}

func NewNestedIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestedIdentifierContext {
	var p = new(NestedIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_nestedIdentifier

	return p
}

func (s *NestedIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *NestedIdentifierContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *NestedIdentifierContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NestedIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *NestedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NestedIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitNestedIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) NestedIdentifier() (localctx INestedIdentifierContext) {
	localctx = NewNestedIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, ClickHouseParserRULE_nestedIdentifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1989)
		p.Identifier()
	}
	p.SetState(1992)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 260, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1990)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1991)
			p.Identifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableExprContext is an interface to support dynamic dispatch.
type ITableExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableExprContext differentiates from other interfaces.
	IsTableExprContext()
}

type TableExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableExprContext() *TableExprContext {
	var p = new(TableExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableExpr
	return p
}

func InitEmptyTableExprContext(p *TableExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableExpr
}

func (*TableExprContext) IsTableExprContext() {}

func NewTableExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableExprContext {
	var p = new(TableExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableExpr

	return p
}

func (s *TableExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableExprContext) CopyAll(ctx *TableExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableExprIdentifierContext struct {
	TableExprContext
}

func NewTableExprIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprIdentifierContext {
	var p = new(TableExprIdentifierContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprIdentifierContext) TableIdentifier() ITableIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableIdentifierContext)
}

func (s *TableExprIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableExprSubqueryContext struct {
	TableExprContext
}

func NewTableExprSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprSubqueryContext {
	var p = new(TableExprSubqueryContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprSubqueryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *TableExprSubqueryContext) SelectUnionStmt() ISelectUnionStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectUnionStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectUnionStmtContext)
}

func (s *TableExprSubqueryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *TableExprSubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableExprAliasContext struct {
	TableExprContext
}

func NewTableExprAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprAliasContext {
	var p = new(TableExprAliasContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprAliasContext) TableExpr() ITableExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableExprContext)
}

func (s *TableExprAliasContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *TableExprAliasContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *TableExprAliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableExprAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableExprFunctionContext struct {
	TableExprContext
}

func NewTableExprFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableExprFunctionContext {
	var p = new(TableExprFunctionContext)

	InitEmptyTableExprContext(&p.TableExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableExprContext))

	return p
}

func (s *TableExprFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableExprFunctionContext) TableFunctionExpr() ITableFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableFunctionExprContext)
}

func (s *TableExprFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableExprFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableExpr() (localctx ITableExprContext) {
	return p.tableExpr(0)
}

func (p *ClickHouseParser) tableExpr(_p int) (localctx ITableExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTableExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITableExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 210
	p.EnterRecursionRule(localctx, 210, ClickHouseParserRULE_tableExpr, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2001)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 261, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableExprIdentifierContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1995)
			p.TableIdentifier()
		}

	case 2:
		localctx = NewTableExprFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1996)
			p.TableFunctionExpr()
		}

	case 3:
		localctx = NewTableExprSubqueryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1997)
			p.Match(ClickHouseParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1998)
			p.SelectUnionStmt()
		}
		{
			p.SetState(1999)
			p.Match(ClickHouseParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2011)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTableExprAliasContext(p, NewTableExprContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, ClickHouseParserRULE_tableExpr)
			p.SetState(2003)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			p.SetState(2007)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case ClickHouseParserDATE, ClickHouseParserFIRST, ClickHouseParserID, ClickHouseParserKEY, ClickHouseParserIDENTIFIER:
				{
					p.SetState(2004)
					p.Alias()
				}

			case ClickHouseParserAS:
				{
					p.SetState(2005)
					p.Match(ClickHouseParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2006)
					p.Identifier()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		}
		p.SetState(2013)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableFunctionExprContext is an interface to support dynamic dispatch.
type ITableFunctionExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	TableArgList() ITableArgListContext

	// IsTableFunctionExprContext differentiates from other interfaces.
	IsTableFunctionExprContext()
}

type TableFunctionExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableFunctionExprContext() *TableFunctionExprContext {
	var p = new(TableFunctionExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableFunctionExpr
	return p
}

func InitEmptyTableFunctionExprContext(p *TableFunctionExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableFunctionExpr
}

func (*TableFunctionExprContext) IsTableFunctionExprContext() {}

func NewTableFunctionExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableFunctionExprContext {
	var p = new(TableFunctionExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableFunctionExpr

	return p
}

func (s *TableFunctionExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableFunctionExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableFunctionExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLPAREN, 0)
}

func (s *TableFunctionExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRPAREN, 0)
}

func (s *TableFunctionExprContext) TableArgList() ITableArgListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableArgListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableArgListContext)
}

func (s *TableFunctionExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableFunctionExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableFunctionExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableFunctionExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableFunctionExpr() (localctx ITableFunctionExprContext) {
	localctx = NewTableFunctionExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, ClickHouseParserRULE_tableFunctionExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2014)
		p.Identifier()
	}
	{
		p.SetState(2015)
		p.Match(ClickHouseParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2017)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-1) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-5) != 0) || ((int64((_la-192)) & ^0x3f) == 0 && ((int64(1)<<(_la-192))&67133503) != 0) {
		{
			p.SetState(2016)
			p.TableArgList()
		}

	}
	{
		p.SetState(2019)
		p.Match(ClickHouseParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableIdentifierContext is an interface to support dynamic dispatch.
type ITableIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	DatabaseIdentifier() IDatabaseIdentifierContext
	DOT() antlr.TerminalNode

	// IsTableIdentifierContext differentiates from other interfaces.
	IsTableIdentifierContext()
}

type TableIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableIdentifierContext() *TableIdentifierContext {
	var p = new(TableIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableIdentifier
	return p
}

func InitEmptyTableIdentifierContext(p *TableIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableIdentifier
}

func (*TableIdentifierContext) IsTableIdentifierContext() {}

func NewTableIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableIdentifierContext {
	var p = new(TableIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableIdentifier

	return p
}

func (s *TableIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TableIdentifierContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TableIdentifierContext) DatabaseIdentifier() IDatabaseIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabaseIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabaseIdentifierContext)
}

func (s *TableIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *TableIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableIdentifier() (localctx ITableIdentifierContext) {
	localctx = NewTableIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, ClickHouseParserRULE_tableIdentifier)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(2024)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2021)
			p.DatabaseIdentifier()
		}
		{
			p.SetState(2022)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(2026)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableArgListContext is an interface to support dynamic dispatch.
type ITableArgListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTableArgExpr() []ITableArgExprContext
	TableArgExpr(i int) ITableArgExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTableArgListContext differentiates from other interfaces.
	IsTableArgListContext()
}

type TableArgListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableArgListContext() *TableArgListContext {
	var p = new(TableArgListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgList
	return p
}

func InitEmptyTableArgListContext(p *TableArgListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgList
}

func (*TableArgListContext) IsTableArgListContext() {}

func NewTableArgListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableArgListContext {
	var p = new(TableArgListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableArgList

	return p
}

func (s *TableArgListContext) GetParser() antlr.Parser { return s.parser }

func (s *TableArgListContext) AllTableArgExpr() []ITableArgExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITableArgExprContext); ok {
			len++
		}
	}

	tst := make([]ITableArgExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITableArgExprContext); ok {
			tst[i] = t.(ITableArgExprContext)
			i++
		}
	}

	return tst
}

func (s *TableArgListContext) TableArgExpr(i int) ITableArgExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableArgExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableArgExprContext)
}

func (s *TableArgListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserCOMMA)
}

func (s *TableArgListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMA, i)
}

func (s *TableArgListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableArgListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableArgListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableArgList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableArgList() (localctx ITableArgListContext) {
	localctx = NewTableArgListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, ClickHouseParserRULE_tableArgList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2028)
		p.TableArgExpr()
	}
	p.SetState(2033)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ClickHouseParserCOMMA {
		{
			p.SetState(2029)
			p.Match(ClickHouseParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2030)
			p.TableArgExpr()
		}

		p.SetState(2035)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableArgExprContext is an interface to support dynamic dispatch.
type ITableArgExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedIdentifier() INestedIdentifierContext
	TableFunctionExpr() ITableFunctionExprContext
	Literal() ILiteralContext

	// IsTableArgExprContext differentiates from other interfaces.
	IsTableArgExprContext()
}

type TableArgExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableArgExprContext() *TableArgExprContext {
	var p = new(TableArgExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgExpr
	return p
}

func InitEmptyTableArgExprContext(p *TableArgExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_tableArgExpr
}

func (*TableArgExprContext) IsTableArgExprContext() {}

func NewTableArgExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableArgExprContext {
	var p = new(TableArgExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_tableArgExpr

	return p
}

func (s *TableArgExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TableArgExprContext) NestedIdentifier() INestedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedIdentifierContext)
}

func (s *TableArgExprContext) TableFunctionExpr() ITableFunctionExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableFunctionExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableFunctionExprContext)
}

func (s *TableArgExprContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *TableArgExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableArgExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableArgExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitTableArgExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) TableArgExpr() (localctx ITableArgExprContext) {
	localctx = NewTableArgExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, ClickHouseParserRULE_tableArgExpr)
	p.SetState(2039)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 267, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2036)
			p.NestedIdentifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2037)
			p.TableFunctionExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2038)
			p.Literal()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDatabaseIdentifierContext is an interface to support dynamic dispatch.
type IDatabaseIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsDatabaseIdentifierContext differentiates from other interfaces.
	IsDatabaseIdentifierContext()
}

type DatabaseIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabaseIdentifierContext() *DatabaseIdentifierContext {
	var p = new(DatabaseIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_databaseIdentifier
	return p
}

func InitEmptyDatabaseIdentifierContext(p *DatabaseIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_databaseIdentifier
}

func (*DatabaseIdentifierContext) IsDatabaseIdentifierContext() {}

func NewDatabaseIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatabaseIdentifierContext {
	var p = new(DatabaseIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_databaseIdentifier

	return p
}

func (s *DatabaseIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DatabaseIdentifierContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DatabaseIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatabaseIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatabaseIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitDatabaseIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) DatabaseIdentifier() (localctx IDatabaseIdentifierContext) {
	localctx = NewDatabaseIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, ClickHouseParserRULE_databaseIdentifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2041)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloatingLiteralContext is an interface to support dynamic dispatch.
type IFloatingLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOATING_LITERAL() antlr.TerminalNode
	DOT() antlr.TerminalNode
	AllDECIMAL_LITERAL() []antlr.TerminalNode
	DECIMAL_LITERAL(i int) antlr.TerminalNode
	OCTAL_LITERAL() antlr.TerminalNode

	// IsFloatingLiteralContext differentiates from other interfaces.
	IsFloatingLiteralContext()
}

type FloatingLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatingLiteralContext() *FloatingLiteralContext {
	var p = new(FloatingLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_floatingLiteral
	return p
}

func InitEmptyFloatingLiteralContext(p *FloatingLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_floatingLiteral
}

func (*FloatingLiteralContext) IsFloatingLiteralContext() {}

func NewFloatingLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatingLiteralContext {
	var p = new(FloatingLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_floatingLiteral

	return p
}

func (s *FloatingLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatingLiteralContext) FLOATING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFLOATING_LITERAL, 0)
}

func (s *FloatingLiteralContext) DOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDOT, 0)
}

func (s *FloatingLiteralContext) AllDECIMAL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(ClickHouseParserDECIMAL_LITERAL)
}

func (s *FloatingLiteralContext) DECIMAL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, i)
}

func (s *FloatingLiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOCTAL_LITERAL, 0)
}

func (s *FloatingLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatingLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatingLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitFloatingLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) FloatingLiteral() (localctx IFloatingLiteralContext) {
	localctx = NewFloatingLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, ClickHouseParserRULE_floatingLiteral)
	var _la int

	p.SetState(2051)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserFLOATING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2043)
			p.Match(ClickHouseParserFLOATING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2044)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2045)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserOCTAL_LITERAL || _la == ClickHouseParserDECIMAL_LITERAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case ClickHouseParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2046)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2047)
			p.Match(ClickHouseParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2049)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 268, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2048)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ClickHouseParserOCTAL_LITERAL || _la == ClickHouseParserDECIMAL_LITERAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberLiteralContext is an interface to support dynamic dispatch.
type INumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FloatingLiteral() IFloatingLiteralContext
	OCTAL_LITERAL() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode
	HEXADECIMAL_LITERAL() antlr.TerminalNode
	INF() antlr.TerminalNode
	NAN_SQL() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	DASH() antlr.TerminalNode

	// IsNumberLiteralContext differentiates from other interfaces.
	IsNumberLiteralContext()
}

type NumberLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralContext() *NumberLiteralContext {
	var p = new(NumberLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_numberLiteral
	return p
}

func InitEmptyNumberLiteralContext(p *NumberLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_numberLiteral
}

func (*NumberLiteralContext) IsNumberLiteralContext() {}

func NewNumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralContext {
	var p = new(NumberLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_numberLiteral

	return p
}

func (s *NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralContext) FloatingLiteral() IFloatingLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloatingLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloatingLiteralContext)
}

func (s *NumberLiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOCTAL_LITERAL, 0)
}

func (s *NumberLiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDECIMAL_LITERAL, 0)
}

func (s *NumberLiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHEXADECIMAL_LITERAL, 0)
}

func (s *NumberLiteralContext) INF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINF, 0)
}

func (s *NumberLiteralContext) NAN_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNAN_SQL, 0)
}

func (s *NumberLiteralContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPLUS, 0)
}

func (s *NumberLiteralContext) DASH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDASH, 0)
}

func (s *NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitNumberLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) NumberLiteral() (localctx INumberLiteralContext) {
	localctx = NewNumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, ClickHouseParserRULE_numberLiteral)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2054)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ClickHouseParserDASH || _la == ClickHouseParserPLUS {
		{
			p.SetState(2053)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ClickHouseParserDASH || _la == ClickHouseParserPLUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2062)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 271, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2056)
			p.FloatingLiteral()
		}

	case 2:
		{
			p.SetState(2057)
			p.Match(ClickHouseParserOCTAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(2058)
			p.Match(ClickHouseParserDECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(2059)
			p.Match(ClickHouseParserHEXADECIMAL_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(2060)
			p.Match(ClickHouseParserINF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		{
			p.SetState(2061)
			p.Match(ClickHouseParserNAN_SQL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NumberLiteral() INumberLiteralContext
	STRING_LITERAL() antlr.TerminalNode
	NULL_SQL() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NumberLiteral() INumberLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *LiteralContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *LiteralContext) NULL_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULL_SQL, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, ClickHouseParserRULE_literal)
	p.SetState(2067)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserINF, ClickHouseParserNAN_SQL, ClickHouseParserFLOATING_LITERAL, ClickHouseParserOCTAL_LITERAL, ClickHouseParserDECIMAL_LITERAL, ClickHouseParserHEXADECIMAL_LITERAL, ClickHouseParserDASH, ClickHouseParserDOT, ClickHouseParserPLUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2064)
			p.NumberLiteral()
		}

	case ClickHouseParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2065)
			p.Match(ClickHouseParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserNULL_SQL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2066)
			p.Match(ClickHouseParserNULL_SQL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntervalContext is an interface to support dynamic dispatch.
type IIntervalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SECOND() antlr.TerminalNode
	MINUTE() antlr.TerminalNode
	HOUR() antlr.TerminalNode
	DAY() antlr.TerminalNode
	WEEK() antlr.TerminalNode
	MONTH() antlr.TerminalNode
	QUARTER() antlr.TerminalNode
	YEAR() antlr.TerminalNode

	// IsIntervalContext differentiates from other interfaces.
	IsIntervalContext()
}

type IntervalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalContext() *IntervalContext {
	var p = new(IntervalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_interval
	return p
}

func InitEmptyIntervalContext(p *IntervalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_interval
}

func (*IntervalContext) IsIntervalContext() {}

func NewIntervalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalContext {
	var p = new(IntervalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_interval

	return p
}

func (s *IntervalContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalContext) SECOND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSECOND, 0)
}

func (s *IntervalContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMINUTE, 0)
}

func (s *IntervalContext) HOUR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHOUR, 0)
}

func (s *IntervalContext) DAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDAY, 0)
}

func (s *IntervalContext) WEEK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWEEK, 0)
}

func (s *IntervalContext) MONTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMONTH, 0)
}

func (s *IntervalContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserQUARTER, 0)
}

func (s *IntervalContext) YEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserYEAR, 0)
}

func (s *IntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitInterval(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Interval() (localctx IIntervalContext) {
	localctx = NewIntervalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, ClickHouseParserRULE_interval)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2069)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ClickHouseParserDAY || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&72057615512764417) != 0) || ((int64((_la-144)) & ^0x3f) == 0 && ((int64(1)<<(_la-144))&36283883716609) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AFTER() antlr.TerminalNode
	ALIAS() antlr.TerminalNode
	ALL() antlr.TerminalNode
	ALTER() antlr.TerminalNode
	AND() antlr.TerminalNode
	ANTI() antlr.TerminalNode
	ANY() antlr.TerminalNode
	ARRAY() antlr.TerminalNode
	AS() antlr.TerminalNode
	ASCENDING() antlr.TerminalNode
	ASOF() antlr.TerminalNode
	AST() antlr.TerminalNode
	ASYNC() antlr.TerminalNode
	ATTACH() antlr.TerminalNode
	BETWEEN() antlr.TerminalNode
	BOTH() antlr.TerminalNode
	BY() antlr.TerminalNode
	CASE() antlr.TerminalNode
	CAST() antlr.TerminalNode
	CHECK() antlr.TerminalNode
	CLEAR() antlr.TerminalNode
	CLUSTER() antlr.TerminalNode
	CODEC() antlr.TerminalNode
	COLLATE() antlr.TerminalNode
	COLUMN() antlr.TerminalNode
	COMMENT() antlr.TerminalNode
	CONSTRAINT() antlr.TerminalNode
	CREATE() antlr.TerminalNode
	CROSS() antlr.TerminalNode
	CUBE() antlr.TerminalNode
	CURRENT() antlr.TerminalNode
	DATABASE() antlr.TerminalNode
	DATABASES() antlr.TerminalNode
	DATE() antlr.TerminalNode
	DEDUPLICATE() antlr.TerminalNode
	DEFAULT() antlr.TerminalNode
	DELAY() antlr.TerminalNode
	DELETE() antlr.TerminalNode
	DESCRIBE() antlr.TerminalNode
	DESC() antlr.TerminalNode
	DESCENDING() antlr.TerminalNode
	DETACH() antlr.TerminalNode
	DICTIONARIES() antlr.TerminalNode
	DICTIONARY() antlr.TerminalNode
	DISK() antlr.TerminalNode
	DISTINCT() antlr.TerminalNode
	DISTRIBUTED() antlr.TerminalNode
	DROP() antlr.TerminalNode
	ELSE() antlr.TerminalNode
	END() antlr.TerminalNode
	ENGINE() antlr.TerminalNode
	EVENTS() antlr.TerminalNode
	EXISTS() antlr.TerminalNode
	EXPLAIN() antlr.TerminalNode
	EXPRESSION() antlr.TerminalNode
	EXTRACT() antlr.TerminalNode
	FETCHES() antlr.TerminalNode
	FINAL() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	FLUSH() antlr.TerminalNode
	FOR() antlr.TerminalNode
	FOLLOWING() antlr.TerminalNode
	FORMAT() antlr.TerminalNode
	FREEZE() antlr.TerminalNode
	FROM() antlr.TerminalNode
	FULL() antlr.TerminalNode
	FUNCTION() antlr.TerminalNode
	GLOBAL() antlr.TerminalNode
	GRANULARITY() antlr.TerminalNode
	GROUP() antlr.TerminalNode
	HAVING() antlr.TerminalNode
	HIERARCHICAL() antlr.TerminalNode
	ID() antlr.TerminalNode
	IF() antlr.TerminalNode
	ILIKE() antlr.TerminalNode
	IN() antlr.TerminalNode
	INDEX() antlr.TerminalNode
	INJECTIVE() antlr.TerminalNode
	INNER() antlr.TerminalNode
	INSERT() antlr.TerminalNode
	INTERVAL() antlr.TerminalNode
	INTO() antlr.TerminalNode
	IS() antlr.TerminalNode
	IS_OBJECT_ID() antlr.TerminalNode
	JOIN() antlr.TerminalNode
	JSON_FALSE() antlr.TerminalNode
	JSON_TRUE() antlr.TerminalNode
	KEY() antlr.TerminalNode
	KILL() antlr.TerminalNode
	LAST() antlr.TerminalNode
	LAYOUT() antlr.TerminalNode
	LEADING() antlr.TerminalNode
	LEFT() antlr.TerminalNode
	LIFETIME() antlr.TerminalNode
	LIKE() antlr.TerminalNode
	LIMIT() antlr.TerminalNode
	LIVE() antlr.TerminalNode
	LOCAL() antlr.TerminalNode
	LOGS() antlr.TerminalNode
	MATERIALIZE() antlr.TerminalNode
	MATERIALIZED() antlr.TerminalNode
	MAX() antlr.TerminalNode
	MERGES() antlr.TerminalNode
	MIN() antlr.TerminalNode
	MODIFY() antlr.TerminalNode
	MOVE() antlr.TerminalNode
	MUTATION() antlr.TerminalNode
	NO() antlr.TerminalNode
	NOT() antlr.TerminalNode
	NULLS() antlr.TerminalNode
	OFFSET() antlr.TerminalNode
	ON() antlr.TerminalNode
	OPTIMIZE() antlr.TerminalNode
	OR() antlr.TerminalNode
	ORDER() antlr.TerminalNode
	OUTER() antlr.TerminalNode
	OUTFILE() antlr.TerminalNode
	OVER() antlr.TerminalNode
	PARTITION() antlr.TerminalNode
	POPULATE() antlr.TerminalNode
	PRECEDING() antlr.TerminalNode
	PREWHERE() antlr.TerminalNode
	PRIMARY() antlr.TerminalNode
	RANGE() antlr.TerminalNode
	RELOAD() antlr.TerminalNode
	REMOVE() antlr.TerminalNode
	RENAME() antlr.TerminalNode
	REPLACE() antlr.TerminalNode
	REPLICA() antlr.TerminalNode
	REPLICATED() antlr.TerminalNode
	RIGHT() antlr.TerminalNode
	ROLLUP() antlr.TerminalNode
	ROW() antlr.TerminalNode
	ROWS() antlr.TerminalNode
	SAMPLE() antlr.TerminalNode
	SELECT() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	SENDS() antlr.TerminalNode
	SET() antlr.TerminalNode
	SETTINGS() antlr.TerminalNode
	SHOW() antlr.TerminalNode
	SOURCE() antlr.TerminalNode
	START() antlr.TerminalNode
	STOP() antlr.TerminalNode
	SUBSTRING() antlr.TerminalNode
	SYNC() antlr.TerminalNode
	SYNTAX() antlr.TerminalNode
	SYSTEM() antlr.TerminalNode
	TABLE() antlr.TerminalNode
	TABLES() antlr.TerminalNode
	TEMPORARY() antlr.TerminalNode
	TEST() antlr.TerminalNode
	THEN() antlr.TerminalNode
	TIES() antlr.TerminalNode
	TIMEOUT() antlr.TerminalNode
	TIMESTAMP() antlr.TerminalNode
	TOTALS() antlr.TerminalNode
	TRAILING() antlr.TerminalNode
	TRIM() antlr.TerminalNode
	TRUNCATE() antlr.TerminalNode
	TO() antlr.TerminalNode
	TOP() antlr.TerminalNode
	TTL() antlr.TerminalNode
	TYPE() antlr.TerminalNode
	UNBOUNDED() antlr.TerminalNode
	UNION() antlr.TerminalNode
	UPDATE() antlr.TerminalNode
	USE() antlr.TerminalNode
	USING() antlr.TerminalNode
	UUID() antlr.TerminalNode
	VALUES() antlr.TerminalNode
	VIEW() antlr.TerminalNode
	VOLUME() antlr.TerminalNode
	WATCH() antlr.TerminalNode
	WHEN() antlr.TerminalNode
	WHERE() antlr.TerminalNode
	WINDOW() antlr.TerminalNode
	WITH() antlr.TerminalNode

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keyword
	return p
}

func InitEmptyKeywordContext(p *KeywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keyword
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) AFTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAFTER, 0)
}

func (s *KeywordContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALIAS, 0)
}

func (s *KeywordContext) ALL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALL, 0)
}

func (s *KeywordContext) ALTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserALTER, 0)
}

func (s *KeywordContext) AND() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAND, 0)
}

func (s *KeywordContext) ANTI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANTI, 0)
}

func (s *KeywordContext) ANY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserANY, 0)
}

func (s *KeywordContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserARRAY, 0)
}

func (s *KeywordContext) AS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAS, 0)
}

func (s *KeywordContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASCENDING, 0)
}

func (s *KeywordContext) ASOF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASOF, 0)
}

func (s *KeywordContext) AST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserAST, 0)
}

func (s *KeywordContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserASYNC, 0)
}

func (s *KeywordContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserATTACH, 0)
}

func (s *KeywordContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBETWEEN, 0)
}

func (s *KeywordContext) BOTH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBOTH, 0)
}

func (s *KeywordContext) BY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserBY, 0)
}

func (s *KeywordContext) CASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCASE, 0)
}

func (s *KeywordContext) CAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCAST, 0)
}

func (s *KeywordContext) CHECK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCHECK, 0)
}

func (s *KeywordContext) CLEAR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLEAR, 0)
}

func (s *KeywordContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCLUSTER, 0)
}

func (s *KeywordContext) CODEC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCODEC, 0)
}

func (s *KeywordContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLLATE, 0)
}

func (s *KeywordContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOLUMN, 0)
}

func (s *KeywordContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCOMMENT, 0)
}

func (s *KeywordContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCONSTRAINT, 0)
}

func (s *KeywordContext) CREATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCREATE, 0)
}

func (s *KeywordContext) CROSS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCROSS, 0)
}

func (s *KeywordContext) CUBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCUBE, 0)
}

func (s *KeywordContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserCURRENT, 0)
}

func (s *KeywordContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASE, 0)
}

func (s *KeywordContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATABASES, 0)
}

func (s *KeywordContext) DATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATE, 0)
}

func (s *KeywordContext) DEDUPLICATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEDUPLICATE, 0)
}

func (s *KeywordContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDEFAULT, 0)
}

func (s *KeywordContext) DELAY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELAY, 0)
}

func (s *KeywordContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDELETE, 0)
}

func (s *KeywordContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCRIBE, 0)
}

func (s *KeywordContext) DESC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESC, 0)
}

func (s *KeywordContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDESCENDING, 0)
}

func (s *KeywordContext) DETACH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDETACH, 0)
}

func (s *KeywordContext) DICTIONARIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARIES, 0)
}

func (s *KeywordContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDICTIONARY, 0)
}

func (s *KeywordContext) DISK() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISK, 0)
}

func (s *KeywordContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTINCT, 0)
}

func (s *KeywordContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDISTRIBUTED, 0)
}

func (s *KeywordContext) DROP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDROP, 0)
}

func (s *KeywordContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserELSE, 0)
}

func (s *KeywordContext) END() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEND, 0)
}

func (s *KeywordContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserENGINE, 0)
}

func (s *KeywordContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEVENTS, 0)
}

func (s *KeywordContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXISTS, 0)
}

func (s *KeywordContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPLAIN, 0)
}

func (s *KeywordContext) EXPRESSION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXPRESSION, 0)
}

func (s *KeywordContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEXTRACT, 0)
}

func (s *KeywordContext) FETCHES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFETCHES, 0)
}

func (s *KeywordContext) FINAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFINAL, 0)
}

func (s *KeywordContext) FIRST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFIRST, 0)
}

func (s *KeywordContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFLUSH, 0)
}

func (s *KeywordContext) FOR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOR, 0)
}

func (s *KeywordContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFOLLOWING, 0)
}

func (s *KeywordContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFORMAT, 0)
}

func (s *KeywordContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFREEZE, 0)
}

func (s *KeywordContext) FROM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFROM, 0)
}

func (s *KeywordContext) FULL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFULL, 0)
}

func (s *KeywordContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFUNCTION, 0)
}

func (s *KeywordContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGLOBAL, 0)
}

func (s *KeywordContext) GRANULARITY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGRANULARITY, 0)
}

func (s *KeywordContext) GROUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserGROUP, 0)
}

func (s *KeywordContext) HAVING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHAVING, 0)
}

func (s *KeywordContext) HIERARCHICAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserHIERARCHICAL, 0)
}

func (s *KeywordContext) ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserID, 0)
}

func (s *KeywordContext) IF() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIF, 0)
}

func (s *KeywordContext) ILIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserILIKE, 0)
}

func (s *KeywordContext) IN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIN, 0)
}

func (s *KeywordContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINDEX, 0)
}

func (s *KeywordContext) INJECTIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINJECTIVE, 0)
}

func (s *KeywordContext) INNER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINNER, 0)
}

func (s *KeywordContext) INSERT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINSERT, 0)
}

func (s *KeywordContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTERVAL, 0)
}

func (s *KeywordContext) INTO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserINTO, 0)
}

func (s *KeywordContext) IS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS, 0)
}

func (s *KeywordContext) IS_OBJECT_ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIS_OBJECT_ID, 0)
}

func (s *KeywordContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJOIN, 0)
}

func (s *KeywordContext) JSON_FALSE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJSON_FALSE, 0)
}

func (s *KeywordContext) JSON_TRUE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserJSON_TRUE, 0)
}

func (s *KeywordContext) KEY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKEY, 0)
}

func (s *KeywordContext) KILL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKILL, 0)
}

func (s *KeywordContext) LAST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAST, 0)
}

func (s *KeywordContext) LAYOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLAYOUT, 0)
}

func (s *KeywordContext) LEADING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEADING, 0)
}

func (s *KeywordContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLEFT, 0)
}

func (s *KeywordContext) LIFETIME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIFETIME, 0)
}

func (s *KeywordContext) LIKE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIKE, 0)
}

func (s *KeywordContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIMIT, 0)
}

func (s *KeywordContext) LIVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLIVE, 0)
}

func (s *KeywordContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOCAL, 0)
}

func (s *KeywordContext) LOGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserLOGS, 0)
}

func (s *KeywordContext) MATERIALIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZE, 0)
}

func (s *KeywordContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMATERIALIZED, 0)
}

func (s *KeywordContext) MAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMAX, 0)
}

func (s *KeywordContext) MERGES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMERGES, 0)
}

func (s *KeywordContext) MIN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMIN, 0)
}

func (s *KeywordContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMODIFY, 0)
}

func (s *KeywordContext) MOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMOVE, 0)
}

func (s *KeywordContext) MUTATION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserMUTATION, 0)
}

func (s *KeywordContext) NO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNO, 0)
}

func (s *KeywordContext) NOT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNOT, 0)
}

func (s *KeywordContext) NULLS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULLS, 0)
}

func (s *KeywordContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOFFSET, 0)
}

func (s *KeywordContext) ON() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserON, 0)
}

func (s *KeywordContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOPTIMIZE, 0)
}

func (s *KeywordContext) OR() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOR, 0)
}

func (s *KeywordContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserORDER, 0)
}

func (s *KeywordContext) OUTER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTER, 0)
}

func (s *KeywordContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOUTFILE, 0)
}

func (s *KeywordContext) OVER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserOVER, 0)
}

func (s *KeywordContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPARTITION, 0)
}

func (s *KeywordContext) POPULATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPOPULATE, 0)
}

func (s *KeywordContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRECEDING, 0)
}

func (s *KeywordContext) PREWHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPREWHERE, 0)
}

func (s *KeywordContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserPRIMARY, 0)
}

func (s *KeywordContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRANGE, 0)
}

func (s *KeywordContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRELOAD, 0)
}

func (s *KeywordContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREMOVE, 0)
}

func (s *KeywordContext) RENAME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRENAME, 0)
}

func (s *KeywordContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLACE, 0)
}

func (s *KeywordContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICA, 0)
}

func (s *KeywordContext) REPLICATED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserREPLICATED, 0)
}

func (s *KeywordContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserRIGHT, 0)
}

func (s *KeywordContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROLLUP, 0)
}

func (s *KeywordContext) ROW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROW, 0)
}

func (s *KeywordContext) ROWS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserROWS, 0)
}

func (s *KeywordContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSAMPLE, 0)
}

func (s *KeywordContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSELECT, 0)
}

func (s *KeywordContext) SEMI() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSEMI, 0)
}

func (s *KeywordContext) SENDS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSENDS, 0)
}

func (s *KeywordContext) SET() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSET, 0)
}

func (s *KeywordContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSETTINGS, 0)
}

func (s *KeywordContext) SHOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSHOW, 0)
}

func (s *KeywordContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSOURCE, 0)
}

func (s *KeywordContext) START() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTART, 0)
}

func (s *KeywordContext) STOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTOP, 0)
}

func (s *KeywordContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSUBSTRING, 0)
}

func (s *KeywordContext) SYNC() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNC, 0)
}

func (s *KeywordContext) SYNTAX() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYNTAX, 0)
}

func (s *KeywordContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSYSTEM, 0)
}

func (s *KeywordContext) TABLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLE, 0)
}

func (s *KeywordContext) TABLES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTABLES, 0)
}

func (s *KeywordContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEMPORARY, 0)
}

func (s *KeywordContext) TEST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTEST, 0)
}

func (s *KeywordContext) THEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTHEN, 0)
}

func (s *KeywordContext) TIES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIES, 0)
}

func (s *KeywordContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMEOUT, 0)
}

func (s *KeywordContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTIMESTAMP, 0)
}

func (s *KeywordContext) TOTALS() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOTALS, 0)
}

func (s *KeywordContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRAILING, 0)
}

func (s *KeywordContext) TRIM() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRIM, 0)
}

func (s *KeywordContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTRUNCATE, 0)
}

func (s *KeywordContext) TO() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTO, 0)
}

func (s *KeywordContext) TOP() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTOP, 0)
}

func (s *KeywordContext) TTL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTTL, 0)
}

func (s *KeywordContext) TYPE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserTYPE, 0)
}

func (s *KeywordContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNBOUNDED, 0)
}

func (s *KeywordContext) UNION() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUNION, 0)
}

func (s *KeywordContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUPDATE, 0)
}

func (s *KeywordContext) USE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSE, 0)
}

func (s *KeywordContext) USING() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUSING, 0)
}

func (s *KeywordContext) UUID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserUUID, 0)
}

func (s *KeywordContext) VALUES() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVALUES, 0)
}

func (s *KeywordContext) VIEW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVIEW, 0)
}

func (s *KeywordContext) VOLUME() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserVOLUME, 0)
}

func (s *KeywordContext) WATCH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWATCH, 0)
}

func (s *KeywordContext) WHEN() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHEN, 0)
}

func (s *KeywordContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWHERE, 0)
}

func (s *KeywordContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWINDOW, 0)
}

func (s *KeywordContext) WITH() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserWITH, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, ClickHouseParserRULE_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2071)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-68719476740) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-2577255255640065) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&-2377900603251687437) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeywordForAliasContext is an interface to support dynamic dispatch.
type IKeywordForAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATE() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	ID() antlr.TerminalNode
	KEY() antlr.TerminalNode

	// IsKeywordForAliasContext differentiates from other interfaces.
	IsKeywordForAliasContext()
}

type KeywordForAliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordForAliasContext() *KeywordForAliasContext {
	var p = new(KeywordForAliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keywordForAlias
	return p
}

func InitEmptyKeywordForAliasContext(p *KeywordForAliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_keywordForAlias
}

func (*KeywordForAliasContext) IsKeywordForAliasContext() {}

func NewKeywordForAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordForAliasContext {
	var p = new(KeywordForAliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_keywordForAlias

	return p
}

func (s *KeywordForAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordForAliasContext) DATE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserDATE, 0)
}

func (s *KeywordForAliasContext) FIRST() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserFIRST, 0)
}

func (s *KeywordForAliasContext) ID() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserID, 0)
}

func (s *KeywordForAliasContext) KEY() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserKEY, 0)
}

func (s *KeywordForAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordForAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordForAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitKeywordForAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) KeywordForAlias() (localctx IKeywordForAliasContext) {
	localctx = NewKeywordForAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, ClickHouseParserRULE_keywordForAlias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2073)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-35)) & ^0x3f) == 0 && ((int64(1)<<(_la-35))&36030996109328385) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	KeywordForAlias() IKeywordForAliasContext

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alias
	return p
}

func InitEmptyAliasContext(p *AliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_alias
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIDENTIFIER, 0)
}

func (s *AliasContext) KeywordForAlias() IKeywordForAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordForAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordForAliasContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Alias() (localctx IAliasContext) {
	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, ClickHouseParserRULE_alias)
	p.SetState(2077)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2075)
			p.Match(ClickHouseParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserDATE, ClickHouseParserFIRST, ClickHouseParserID, ClickHouseParserKEY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2076)
			p.KeywordForAlias()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Interval() IIntervalContext
	Keyword() IKeywordContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserIDENTIFIER, 0)
}

func (s *IdentifierContext) Interval() IIntervalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntervalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *IdentifierContext) Keyword() IKeywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, ClickHouseParserRULE_identifier)
	p.SetState(2082)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2079)
			p.Match(ClickHouseParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ClickHouseParserDAY, ClickHouseParserHOUR, ClickHouseParserMINUTE, ClickHouseParserMONTH, ClickHouseParserQUARTER, ClickHouseParserSECOND, ClickHouseParserWEEK, ClickHouseParserYEAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2080)
			p.Interval()
		}

	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMODIFY, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2081)
			p.Keyword()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierOrNullContext is an interface to support dynamic dispatch.
type IIdentifierOrNullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	NULL_SQL() antlr.TerminalNode

	// IsIdentifierOrNullContext differentiates from other interfaces.
	IsIdentifierOrNullContext()
}

type IdentifierOrNullContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierOrNullContext() *IdentifierOrNullContext {
	var p = new(IdentifierOrNullContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifierOrNull
	return p
}

func InitEmptyIdentifierOrNullContext(p *IdentifierOrNullContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_identifierOrNull
}

func (*IdentifierOrNullContext) IsIdentifierOrNullContext() {}

func NewIdentifierOrNullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierOrNullContext {
	var p = new(IdentifierOrNullContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_identifierOrNull

	return p
}

func (s *IdentifierOrNullContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierOrNullContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierOrNullContext) NULL_SQL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserNULL_SQL, 0)
}

func (s *IdentifierOrNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierOrNullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierOrNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitIdentifierOrNull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) IdentifierOrNull() (localctx IIdentifierOrNullContext) {
	localctx = NewIdentifierOrNullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, ClickHouseParserRULE_identifierOrNull)
	p.SetState(2086)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ClickHouseParserAFTER, ClickHouseParserALIAS, ClickHouseParserALL, ClickHouseParserALTER, ClickHouseParserAND, ClickHouseParserANTI, ClickHouseParserANY, ClickHouseParserARRAY, ClickHouseParserAS, ClickHouseParserASCENDING, ClickHouseParserASOF, ClickHouseParserAST, ClickHouseParserASYNC, ClickHouseParserATTACH, ClickHouseParserBETWEEN, ClickHouseParserBOTH, ClickHouseParserBY, ClickHouseParserCASE, ClickHouseParserCAST, ClickHouseParserCHECK, ClickHouseParserCLEAR, ClickHouseParserCLUSTER, ClickHouseParserCODEC, ClickHouseParserCOLLATE, ClickHouseParserCOLUMN, ClickHouseParserCOMMENT, ClickHouseParserCONSTRAINT, ClickHouseParserCREATE, ClickHouseParserCROSS, ClickHouseParserCUBE, ClickHouseParserCURRENT, ClickHouseParserDATABASE, ClickHouseParserDATABASES, ClickHouseParserDATE, ClickHouseParserDAY, ClickHouseParserDEDUPLICATE, ClickHouseParserDEFAULT, ClickHouseParserDELAY, ClickHouseParserDELETE, ClickHouseParserDESC, ClickHouseParserDESCENDING, ClickHouseParserDESCRIBE, ClickHouseParserDETACH, ClickHouseParserDICTIONARIES, ClickHouseParserDICTIONARY, ClickHouseParserDISK, ClickHouseParserDISTINCT, ClickHouseParserDISTRIBUTED, ClickHouseParserDROP, ClickHouseParserELSE, ClickHouseParserEND, ClickHouseParserENGINE, ClickHouseParserEVENTS, ClickHouseParserEXISTS, ClickHouseParserEXPLAIN, ClickHouseParserEXPRESSION, ClickHouseParserEXTRACT, ClickHouseParserFETCHES, ClickHouseParserFINAL, ClickHouseParserFIRST, ClickHouseParserFLUSH, ClickHouseParserFOLLOWING, ClickHouseParserFOR, ClickHouseParserFORMAT, ClickHouseParserFREEZE, ClickHouseParserFROM, ClickHouseParserFULL, ClickHouseParserFUNCTION, ClickHouseParserGLOBAL, ClickHouseParserGRANULARITY, ClickHouseParserGROUP, ClickHouseParserHAVING, ClickHouseParserHIERARCHICAL, ClickHouseParserHOUR, ClickHouseParserID, ClickHouseParserIF, ClickHouseParserILIKE, ClickHouseParserIN, ClickHouseParserINDEX, ClickHouseParserINJECTIVE, ClickHouseParserINNER, ClickHouseParserINSERT, ClickHouseParserINTERVAL, ClickHouseParserINTO, ClickHouseParserIS, ClickHouseParserIS_OBJECT_ID, ClickHouseParserJOIN, ClickHouseParserKEY, ClickHouseParserKILL, ClickHouseParserLAST, ClickHouseParserLAYOUT, ClickHouseParserLEADING, ClickHouseParserLEFT, ClickHouseParserLIFETIME, ClickHouseParserLIKE, ClickHouseParserLIMIT, ClickHouseParserLIVE, ClickHouseParserLOCAL, ClickHouseParserLOGS, ClickHouseParserMATERIALIZE, ClickHouseParserMATERIALIZED, ClickHouseParserMAX, ClickHouseParserMERGES, ClickHouseParserMIN, ClickHouseParserMINUTE, ClickHouseParserMODIFY, ClickHouseParserMONTH, ClickHouseParserMOVE, ClickHouseParserMUTATION, ClickHouseParserNO, ClickHouseParserNOT, ClickHouseParserNULLS, ClickHouseParserOFFSET, ClickHouseParserON, ClickHouseParserOPTIMIZE, ClickHouseParserOR, ClickHouseParserORDER, ClickHouseParserOUTER, ClickHouseParserOUTFILE, ClickHouseParserOVER, ClickHouseParserPARTITION, ClickHouseParserPOPULATE, ClickHouseParserPRECEDING, ClickHouseParserPREWHERE, ClickHouseParserPRIMARY, ClickHouseParserQUARTER, ClickHouseParserRANGE, ClickHouseParserRELOAD, ClickHouseParserREMOVE, ClickHouseParserRENAME, ClickHouseParserREPLACE, ClickHouseParserREPLICA, ClickHouseParserREPLICATED, ClickHouseParserRIGHT, ClickHouseParserROLLUP, ClickHouseParserROW, ClickHouseParserROWS, ClickHouseParserSAMPLE, ClickHouseParserSECOND, ClickHouseParserSELECT, ClickHouseParserSEMI, ClickHouseParserSENDS, ClickHouseParserSET, ClickHouseParserSETTINGS, ClickHouseParserSHOW, ClickHouseParserSOURCE, ClickHouseParserSTART, ClickHouseParserSTOP, ClickHouseParserSUBSTRING, ClickHouseParserSYNC, ClickHouseParserSYNTAX, ClickHouseParserSYSTEM, ClickHouseParserTABLE, ClickHouseParserTABLES, ClickHouseParserTEMPORARY, ClickHouseParserTEST, ClickHouseParserTHEN, ClickHouseParserTIES, ClickHouseParserTIMEOUT, ClickHouseParserTIMESTAMP, ClickHouseParserTO, ClickHouseParserTOP, ClickHouseParserTOTALS, ClickHouseParserTRAILING, ClickHouseParserTRIM, ClickHouseParserTRUNCATE, ClickHouseParserTTL, ClickHouseParserTYPE, ClickHouseParserUNBOUNDED, ClickHouseParserUNION, ClickHouseParserUPDATE, ClickHouseParserUSE, ClickHouseParserUSING, ClickHouseParserUUID, ClickHouseParserVALUES, ClickHouseParserVIEW, ClickHouseParserVOLUME, ClickHouseParserWATCH, ClickHouseParserWEEK, ClickHouseParserWHEN, ClickHouseParserWHERE, ClickHouseParserWINDOW, ClickHouseParserWITH, ClickHouseParserYEAR, ClickHouseParserJSON_FALSE, ClickHouseParserJSON_TRUE, ClickHouseParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2084)
			p.Identifier()
		}

	case ClickHouseParserNULL_SQL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2085)
			p.Match(ClickHouseParserNULL_SQL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumValueContext is an interface to support dynamic dispatch.
type IEnumValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode
	EQ_SINGLE() antlr.TerminalNode
	NumberLiteral() INumberLiteralContext

	// IsEnumValueContext differentiates from other interfaces.
	IsEnumValueContext()
}

type EnumValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueContext() *EnumValueContext {
	var p = new(EnumValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_enumValue
	return p
}

func InitEmptyEnumValueContext(p *EnumValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ClickHouseParserRULE_enumValue
}

func (*EnumValueContext) IsEnumValueContext() {}

func NewEnumValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueContext {
	var p = new(EnumValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ClickHouseParserRULE_enumValue

	return p
}

func (s *EnumValueContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserSTRING_LITERAL, 0)
}

func (s *EnumValueContext) EQ_SINGLE() antlr.TerminalNode {
	return s.GetToken(ClickHouseParserEQ_SINGLE, 0)
}

func (s *EnumValueContext) NumberLiteral() INumberLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *EnumValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ClickHouseParserVisitor:
		return t.VisitEnumValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ClickHouseParser) EnumValue() (localctx IEnumValueContext) {
	localctx = NewEnumValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, ClickHouseParserRULE_enumValue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2088)
		p.Match(ClickHouseParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2089)
		p.Match(ClickHouseParserEQ_SINGLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2090)
		p.NumberLiteral()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ClickHouseParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 15:
		var t *DictionaryAttrDfntContext = nil
		if localctx != nil {
			t = localctx.(*DictionaryAttrDfntContext)
		}
		return p.DictionaryAttrDfnt_Sempred(t, predIndex)

	case 16:
		var t *DictionaryEngineClauseContext = nil
		if localctx != nil {
			t = localctx.(*DictionaryEngineClauseContext)
		}
		return p.DictionaryEngineClause_Sempred(t, predIndex)

	case 29:
		var t *EngineClauseContext = nil
		if localctx != nil {
			t = localctx.(*EngineClauseContext)
		}
		return p.EngineClause_Sempred(t, predIndex)

	case 73:
		var t *JoinExprContext = nil
		if localctx != nil {
			t = localctx.(*JoinExprContext)
		}
		return p.JoinExpr_Sempred(t, predIndex)

	case 99:
		var t *ColumnExprContext = nil
		if localctx != nil {
			t = localctx.(*ColumnExprContext)
		}
		return p.ColumnExpr_Sempred(t, predIndex)

	case 105:
		var t *TableExprContext = nil
		if localctx != nil {
			t = localctx.(*TableExprContext)
		}
		return p.TableExpr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ClickHouseParser) DictionaryAttrDfnt_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return !localctx.(*DictionaryAttrDfntContext).attrs["default"]

	case 1:
		return !localctx.(*DictionaryAttrDfntContext).attrs["expression"]

	case 2:
		return !localctx.(*DictionaryAttrDfntContext).attrs["hierarchical"]

	case 3:
		return !localctx.(*DictionaryAttrDfntContext).attrs["injective"]

	case 4:
		return !localctx.(*DictionaryAttrDfntContext).attrs["is_object_id"]

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) DictionaryEngineClause_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return !localctx.(*DictionaryEngineClauseContext).clauses["source"]

	case 6:
		return !localctx.(*DictionaryEngineClauseContext).clauses["lifetime"]

	case 7:
		return !localctx.(*DictionaryEngineClauseContext).clauses["layout"]

	case 8:
		return !localctx.(*DictionaryEngineClauseContext).clauses["range"]

	case 9:
		return !localctx.(*DictionaryEngineClauseContext).clauses["settings"]

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) EngineClause_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return !localctx.(*EngineClauseContext).clauses["orderByClause"]

	case 11:
		return !localctx.(*EngineClauseContext).clauses["partitionByClause"]

	case 12:
		return !localctx.(*EngineClauseContext).clauses["primaryKeyClause"]

	case 13:
		return !localctx.(*EngineClauseContext).clauses["sampleByClause"]

	case 14:
		return !localctx.(*EngineClauseContext).clauses["ttlClause"]

	case 15:
		return !localctx.(*EngineClauseContext).clauses["settingsClause"]

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) JoinExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 16:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) ColumnExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 28:
		return p.Precpred(p.GetParserRuleContext(), 7)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ClickHouseParser) TableExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 29:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
